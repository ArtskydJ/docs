@startDocuBlock errorCodes 
################################################################################

## general error messages

################################################################################



ERROR_NO_ERROR,0,"no error","No error has occurred."

ERROR_FAILED,1,"failed","Will be raised when a general error occurred."

ERROR_SYS_ERROR,2,"system error","Will be raised when operating system error occurred."

ERROR_OUT_OF_MEMORY,3,"out of memory","Will be raised when there is a memory shortage."

ERROR_INTERNAL,4,"internal error","Will be raised when an internal error occurred."

ERROR_ILLEGAL_NUMBER,5,"illegal number","Will be raised when an illegal representation of a number was given."

ERROR_NUMERIC_OVERFLOW,6,"numeric overflow","Will be raised when a numeric overflow occurred."

ERROR_ILLEGAL_OPTION,7,"illegal option","Will be raised when an unknown option was supplied by the user."

ERROR_DEAD_PID,8,"dead process identifier","Will be raised when a PID without a living process was found."

ERROR_NOT_IMPLEMENTED,9,"not implemented","Will be raised when hitting an unimplemented feature."

ERROR_BAD_PARAMETER,10,"bad parameter","Will be raised when the parameter does not fulfill the requirements."

ERROR_FORBIDDEN,11,"forbidden","Will be raised when you are missing permission for the operation."

ERROR_OUT_OF_MEMORY_MMAP,12,"out of memory in mmap","Will be raised when there is a memory shortage."

ERROR_CORRUPTED_CSV,13,"csv is corrupt","Will be raised when encountering a corrupt csv line."

ERROR_FILE_NOT_FOUND,14,"file not found","Will be raised when a file is not found."

ERROR_CANNOT_WRITE_FILE,15,"cannot write file","Will be raised when a file cannot be written."

ERROR_CANNOT_OVERWRITE_FILE,16,"cannot overwrite file","Will be raised when an attempt is made to overwrite an existing file."

ERROR_TYPE_ERROR,17,"type error","Will be raised when a type error is unencountered."

ERROR_LOCK_TIMEOUT,18,"lock timeout","Will be raised when there's a timeout waiting for a lock."

ERROR_CANNOT_CREATE_DIRECTORY,19,"cannot create directory","Will be raised when an attempt to create a directory fails."

ERROR_CANNOT_CREATE_TEMP_FILE,20,"cannot create temporary file","Will be raised when an attempt to create a temporary file fails."

ERROR_REQUEST_CANCELED,21,"canceled request","Will be raised when a request is canceled by the user."

ERROR_DEBUG,22,"intentional debug error","Will be raised intentionally during debugging."

ERROR_AID_NOT_FOUND,23,"internal error with attribute ID in shaper","Will be raised if an attribute ID is not found in the shaper but should have been."

ERROR_LEGEND_INCOMPLETE,24,"internal error if a legend could not be created","Will be raised if the legend generator was only given access to the shape and some sids are in the data object (inhomogeneous lists)."

ERROR_IP_ADDRESS_INVALID,25,"IP address is invalid","Will be raised when the structure of an IP address is invalid."

ERROR_LEGEND_NOT_IN_WAL_FILE,26,"internal error if a legend for a marker does not yet exist in the same WAL file","Will be raised internally, then fixed internally, and never come out to the user."

ERROR_FILE_EXISTS,27,"file exists","Will be raised when a file already exists."

ERROR_LOCKED,28,"locked","Will be raised when a resource or an operation is locked."

ERROR_DEADLOCK,29,"deadlock detected","Will be raised when a deadlock is detected when accessing collections."



################################################################################

## HTTP standard errors

################################################################################



ERROR_HTTP_BAD_PARAMETER,400,"bad parameter","Will be raised when the HTTP request does not fulfill the requirements."

ERROR_HTTP_UNAUTHORIZED,401,"unauthorized","Will be raised when authorization is required but the user is not authorized."

ERROR_HTTP_FORBIDDEN,403,"forbidden","Will be raised when the operation is forbidden."

ERROR_HTTP_NOT_FOUND,404,"not found","Will be raised when an URI is unknown."

ERROR_HTTP_METHOD_NOT_ALLOWED,405,"method not supported","Will be raised when an unsupported HTTP method is used for an operation."

ERROR_HTTP_PRECONDITION_FAILED,412,"precondition failed","Will be raised when a precondition for an HTTP request is not met."

ERROR_HTTP_SERVER_ERROR,500,"internal server error","Will be raised when an internal server is encountered."



################################################################################

## HTTP errors

################################################################################



ERROR_HTTP_CORRUPTED_JSON,600,"invalid JSON object","Will be raised when a string representation of a JSON object is corrupt."

ERROR_HTTP_SUPERFLUOUS_SUFFICES,601,"superfluous URL suffices","Will be raised when the URL contains superfluous suffices."



################################################################################

## ArangoDB internal storage errors

## For errors that occur because of a programming error.

################################################################################



ERROR_ARANGO_ILLEGAL_STATE,1000,"illegal state","Internal error that will be raised when the datafile is not in the required state."

ERROR_ARANGO_SHAPER_FAILED,1001,"could not shape document","Internal error that will be raised when the shaper encountered a problem."

ERROR_ARANGO_DATAFILE_SEALED,1002,"datafile sealed","Internal error that will be raised when trying to write to a datafile."

ERROR_ARANGO_UNKNOWN_COLLECTION_TYPE,1003,"unknown type","Internal error that will be raised when an unknown collection type is encountered."

ERROR_ARANGO_READ_ONLY,1004,"read only","Internal error that will be raised when trying to write to a read-only datafile or collection."

ERROR_ARANGO_DUPLICATE_IDENTIFIER,1005,"duplicate identifier","Internal error that will be raised when a identifier duplicate is detected."

ERROR_ARANGO_DATAFILE_UNREADABLE,1006,"datafile unreadable","Internal error that will be raised when a datafile is unreadable."

ERROR_ARANGO_DATAFILE_EMPTY,1007,"datafile empty","Internal error that will be raised when a datafile is empty."

ERROR_ARANGO_RECOVERY,1008,"logfile recovery error","Will be raised when an error occurred during WAL log file recovery."



################################################################################

## ArangoDB storage errors

## For errors that occur because of an outside event.

################################################################################



ERROR_ARANGO_CORRUPTED_DATAFILE,1100,"corrupted datafile","Will be raised when a corruption is detected in a datafile."

ERROR_ARANGO_ILLEGAL_PARAMETER_FILE,1101,"illegal or unreadable parameter file","Will be raised if a parameter file is corrupted or cannot be read."

ERROR_ARANGO_CORRUPTED_COLLECTION,1102,"corrupted collection","Will be raised when a collection contains one or more corrupted data files."

ERROR_ARANGO_MMAP_FAILED,1103,"mmap failed","Will be raised when the system call mmap failed."

ERROR_ARANGO_FILESYSTEM_FULL,1104,"filesystem full","Will be raised when the filesystem is full."

ERROR_ARANGO_NO_JOURNAL,1105,"no journal","Will be raised when a journal cannot be created."

ERROR_ARANGO_DATAFILE_ALREADY_EXISTS,1106,"cannot create/rename datafile because it already exists","Will be raised when the datafile cannot be created or renamed because a file of the same name already exists."

ERROR_ARANGO_DATADIR_LOCKED,1107,"database directory is locked","Will be raised when the database directory is locked by a different process."

ERROR_ARANGO_COLLECTION_DIRECTORY_ALREADY_EXISTS,1108,"cannot create/rename collection because directory already exists","Will be raised when the collection cannot be created because a directory of the same name already exists."

ERROR_ARANGO_MSYNC_FAILED,1109,"msync failed","Will be raised when the system call msync failed."

ERROR_ARANGO_DATADIR_UNLOCKABLE,1110,"cannot lock database directory","Will be raised when the server cannot lock the database directory on startup."

ERROR_ARANGO_SYNC_TIMEOUT,1111,"sync timeout","Will be raised when the server waited too long for a datafile to be synced to disk."



################################################################################

## ArangoDB storage errors

## For errors that occur when fulfilling a user request.

################################################################################



ERROR_ARANGO_CONFLICT,1200,"conflict","Will be raised when updating or deleting a document and a conflict has been detected."

ERROR_ARANGO_DATADIR_INVALID,1201,"invalid database directory","Will be raised when a non-existing database directory was specified when starting the database."

ERROR_ARANGO_DOCUMENT_NOT_FOUND,1202,"document not found","Will be raised when a document with a given identifier or handle is unknown."

ERROR_ARANGO_COLLECTION_NOT_FOUND,1203,"collection not found","Will be raised when a collection with a given identifier or name is unknown."

ERROR_ARANGO_COLLECTION_PARAMETER_MISSING,1204,"parameter 'collection' not found","Will be raised when the collection parameter is missing."

ERROR_ARANGO_DOCUMENT_HANDLE_BAD,1205,"illegal document handle","Will be raised when a document handle is corrupt."

ERROR_ARANGO_MAXIMAL_SIZE_TOO_SMALL,1206,"maximal size of journal too small","Will be raised when the maximal size of the journal is too small."

ERROR_ARANGO_DUPLICATE_NAME,1207,"duplicate name","Will be raised when a name duplicate is detected."

ERROR_ARANGO_ILLEGAL_NAME,1208,"illegal name","Will be raised when an illegal name is detected."

ERROR_ARANGO_NO_INDEX,1209,"no suitable index known","Will be raised when no suitable index for the query is known."

ERROR_ARANGO_UNIQUE_CONSTRAINT_VIOLATED,1210,"unique constraint violated","Will be raised when there is a unique constraint violation."

ERROR_ARANGO_INDEX_NOT_FOUND,1212,"index not found","Will be raised when an index with a given identifier is unknown."

ERROR_ARANGO_CROSS_COLLECTION_REQUEST,1213,"cross collection request not allowed","Will be raised when a cross-collection is requested."

ERROR_ARANGO_INDEX_HANDLE_BAD,1214,"illegal index handle","Will be raised when a index handle is corrupt."

ERROR_ARANGO_CAP_CONSTRAINT_ALREADY_DEFINED,1215,"cap constraint already defined","Will be raised when a cap constraint was already defined."

ERROR_ARANGO_DOCUMENT_TOO_LARGE,1216,"document too large","Will be raised when the document cannot fit into any datafile because of it is too large."

ERROR_ARANGO_COLLECTION_NOT_UNLOADED,1217,"collection must be unloaded","Will be raised when a collection should be unloaded, but has a different status."

ERROR_ARANGO_COLLECTION_TYPE_INVALID,1218,"collection type invalid","Will be raised when an invalid collection type is used in a request."

ERROR_ARANGO_VALIDATION_FAILED,1219,"validator failed","Will be raised when the validation of an attribute of a structure failed."

ERROR_ARANGO_PARSER_FAILED,1220,"parsing definition failed","Will be raised when parsing an attribute name definition failed."

ERROR_ARANGO_DOCUMENT_KEY_BAD,1221,"illegal document key","Will be raised when a document key is corrupt."

ERROR_ARANGO_DOCUMENT_KEY_UNEXPECTED,1222,"unexpected document key","Will be raised when a user-defined document key is supplied for collections with auto key generation."

ERROR_ARANGO_DATADIR_NOT_WRITABLE,1224,"server database directory not writable","Will be raised when the server's database directory is not writable for the current user."

ERROR_ARANGO_OUT_OF_KEYS,1225,"out of keys","Will be raised when a key generator runs out of keys."

ERROR_ARANGO_DOCUMENT_KEY_MISSING,1226,"missing document key","Will be raised when a document key is missing."

ERROR_ARANGO_DOCUMENT_TYPE_INVALID,1227,"invalid document type","Will be raised when there is an attempt to create a document with an invalid type."

ERROR_ARANGO_DATABASE_NOT_FOUND,1228,"database not found","Will be raised when a non-existing database is accessed."

ERROR_ARANGO_DATABASE_NAME_INVALID,1229,"database name invalid","Will be raised when an invalid database name is used."

ERROR_ARANGO_USE_SYSTEM_DATABASE,1230,"operation only allowed in system database","Will be raised when an operation is requested in a database other than the system database."

ERROR_ARANGO_ENDPOINT_NOT_FOUND,1231,"endpoint not found","Will be raised when there is an attempt to delete a non-existing endpoint."

ERROR_ARANGO_INVALID_KEY_GENERATOR,1232,"invalid key generator","Will be raised when an invalid key generator description is used."

ERROR_ARANGO_INVALID_EDGE_ATTRIBUTE,1233,"edge attribute missing","will be raised when the _from or _to values of an edge are undefined or contain an invalid value."

ERROR_ARANGO_INDEX_DOCUMENT_ATTRIBUTE_MISSING,1234,"index insertion warning - attribute missing in document","Will be raised when an attempt to insert a document into an index is caused by in the document not having one or more attributes which the index is built on."

ERROR_ARANGO_INDEX_CREATION_FAILED,1235,"index creation failed","Will be raised when an attempt to create an index has failed."

ERROR_ARANGO_WRITE_THROTTLE_TIMEOUT,1236,"write-throttling timeout","Will be raised when the server is write-throttled and a write operation has waited too long for the server to process queued operations."

ERROR_ARANGO_COLLECTION_TYPE_MISMATCH,1237,"collection type mismatch","Will be raised when a collection has a different type from what has been expected."

ERROR_ARANGO_COLLECTION_NOT_LOADED,1238,"collection not loaded","Will be raised when a collection is accessed that is not yet loaded."



################################################################################

## ArangoDB storage errors

## For errors that occur but are anticipated.

################################################################################



ERROR_ARANGO_DATAFILE_FULL,1300,"datafile full","Will be raised when the datafile reaches its limit."

ERROR_ARANGO_EMPTY_DATADIR,1301,"server database directory is empty","Will be raised when encountering an empty server database directory."



################################################################################

## ArangoDB replication errors

################################################################################



ERROR_REPLICATION_NO_RESPONSE,1400,"no response","Will be raised when the replication applier does not receive any or an incomplete response from the master."

ERROR_REPLICATION_INVALID_RESPONSE,1401,"invalid response","Will be raised when the replication applier receives an invalid response from the master."

ERROR_REPLICATION_MASTER_ERROR,1402,"master error","Will be raised when the replication applier receives a server error from the master."

ERROR_REPLICATION_MASTER_INCOMPATIBLE,1403,"master incompatible","Will be raised when the replication applier connects to a master that has an incompatible version."

ERROR_REPLICATION_MASTER_CHANGE,1404,"master change","Will be raised when the replication applier connects to a different master than before."

ERROR_REPLICATION_LOOP,1405,"loop detected","Will be raised when the replication applier is asked to connect to itself for replication."

ERROR_REPLICATION_UNEXPECTED_MARKER,1406,"unexpected marker","Will be raised when an unexpected marker is found in the replication log stream."

ERROR_REPLICATION_INVALID_APPLIER_STATE,1407,"invalid applier state","Will be raised when an invalid replication applier state file is found."

ERROR_REPLICATION_UNEXPECTED_TRANSACTION,1408,"invalid transaction","Will be raised when an unexpected transaction id is found."

ERROR_REPLICATION_INVALID_APPLIER_CONFIGURATION,1410,"invalid replication applier configuration","Will be raised when the configuration for the replication applier is invalid."

ERROR_REPLICATION_RUNNING,1411,"cannot perform operation while applier is running","Will be raised when there is an attempt to perform an operation while the replication applier is running."

ERROR_REPLICATION_APPLIER_STOPPED,1412,"replication stopped","Special error code used to indicate the replication applier was stopped by a user."

ERROR_REPLICATION_NO_START_TICK,1413,"no start tick","Will be raised when the replication applier is started without a known start tick value."

ERROR_REPLICATION_START_TICK_NOT_PRESENT,1414,"start tick not present","Will be raised when the replication applier fetches data using a start tick, but that start tick is not present on the logger server anymore."



################################################################################

## ArangoDB cluster errors

################################################################################



ERROR_CLUSTER_NO_AGENCY,1450,"could not connect to agency","Will be raised when none of the agency servers can be connected to."

ERROR_CLUSTER_NO_COORDINATOR_HEADER,1451,"missing coordinator header","Will be raised when a DB server in a cluster receives a HTTP request without a coordinator header."

ERROR_CLUSTER_COULD_NOT_LOCK_PLAN,1452,"could not lock plan in agency","Will be raised when a coordinator in a cluster cannot lock the Plan hierarchy in the agency."

ERROR_CLUSTER_COLLECTION_ID_EXISTS,1453,"collection ID already exists","Will be raised when a coordinator in a cluster tries to create a collection and the collection ID already exists."

ERROR_CLUSTER_COULD_NOT_CREATE_COLLECTION_IN_PLAN,1454,"could not create collection in plan","Will be raised when a coordinator in a cluster cannot create an entry for a new collection in the Plan hierarchy in the agency."

ERROR_CLUSTER_COULD_NOT_READ_CURRENT_VERSION,1455,"could not read version in current in agency","Will be raised when a coordinator in a cluster cannot read the Version entry in the Current hierarchy in the agency."

ERROR_CLUSTER_COULD_NOT_CREATE_COLLECTION,1456,"could not create collection","Will be raised when a coordinator in a cluster notices that some DBServers report problems when creating shards for a new collection."

ERROR_CLUSTER_TIMEOUT,1457,"timeout in cluster operation","Will be raised when a coordinator in a cluster runs into a timeout for some cluster wide operation."

ERROR_CLUSTER_COULD_NOT_REMOVE_COLLECTION_IN_PLAN,1458,"could not remove collection from plan","Will be raised when a coordinator in a cluster cannot remove an entry for a collection in the Plan hierarchy in the agency."

ERROR_CLUSTER_COULD_NOT_REMOVE_COLLECTION_IN_CURRENT,1459,"could not remove collection from current","Will be raised when a coordinator in a cluster cannot remove an entry for a collection in the Current hierarchy in the agency."

ERROR_CLUSTER_COULD_NOT_CREATE_DATABASE_IN_PLAN,1460,"could not create database in plan","Will be raised when a coordinator in a cluster cannot create an entry for a new database in the Plan hierarchy in the agency."

ERROR_CLUSTER_COULD_NOT_CREATE_DATABASE,1461,"could not create database","Will be raised when a coordinator in a cluster notices that some DBServers report problems when creating databases for a new cluster wide database."

ERROR_CLUSTER_COULD_NOT_REMOVE_DATABASE_IN_PLAN,1462,"could not remove database from plan","Will be raised when a coordinator in a cluster cannot remove an entry for a database in the Plan hierarchy in the agency."

ERROR_CLUSTER_COULD_NOT_REMOVE_DATABASE_IN_CURRENT,1463,"could not remove database from current","Will be raised when a coordinator in a cluster cannot remove an entry for a database in the Current hierarchy in the agency."

ERROR_CLUSTER_SHARD_GONE,1464,"no responsible shard found","Will be raised when a coordinator in a cluster cannot determine the shard that is responsible for a given document."

ERROR_CLUSTER_CONNECTION_LOST,1465,"cluster internal HTTP connection broken","Will be raised when a coordinator in a cluster loses an HTTP connection to a DBserver in the cluster whilst transferring data."

ERROR_CLUSTER_MUST_NOT_SPECIFY_KEY,1466,"must not specify _key for this collection","Will be raised when a coordinator in a cluster finds that the _key attribute was specified in a sharded collection the uses not only _key as sharding attribute."

ERROR_CLUSTER_GOT_CONTRADICTING_ANSWERS,1467,"got contradicting answers from different shards","Will be raised if a coordinator in a cluster gets conflicting results from different shards, which should never happen."

ERROR_CLUSTER_NOT_ALL_SHARDING_ATTRIBUTES_GIVEN,1468,"not all sharding attributes given","Will be raised if a coordinator tries to find out which shard is responsible for a partial document, but cannot do this because not all sharding attributes are specified."

ERROR_CLUSTER_MUST_NOT_CHANGE_SHARDING_ATTRIBUTES,1469,"must not change the value of a shard key attribute","Will be raised if there is an attempt to update the value of a shard attribute."

ERROR_CLUSTER_UNSUPPORTED,1470,"unsupported operation or parameter","Will be raised when there is an attempt to carry out an operation that is not supported in the context of a sharded collection."

ERROR_CLUSTER_ONLY_ON_COORDINATOR,1471,"this operation is only valid on a coordinator in a cluster","Will be raised if there is an attempt to run a coordinator-only operation on a different type of node."

ERROR_CLUSTER_READING_PLAN_AGENCY,1472,"error reading Plan in agency","Will be raised if a coordinator or DBserver cannot read the Plan in the agency."

ERROR_CLUSTER_COULD_NOT_TRUNCATE_COLLECTION,1473,"could not truncate collection","Will be raised if a coordinator cannot truncate all shards of a cluster collection."

ERROR_CLUSTER_AQL_COMMUNICATION,1474,"error in cluster internal communication for AQL","Will be raised if the internal communication of the cluster for AQL produces an error."

ERROR_ARANGO_DOCUMENT_NOT_FOUND_OR_SHARDING_ATTRIBUTES_CHANGED,1475,"document not found or sharding attributes changed","Will be raised when a document with a given identifier or handle is unknown, or if the sharding attributes have been changed in a REPLACE operation in the cluster."

ERROR_CLUSTER_COULD_NOT_DETERMINE_ID,1476,"could not determine my ID from my local info","Will be raised if a cluster server at startup could not determine its own ID from the local info provided."



################################################################################

## ArangoDB query errors

################################################################################



ERROR_QUERY_KILLED,1500,"query killed","Will be raised when a running query is killed by an explicit admin command."

ERROR_QUERY_PARSE,1501,"%s","Will be raised when query is parsed and is found to be syntactically invalid."

ERROR_QUERY_EMPTY,1502,"query is empty","Will be raised when an empty query is specified."

ERROR_QUERY_SCRIPT,1503,"runtime error '%s'","Will be raised when a runtime error is caused by the query."

ERROR_QUERY_NUMBER_OUT_OF_RANGE,1504,"number out of range","Will be raised when a number is outside the expected range."

ERROR_QUERY_VARIABLE_NAME_INVALID,1510,"variable name '%s' has an invalid format","Will be raised when an invalid variable name is used."

ERROR_QUERY_VARIABLE_REDECLARED,1511,"variable '%s' is assigned multiple times","Will be raised when a variable gets re-assigned in a query."

ERROR_QUERY_VARIABLE_NAME_UNKNOWN,1512,"unknown variable '%s'","Will be raised when an unknown variable is used or the variable is undefined the context it is used."

ERROR_QUERY_COLLECTION_LOCK_FAILED,1521,"unable to read-lock collection %s","Will be raised when a read lock on the collection cannot be acquired."

ERROR_QUERY_TOO_MANY_COLLECTIONS,1522,"too many collections","Will be raised when the number of collections in a query is beyond the allowed value."

ERROR_QUERY_DOCUMENT_ATTRIBUTE_REDECLARED,1530,"document attribute '%s' is assigned multiple times","Will be raised when a document attribute is re-assigned."

ERROR_QUERY_FUNCTION_NAME_UNKNOWN,1540,"usage of unknown function '%s()'","Will be raised when an undefined function is called."

ERROR_QUERY_FUNCTION_ARGUMENT_NUMBER_MISMATCH,1541,"invalid number of arguments for function '%s()', expected number of arguments: minimum: %d, maximum: %d","Will be raised when the number of arguments used in a function call does not match the expected number of arguments for the function."

ERROR_QUERY_FUNCTION_ARGUMENT_TYPE_MISMATCH,1542,"invalid argument type in call to function '%s()'","Will be raised when the type of an argument used in a function call does not match the expected argument type."

ERROR_QUERY_INVALID_REGEX,1543,"invalid regex value","Will be raised when an invalid regex argument value is used in a call to a function that expects a regex."

ERROR_QUERY_BIND_PARAMETERS_INVALID,1550,"invalid structure of bind parameters","Will be raised when the structure of bind parameters passed has an unexpected format."

ERROR_QUERY_BIND_PARAMETER_MISSING,1551,"no value specified for declared bind parameter '%s'","Will be raised when a bind parameter was declared in the query but the query is being executed with no value for that parameter."

ERROR_QUERY_BIND_PARAMETER_UNDECLARED,1552,"bind parameter '%s' was not declared in the query","Will be raised when a value gets specified for an undeclared bind parameter."

ERROR_QUERY_BIND_PARAMETER_TYPE,1553,"bind parameter '%s' has an invalid value or type","Will be raised when a bind parameter has an invalid value or type."

ERROR_QUERY_INVALID_LOGICAL_VALUE,1560,"invalid logical value","Will be raised when a non-boolean value is used in a logical operation."

ERROR_QUERY_INVALID_ARITHMETIC_VALUE,1561,"invalid arithmetic value","Will be raised when a non-numeric value is used in an arithmetic operation."

ERROR_QUERY_DIVISION_BY_ZERO,1562,"division by zero","Will be raised when there is an attempt to divide by zero."

ERROR_QUERY_ARRAY_EXPECTED,1563,"array expected","Will be raised when a non-array operand is used for an operation that expects an array argument operand."

ERROR_QUERY_FAIL_CALLED,1569,"FAIL(%s) called","Will be raised when the function FAIL() is called from inside a query."

ERROR_QUERY_GEO_INDEX_MISSING,1570,"no suitable geo index found for geo restriction on '%s'","Will be raised when a geo restriction was specified but no suitable geo index is found to resolve it."

ERROR_QUERY_FULLTEXT_INDEX_MISSING,1571,"no suitable fulltext index found for fulltext query on '%s'","Will be raised when a fulltext query is performed on a collection without a suitable fulltext index."

ERROR_QUERY_INVALID_DATE_VALUE,1572,"invalid date value","Will be raised when a value cannot be converted to a date."

ERROR_QUERY_MULTI_MODIFY,1573,"multi-modify query", "Will be raised when an AQL query contains more than one data-modifying operation."

ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION,1574,"invalid aggregate expression", "Will be raised when an AQL query contains an invalid aggregate expression."

ERROR_QUERY_COMPILE_TIME_OPTIONS,1575,"query options must be readable at query compile time", "Will be raised when an AQL data-modification query contains options that cannot be figured out at query compile time."

ERROR_QUERY_EXCEPTION_OPTIONS,1576,"query options expected", "Will be raised when an AQL data-modification query contains an invalid options specification."

ERROR_QUERY_COLLECTION_USED_IN_EXPRESSION,1577,"collection '%s' used as expression operand", "Will be raised when a collection is used as an operand in an AQL expression."

ERROR_QUERY_DISALLOWED_DYNAMIC_CALL,1578,"disallowed dynamic call to '%s'", "Will be raised when a dynamic function call is made to a function that cannot be called dynamically."

ERROR_QUERY_ACCESS_AFTER_MODIFICATION,1579,"access after data-modification", "Will be raised when collection data are accessed after a data-modification operation."



################################################################################

## AQL user functions

################################################################################



ERROR_QUERY_FUNCTION_INVALID_NAME,1580,"invalid user function name","Will be raised when a user function with an invalid name is registered."

ERROR_QUERY_FUNCTION_INVALID_CODE,1581,"invalid user function code","Will be raised when a user function is registered with invalid code."

ERROR_QUERY_FUNCTION_NOT_FOUND,1582,"user function '%s()' not found","Will be raised when a user function is accessed but not found."

ERROR_QUERY_FUNCTION_RUNTIME_ERROR,1583,"user function runtime error: %s","Will be raised when a user function throws a runtime exception."



################################################################################

## AQL query registry

################################################################################



ERROR_QUERY_BAD_JSON_PLAN,1590,"bad execution plan JSON", "Will be raised when an HTTP API for a query got an invalid JSON object."

ERROR_QUERY_NOT_FOUND,1591,"query ID not found", "Will be raised when an Id of a query is not found by the HTTP API."

ERROR_QUERY_IN_USE,1592,"query with this ID is in use", "Will be raised when an Id of a query is found by the HTTP API but the query is in use."



################################################################################

## ArangoDB cursor errors

################################################################################



ERROR_CURSOR_NOT_FOUND,1600,"cursor not found","Will be raised when a cursor is requested via its id but a cursor with that id cannot be found."

ERROR_CURSOR_BUSY,1601,"cursor is busy","Will be raised when a cursor is requested via its id but a concurrent request is still using the cursor."



################################################################################

## ArangoDB transaction errors

################################################################################



ERROR_TRANSACTION_INTERNAL,1650,"internal transaction error","Will be raised when a wrong usage of transactions is detected. this is an internal error and indicates a bug in ArangoDB."

ERROR_TRANSACTION_NESTED,1651,"nested transactions detected","Will be raised when transactions are nested."

ERROR_TRANSACTION_UNREGISTERED_COLLECTION,1652,"unregistered collection used in transaction","Will be raised when a collection is used in the middle of a transaction but was not registered at transaction start."

ERROR_TRANSACTION_DISALLOWED_OPERATION,1653,"disallowed operation inside transaction","Will be raised when a disallowed operation is carried out in a transaction."

ERROR_TRANSACTION_ABORTED,1654,"transaction aborted","Will be raised when a transaction was aborted."



################################################################################

## User management

################################################################################



ERROR_USER_INVALID_NAME,1700,"invalid user name","Will be raised when an invalid user name is used."

ERROR_USER_INVALID_PASSWORD,1701,"invalid password","Will be raised when an invalid password is used."

ERROR_USER_DUPLICATE,1702,"duplicate user","Will be raised when a user name already exists."

ERROR_USER_NOT_FOUND,1703,"user not found","Will be raised when a user name is updated that does not exist."

ERROR_USER_CHANGE_PASSWORD,1704,"user must change his password","Will be raised when the user must change his password."



################################################################################

## Application management

################################################################################



ERROR_APPLICATION_INVALID_NAME,1750,"invalid application name","Will be raised when an invalid application name is specified."

ERROR_APPLICATION_INVALID_MOUNT,1751,"invalid mount","Will be raised when an invalid mount is specified."

ERROR_APPLICATION_DOWNLOAD_FAILED,1752,"application download failed","Will be raised when an application download from the central repository failed."

ERROR_APPLICATION_UPLOAD_FAILED,1753,"application upload failed","Will be raised when an application upload from the client to the ArangoDB server failed."



################################################################################

## Key value access

################################################################################



ERROR_KEYVALUE_INVALID_KEY,1800,"invalid key declaration","Will be raised when an invalid key specification is passed to the server"

ERROR_KEYVALUE_KEY_EXISTS,1801,"key already exists","Will be raised when a key is to be created that already exists"

ERROR_KEYVALUE_KEY_NOT_FOUND,1802,"key not found","Will be raised when the specified key is not found"

ERROR_KEYVALUE_KEY_NOT_UNIQUE,1803,"key is not unique","Will be raised when the specified key is not unique"

ERROR_KEYVALUE_KEY_NOT_CHANGED,1804,"key value not changed","Will be raised when updating the value for a key does not work"

ERROR_KEYVALUE_KEY_NOT_REMOVED,1805,"key value not removed","Will be raised when deleting a key/value pair does not work"

ERROR_KEYVALUE_NO_VALUE,1806,"missing value","Will be raised when the value is missing"



################################################################################

## Task errors

################################################################################



ERROR_TASK_INVALID_ID,1850,"invalid task id","Will be raised when a task is created with an invalid id."

ERROR_TASK_DUPLICATE_ID,1851,"duplicate task id","Will be raised when a task id is created with a duplicate id."

ERROR_TASK_NOT_FOUND,1852,"task not found","Will be raised when a task with the specified id could not be found."



################################################################################

## Graph / traversal errors

################################################################################



ERROR_GRAPH_INVALID_GRAPH,1901,"invalid graph","Will be raised when an invalid name is passed to the server."

ERROR_GRAPH_COULD_NOT_CREATE_GRAPH,1902,"could not create graph","Will be raised when an invalid name, vertices or edges is passed to the server."

ERROR_GRAPH_INVALID_VERTEX,1903,"invalid vertex","Will be raised when an invalid vertex id is passed to the server."

ERROR_GRAPH_COULD_NOT_CREATE_VERTEX,1904,"could not create vertex","Will be raised when the vertex could not be created."

ERROR_GRAPH_COULD_NOT_CHANGE_VERTEX,1905,"could not change vertex","Will be raised when the vertex could not be changed."

ERROR_GRAPH_INVALID_EDGE,1906,"invalid edge","Will be raised when an invalid edge id is passed to the server."

ERROR_GRAPH_COULD_NOT_CREATE_EDGE,1907,"could not create edge","Will be raised when the edge could not be created."

ERROR_GRAPH_COULD_NOT_CHANGE_EDGE,1908,"could not change edge","Will be raised when the edge could not be changed."

ERROR_GRAPH_TOO_MANY_ITERATIONS,1909,"too many iterations - try increasing the value of 'maxIterations'","Will be raised when too many iterations are done in a graph traversal."

ERROR_GRAPH_INVALID_FILTER_RESULT,1910,"invalid filter result","Will be raised when an invalid filter result is returned in a graph traversal."

ERROR_GRAPH_COLLECTION_MULTI_USE,1920,"multi use of edge collection in edge def","an edge collection may only be used once in one edge definition of a graph.",

ERROR_GRAPH_COLLECTION_USE_IN_MULTI_GRAPHS,1921,"edge collection already used in edge def"," is already used by another graph in a different edge definition.",

ERROR_GRAPH_CREATE_MISSING_NAME,1922,"missing graph name","a graph name is required to create a graph.",

ERROR_GRAPH_CREATE_MALFORMED_EDGE_DEFINITION,1923,"malformed edge definition","the edge definition is malformed. It has to be an array of objects.",

ERROR_GRAPH_NOT_FOUND,1924,"graph not found","a graph with this name could not be found.",

ERROR_GRAPH_DUPLICATE,1925,"graph already exists","a graph with this name already exists.",

ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST,1926,"vertex collection does not exist or is not part of the graph","the specified vertex collection does not exist or is not part of the graph.",

ERROR_GRAPH_WRONG_COLLECTION_TYPE_VERTEX,1927,"not a vertex collection","the collection is not a vertex collection.",

ERROR_GRAPH_NOT_IN_ORPHAN_COLLECTION,1928,"not in orphan collection","Vertex collection not in orphan collection of the graph.",

ERROR_GRAPH_COLLECTION_USED_IN_EDGE_DEF,1929,"collection already used in edge def","The collection is already used in an edge definition of the graph.",

ERROR_GRAPH_EDGE_COLLECTION_NOT_USED,1930,"edge collection not used in graph","The edge collection is not used in any edge definition of the graph.",

ERROR_GRAPH_NOT_AN_ARANGO_COLLECTION,1931," is not an ArangoCollection","The collection is not an ArangoCollection.",

ERROR_GRAPH_NO_GRAPH_COLLECTION,1932,"collection _graphs does not exist","collection _graphs does not exist.",

ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT_STRING,1933,"Invalid example type. Has to be String, Array or Object","Invalid example type. Has to be String, Array or Object.",

ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT,1934,"Invalid example type. Has to be Array or Object","Invalid example type. Has to be Array or Object.",

ERROR_GRAPH_INVALID_NUMBER_OF_ARGUMENTS,1935,"Invalid number of arguments. Expected: ","Invalid number of arguments. Expected: ",

ERROR_GRAPH_INVALID_PARAMETER,1936,"Invalid parameter type.","Invalid parameter type.",

ERROR_GRAPH_INVALID_ID,1937,"Invalid id","Invalid id",

ERROR_GRAPH_COLLECTION_USED_IN_ORPHANS,1938,"collection used in orphans","The collection is already used in the orphans of the graph.",

ERROR_GRAPH_EDGE_COL_DOES_NOT_EXIST,1939,"edge collection does not exist or is not part of the graph","the specified edge collection does not exist or is not part of the graph.",

ERROR_GRAPH_EMPTY,1940,"empty graph","The requested graph has no edge collections."



################################################################################

## Session errors

################################################################################



ERROR_SESSION_UNKNOWN,1950,"unknown session","Will be raised when an invalid/unknown session id is passed to the server."

ERROR_SESSION_EXPIRED,1951,"session expired","Will be raised when a session is expired."



################################################################################

## Simple Client

################################################################################



SIMPLE_CLIENT_UNKNOWN_ERROR,2000,"unknown client error","This error should not happen."

SIMPLE_CLIENT_COULD_NOT_CONNECT,2001,"could not connect to server","Will be raised when the client could not connect to the server."

SIMPLE_CLIENT_COULD_NOT_WRITE,2002,"could not write to server","Will be raised when the client could not write data."

SIMPLE_CLIENT_COULD_NOT_READ,2003,"could not read from server","Will be raised when the client could not read data."



################################################################################

## Foxx Manager

################################################################################



ERROR_MALFORMED_MANIFEST_FILE,3000,"malformed manifest file","The manifest file is malformed. It is not in a valid JSON format."

ERROR_INVALID_APPLICATION_MANIFEST,3001,"manifest file is invalid","The manifest file of this application is invalid."

ERROR_MANIFEST_FILE_ATTRIBUTE_MISSING,3002,"missing manifest attribute","The manifest file is incomplete. A required attribute is missing."

ERROR_CANNOT_EXTRACT_APPLICATION_ROOT,3003,"unable to extract app root path","The root path of the application could not be found."

ERROR_INVALID_FOXX_OPTIONS,3004,"invalid foxx options","The options used to configure the foxx are invalid."

ERROR_FAILED_TO_EXECUTE_SCRIPT,3005,"failed to execute script","The script provided contains errors."

ERROR_SYNTAX_ERROR_IN_SCRIPT,3006,"syntax error in script"," contains a syntax error: "

ERROR_INVALID_MOUNTPOINT,3007,"mountpoint is invalid","mountpoint is invalid"

ERROR_NO_FOXX_FOUND,3008,"No foxx found at this location","No foxx found at this location"

ERROR_APP_NOT_FOUND,3009,"App not found","No app found at this mountpoint"

ERROR_APP_NEEDS_CONFIGURATION,3010,"App not configured","The app has to be configured before it can be used"



################################################################################

## JavaScript module loader

################################################################################



ERROR_MODULE_NOT_FOUND,3100,"cannot locate module","The module path could not be resolved."

ERROR_MODULE_SYNTAX_ERROR,3101,"syntax error in module","The module could not be parsed because of a syntax error."

ERROR_MODULE_BAD_WRAPPER,3102,"failed to wrap module","The module wrapper could not be generated. This may indicate a problem with some of the names of the module's context variables."

ERROR_MODULE_FAILURE,3103,"failed to invoke module","Failed to invoke the module in its context."

ERROR_MODULE_UNKNOWN_FILE_TYPE,3110,"unknown file type","The module path resolves to a file of an unknown type."

ERROR_MODULE_PATH_MUST_BE_ABSOLUTE,3111,"path must be absolute","The module path must be absolute."

ERROR_MODULE_CAN_NOT_ESCAPE,3112,"cannot use '..' to escape top-level-directory","The relative module path can not escape the module's top-level directory."

ERROR_MODULE_DRIVE_LETTER,3113,"drive local path is not supported","The module path contains a Windows drive letter, which is not supported."

ERROR_MODULE_BAD_MODULE_ORIGIN,3120,"corrupted module origin","The module origin is invalid."

ERROR_MODULE_BAD_PACKAGE_ORIGIN,3121,"corrupted package origin","The package origin is invalid."

ERROR_MODULE_DOCUMENT_IS_EMPTY,3125,"no content","The module resolves to a document which is empty or malformed."

ERROR_MODULE_MAIN_NOT_READABLE,3130,"cannot read main file","The module's main file is not readable."

ERROR_MODULE_MAIN_NOT_JS,3131,"main file is not of type 'js'","The module's main file is not a JavaScript file."



################################################################################

## results, which are not errors

################################################################################



RESULT_ELEMENT_EXISTS,10000,"element not inserted into structure, because it already exists","Will be returned if the element was not insert because it already exists."

RESULT_ELEMENT_NOT_FOUND,10001,"element not found in structure","Will be returned if the element was not found in the structure."



################################################################################

## foxx app update via github

################################################################################



ERROR_APP_ALREADY_EXISTS,20000,"newest version of app already installed","newest version of app already installed"



################################################################################

## dispatcher errors

################################################################################



ERROR_QUEUE_ALREADY_EXISTS,21000,"named queue already exists", "Will be returned if a queue with this name already exists."

ERROR_DISPATCHER_IS_STOPPING,21001,"dispatcher stopped","Will be returned if a shutdown is in progress."

ERROR_QUEUE_UNKNOWN,21002,"named queue does not exist","Will be returned if a queue with this name does not exist."

ERROR_QUEUE_FULL,21003,"named queue is full","Will be returned if a queue with this name is full."

@endDocuBlock 

<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Scheduler/ApplicationScheduler.h -->
@startDocuBlock schedulerThreads

`--scheduler.threads arg`
<br />
An integer argument which sets the number of threads to use in the IO
scheduler. The default is 1.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Scheduler/ApplicationScheduler.h -->
@startDocuBlock schedulerBackend

`--scheduler.backend arg`
<br />
The I/O method used by the event handler. The default (if this option is
not specified) is to try all recommended backends. This is platform
specific. See libev for further details and the meaning of select, poll
and epoll.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock walPropertiesGet

`internal.wal.properties()`
<br />
Retrieves the configuration of the write-ahead log. The result is a JSON
array with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *syncInterval*: the interval for automatic synchronization of not-yet
  synchronized write-ahead log data (in milliseconds)
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection 
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
@EXAMPLES
<br />

<div id="WalPropertiesGet_container">
<div id="WalPropertiesGet_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).wal.properties();
{ 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"historicLogfiles"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"reserveLogfiles"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"syncInterval"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"throttleWait"</span> : <span class="hljs-number">15000</span>, 
  <span class="hljs-string">"throttleWhenPending"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="WalPropertiesGet_short" onclick="$('#WalPropertiesGet_short').hide(); $('#WalPropertiesGet_long').show();">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).wal.properties();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock walPropertiesSet

`internal.wal.properties(properties)`
<br />
Configures the behavior of the write-ahead log. *properties* must be a JSON
JSON object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a 
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection 
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
Specifying any of the above attributes is optional. Not specified attributes
will be ignored and the configuration for them will not be modified.
<br />
@EXAMPLES
<br />

<div id="WalPropertiesSet_container">
<div id="WalPropertiesSet_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).wal.properties({ allowOverSizeEntries: <span class="hljs-literal">true</span>, logfileSize: <span class="hljs-number">32</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> });
{ 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"historicLogfiles"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"reserveLogfiles"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"syncInterval"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"throttleWait"</span> : <span class="hljs-number">15000</span>, 
  <span class="hljs-string">"throttleWhenPending"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="WalPropertiesSet_short" onclick="$('#WalPropertiesSet_short').hide(); $('#WalPropertiesSet_long').show();">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).wal.properties({ allowOverSizeEntries: <span class="hljs-literal">true</span>, logfileSize: <span class="hljs-number">32</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock walFlush

`internal.wal.flush(waitForSync, waitForCollector)`
<br />
Flushes the write-ahead log. By flushing the currently active write-ahead
logfile, the data in it can be transferred to collection journals and
datafiles. This is useful to ensure that all data for a collection is
present in the collection journals and datafiles, for example, when dumping
the data of a collection.
<br />
The *waitForSync* option determines whether or not the operation should 
block until the not-yet synchronized data in the write-ahead log was 
synchronized to disk.
<br />
The *waitForCollector* operation can be used to specify that the operation
should block until the data in the flushed log has been collected by the 
write-ahead log garbage collector. Note that setting this option to *true* 
might block for a long time if there are long-running transactions and 
the write-ahead log garbage collector cannot finish garbage collection.
<br />
@EXAMPLES
<br />

<div id="WalFlush_container">
<div id="WalFlush_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).wal.flush();
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock collectionDatabaseCollectionName

`db.collection-name`
<br />
Returns the collection with the given *collection-name*. If no such
collection exists, create a collection named *collection-name* with the
default properties.
<br />
@EXAMPLES
<br />

<div id="collectionDatabaseCollectionName_container">
<div id="collectionDatabaseCollectionName_long">
<pre>
arangosh&gt; db.example;
[ArangoCollection <span class="hljs-number">1076643969</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseVersion

`db._version()`
<br />
Returns the server version string. Note that this is not the version of the
database.
<br />
@EXAMPLES
<br />

<div id="dbVersion_container">
<div id="dbVersion_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).db._version();
<span class="hljs-number">2.8</span><span class="hljs-number">.11</span>
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databasePath

`db._path()`
<br />
Returns the filesystem path of the current database as a string.
<br />
@EXAMPLES
<br />

<div id="dbPath_container">
<div id="dbPath_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).db._path();
<span class="hljs-regexp">/tmp/</span>vocdir<span class="hljs-number">.22090</span>/databases/database-<span class="hljs-number">84097</span>
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseId

`db._id()`
<br />
Returns the id of the current database as a string.
<br />
@EXAMPLES
<br />

<div id="dbId_container">
<div id="dbId_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).db._id();
<span class="hljs-number">84097</span>
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseName

`db._name()`
<br />
Returns the name of the current database as a string.
<br />
@EXAMPLES
<br />

<div id="dbName_container">
<div id="dbName_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).db._name();
_system
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseIsSystem

`db._isSystem()`
<br />
Returns whether the currently used database is the *_system* database.
The system database has some special privileges and properties, for example,
database management operations such as create or drop can only be executed
from within this database. Additionally, the *_system* database itself
cannot be dropped.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseUseDatabase

`db._useDatabase(name)`
<br />
Changes the current database to the database specified by *name*. Note
that the database specified by *name* must already exist.
<br />
Changing the database might be disallowed in some contexts, for example
server-side actions (including Foxx).
<br />
When performing this command from arangosh, the current credentials (username
and password) will be re-used. These credentials might not be valid to
connect to the database specified by *name*. Additionally, the database
only be accessed from certain endpoints only. In this case, switching the
database might not work, and the connection / session should be closed and
restarted with different username and password credentials and/or
endpoint data.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseListDatabase

`db._listDatabases()`
<br />
Returns the list of all databases. This method can only be used from within
the *_system* database.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseCreateDatabase

`db._createDatabase(name, options, users)`
<br />
Creates a new database with the name specified by *name*.
There are restrictions for database names
(see [DatabaseNames](../NamingConventions/DatabaseNames.md)).
<br />
Note that even if the database is created successfully, there will be no
change into the current database to the new database. Changing the current
database must explicitly be requested by using the
*db._useDatabase* method.
<br />
The *options* attribute currently has no meaning and is reserved for
future use.
<br />
The optional *users* attribute can be used to create initial users for
the new database. If specified, it must be a list of user objects. Each user
object can contain the following attributes:
<br />
* *username*: the user name as a string. This attribute is mandatory.
* *passwd*: the user password as a string. If not specified, then it defaults
  to the empty string.
* *active*: a boolean flag indicating whether the user account should be
  active or not. The default value is *true*.
* *extra*: an optional JSON object with extra user information. The data
  contained in *extra* will be stored for the user but not be interpreted
  further by ArangoDB.
<br />
If no initial users are specified, a default user *root* will be created
with an empty string password. This ensures that the new database will be
accessible via HTTP after it is created.
<br />
You can create users in a database if no initial user is specified. Switch 
into the new database (username and password must be identical to the current
session) and add or modify users with the following commands.
<br />
```js
  require("org/arangodb/users").save(username, password, true);
  require("org/arangodb/users").update(username, password, true);
  require("org/arangodb/users").remove(username);
```
Alternatively, you can specify user data directly. For example:
<br />
```js
  db._createDatabase("newDB", [], [{ username: "newUser", passwd: "123456", active: true}])
```
<br />
Those methods can only be used from within the *_system* database.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocbase.cpp -->
@startDocuBlock databaseDropDatabase

`db._dropDatabase(name)`
<br />
Drops the database specified by *name*. The database specified by
*name* must exist.
<br />
**Note**: Dropping databases is only possible from within the *_system*
database. The *_system* database itself cannot be dropped.
<br />
Databases are dropped asynchronously, and will be physically removed if
all clients have disconnected and references have been garbage-collected.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocindex.cpp -->
@startDocuBlock collectionEnsureIndex

`collection.ensureIndex(index-description)`
<br />
Ensures that an index according to the *index-description* exists. A
new index will be created if none exists with the given description.
<br />
The *index-description* must contain at least a *type* attribute.
Other attributes may be necessary, depending on the index type.
<br />
**type** can be one of the following values:
- *hash*: hash index
- *skiplist*: skiplist index
- *fulltext*: fulltext index
- *geo1*: geo index, with one attribute
- *geo2*: geo index, with two attributes
- *cap*: cap constraint
<br />
**sparse** can be *true* or *false*.
<br />
For *hash*, and *skiplist* the sparsity can be controlled, *fulltext* and *geo*
are [sparse](index-handling-which-index.html) by definition.
<br />
**unique** can be *true* or *false* and is supported by *hash* or *skiplist*
<br />
Calling this method returns an index object. Whether or not the index
object existed before the call is indicated in the return attribute
*isNewlyCreated*.
<br />
@EXAMPLES
<br />

<div id="collectionEnsureIndex_container">
<div id="collectionEnsureIndex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span> ], sparse: <span class="hljs-literal">true</span> });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/1087719553"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ], unique: <span class="hljs-literal">true</span> });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/1087981697"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="collectionEnsureIndex_short" onclick="$('#collectionEnsureIndex_short').hide(); $('#collectionEnsureIndex_long').show();">
<pre>
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span> ], sparse: <span class="hljs-literal">true</span> });
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ], unique: <span class="hljs-literal">true</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocindex.cpp -->
@startDocuBlock col_dropIndex

`collection.dropIndex(index)`
<br />
Drops the index. If the index does not exist, then *false* is
returned. If the index existed and was dropped, then *true* is
returned. Note that you cannot drop some special indexes (e.g. the primary
index of a collection or the edge index of an edge collection).
<br />
`collection.dropIndex(index-handle)`
<br />
Same as above. Instead of an index an index handle can be given.
<br />

<div id="col_dropIndex_container">
<div id="col_dropIndex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.ensureSkiplist(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>);
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/1075857537"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">var</span> indexInfo = db.example.getIndexes();
arangosh&gt; indexInfo;
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/0"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"_key"</span> 
    ], 
    <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/1075857537"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"a"</span>, 
      <span class="hljs-string">"b"</span> 
    ], 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  } 
]
arangosh&gt; db.example.dropIndex(indexInfo[<span class="hljs-number">0</span>])
<span class="hljs-literal">false</span>
arangosh&gt; db.example.dropIndex(indexInfo[<span class="hljs-number">1</span>].id)
<span class="hljs-literal">true</span>
arangosh&gt; indexInfo = db.example.getIndexes();
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/0"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"_key"</span> 
    ], 
    <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  } 
]
</pre>
</div>
<div id="col_dropIndex_short" onclick="$('#col_dropIndex_short').hide(); $('#col_dropIndex_long').show();">
<pre>
arangosh&gt; db.example.ensureSkiplist(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> indexInfo = db.example.getIndexes();
arangosh&gt; indexInfo;
arangosh&gt; db.example.dropIndex(indexInfo[<span class="hljs-number">0</span>])
arangosh&gt; db.example.dropIndex(indexInfo[<span class="hljs-number">1</span>].id)
arangosh&gt; indexInfo = db.example.getIndexes();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocindex.cpp -->
@startDocuBlock collectionGetIndexes

`getIndexes()`
<br />
Returns an array of all indexes defined for the collection.
<br />
Note that `_key` implicitly has an index assigned to it.
<br />

<div id="collectionGetIndexes_container">
<div id="collectionGetIndexes_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.test.getIndexes();
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/0"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"_key"</span> 
    ], 
    <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/1091389569"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"skiplistAttribute"</span> 
    ], 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/1091651713"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"skiplistUniqueAttribute"</span> 
    ], 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/1092044929"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"hashListAttribute"</span>, 
      <span class="hljs-string">"hashListSecondAttribute.subAttribute"</span> 
    ], 
    <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  } 
]
</pre>
</div>
<div id="collectionGetIndexes_short" onclick="$('#collectionGetIndexes_short').hide(); $('#collectionGetIndexes_long').show();">
<pre>
arangosh&gt; db.test.getIndexes();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocindex.cpp -->
@startDocuBlock collectionDatabaseCreate

`db._create(collection-name)`
<br />
Creates a new document collection named *collection-name*.
If the collection name already exists or if the name format is invalid, an
error is thrown. For more information on valid collection names please refer
to the [naming conventions](../NamingConventions/README.md).
<br />
`db._create(collection-name, properties)`
<br />
*properties* must be an object with the following attributes:
<br />
* *waitForSync* (optional, default *false*): If *true* creating
  a document will only return after the data was synced to disk.
<br />
* *journalSize* (optional, default is a
  configuration parameter: The maximal
  size of a journal or datafile.  Note that this also limits the maximal
  size of a single object. Must be at least 1MB.
<br />
* *isSystem* (optional, default is *false*): If *true*, create a
  system collection. In this case *collection-name* should start with
  an underscore. End users should normally create non-system collections
  only. API implementors may be required to create system collections in
  very special occasions, but normally a regular collection will do.
<br />
* *isVolatile* (optional, default is *false*): If *true* then the
  collection data is kept in-memory only and not made persistent. Unloading
  the collection will cause the collection data to be discarded. Stopping
  or re-starting the server will also cause full loss of data in the
  collection. Setting this option will make the resulting collection be
  slightly faster than regular collections because ArangoDB does not
  enforce any synchronization to disk and does not calculate any CRC
  checksums for datafiles (as there are no datafiles).
<br />
* *keyOptions* (optional): additional options for key generation. If
  specified, then *keyOptions* should be a JSON array containing the
  following attributes (**note**: some of them are optional):
  * *type*: specifies the type of the key generator. The currently
    available generators are *traditional* and *autoincrement*.
  * *allowUserKeys*: if set to *true*, then it is allowed to supply
    own key values in the *_key* attribute of a document. If set to
  *false*, then the key generator will solely be responsible for
    generating keys and supplying own key values in the *_key* attribute
    of documents is considered an error.
  * *increment*: increment value for *autoincrement* key generator.
    Not used for other key generator types.
  * *offset*: initial offset value for *autoincrement* key generator.
    Not used for other key generator types.
<br />
* *numberOfShards* (optional, default is *1*): in a cluster, this value
  determines the number of shards to create for the collection. In a single
  server setup, this option is meaningless.
<br />
* *shardKeys* (optional, default is *[ "_key" ]*): in a cluster, this
  attribute determines which document attributes are used to determine the
  target shard for documents. Documents are sent to shards based on the
  values they have in their shard key attributes. The values of all shard
  key attributes in a document are hashed, and the hash value is used to
  determine the target shard. Note that values of shard key attributes cannot
  be changed once set.
  This option is meaningless in a single server setup.
<br />
  When choosing the shard keys, one must be aware of the following
  rules and limitations: In a sharded collection with more than
  one shard it is not possible to set up a unique constraint on
  an attribute that is not the one and only shard key given in
  *shardKeys*. This is because enforcing a unique constraint
  would otherwise make a global index necessary or need extensive
  communication for every single write operation. Furthermore, if
  *_key* is not the one and only shard key, then it is not possible
  to set the *_key* attribute when inserting a document, provided
  the collection has more than one shard. Again, this is because
  the database has to enforce the unique constraint on the *_key*
  attribute and this can only be done efficiently if this is the
  only shard key by delegating to the individual shards.
<br />
`db._create(collection-name, properties, type)`
<br />
Specifies the optional *type* of the collection, it can either be *document* 
or *edge*. On default it is document. Instead of giving a type you can also use 
*db._createEdgeCollection* or *db._createDocumentCollection*.
<br />
@EXAMPLES
<br />
With defaults:
<br />

<div id="collectionDatabaseCreate_container">
<div id="collectionDatabaseCreate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; c = db._create(<span class="hljs-string">"users"</span>);
[ArangoCollection <span class="hljs-number">1076840577</span>, <span class="hljs-string">"users"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; c.properties();
{ 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span> 
}
</pre>
</div>
<div id="collectionDatabaseCreate_short" onclick="$('#collectionDatabaseCreate_short').hide(); $('#collectionDatabaseCreate_long').show();">
<pre>
arangosh&gt; c = db._create(<span class="hljs-string">"users"</span>);
arangosh&gt; c.properties();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
With properties:
<br />

<div id="collectionDatabaseCreateProperties_container">
<div id="collectionDatabaseCreateProperties_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; c = db._create(<span class="hljs-string">"users"</span>, { waitForSync : <span class="hljs-literal">true</span>, journalSize : <span class="hljs-number">1024</span> * <span class="hljs-number">1204</span> });
[ArangoCollection <span class="hljs-number">1077954689</span>, <span class="hljs-string">"users"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; c.properties();
{ 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1232896</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span> 
}
</pre>
</div>
<div id="collectionDatabaseCreateProperties_short" onclick="$('#collectionDatabaseCreateProperties_short').hide(); $('#collectionDatabaseCreateProperties_long').show();">
<pre>
arangosh&gt; c = db._create(<span class="hljs-string">"users"</span>, { waitForSync : <span class="hljs-literal">true</span>, journalSize : <span class="hljs-number">1024</span> * <span class="hljs-number">1204</span> });
arangosh&gt; c.properties();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
With a key generator:
<br />

<div id="collectionDatabaseCreateKey_container">
<div id="collectionDatabaseCreateKey_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"users"</span>, { keyOptions: { type: <span class="hljs-string">"autoincrement"</span>, offset: <span class="hljs-number">10</span>, increment: <span class="hljs-number">5</span> } });
[ArangoCollection <span class="hljs-number">1077037185</span>, <span class="hljs-string">"users"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 1"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/10"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1077364865"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"10"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 2"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/15"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1077561473"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"15"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 3"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1077758081"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20"</span> 
}
</pre>
</div>
<div id="collectionDatabaseCreateKey_short" onclick="$('#collectionDatabaseCreateKey_short').hide(); $('#collectionDatabaseCreateKey_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"users"</span>, { keyOptions: { type: <span class="hljs-string">"autoincrement"</span>, offset: <span class="hljs-number">10</span>, increment: <span class="hljs-number">5</span> } });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 1"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 2"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 3"</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
With a special key option:
<br />

<div id="collectionDatabaseCreateSpecialKey_container">
<div id="collectionDatabaseCreateSpecialKey_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"users"</span>, { keyOptions: { allowUserKeys: <span class="hljs-literal">false</span> } });
[ArangoCollection <span class="hljs-number">1078151297</span>, <span class="hljs-string">"users"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 1"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1078478977"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1078478977"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1078478977"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 2"</span>, _key: <span class="hljs-string">"myuser"</span> });
[ArangoError <span class="hljs-number">1222</span>: collection does not allow using user-defined keys]
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 3"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1078806657"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1078806657"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1078806657"</span> 
}
</pre>
</div>
<div id="collectionDatabaseCreateSpecialKey_short" onclick="$('#collectionDatabaseCreateSpecialKey_short').hide(); $('#collectionDatabaseCreateSpecialKey_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"users"</span>, { keyOptions: { allowUserKeys: <span class="hljs-literal">false</span> } });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 1"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 2"</span>, _key: <span class="hljs-string">"myuser"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"user 3"</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocindex.cpp -->
@startDocuBlock collectionCreateDocumentCollection

`db._createDocumentCollection(collection-name)`
<br />
Creates a new document collection named *collection-name*. If the
document name already exists and error is thrown. 
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-vocindex.cpp -->
@startDocuBlock collectionCreateEdgeCollection

`db._createEdgeCollection(collection-name)`
<br />
Creates a new edge collection named *collection-name*. If the
collection name already exists an error is thrown. The default value
for *waitForSync* is *false*.
<br />
`db._createEdgeCollection(collection-name, properties)`
<br />
*properties* must be an object with the following attributes:
<br />
* *waitForSync* (optional, default *false*): If *true* creating
  a document will only return after the data was synced to disk.
* *journalSize* (optional, default is 
  "configuration parameter"):  The maximal size of
  a journal or datafile.  Note that this also limits the maximal
  size of a single object and must be at least 1MB.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/ApplicationV8.h -->
@startDocuBlock jsStartupGcInterval

`--javascript.gc-interval interval`
<br />
Specifies the interval (approximately in number of requests) that the
garbage collection for JavaScript objects will be run in each thread.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/ApplicationV8.h -->
@startDocuBlock jsGcFrequency

`--javascript.gc-frequency frequency`
<br />
Specifies the frequency (in seconds) for the automatic garbage collection of
JavaScript objects. This setting is useful to have the garbage collection
still work in periods with no or little numbers of requests.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/ApplicationV8.h -->
@startDocuBlock jsV8Options

`--javascript.v8-options options`
<br />
Optional arguments to pass to the V8 Javascript engine. The V8 engine will
run with default settings unless explicit options are specified using this
option. The options passed will be forwarded to the V8 engine which will
parse them on its own. Passing invalid options may result in an error being
printed on stderr and the option being ignored.
<br />
Options need to be passed in one string, with V8 option names being prefixed
with double dashes. Multiple options need to be separated by whitespace.
To get a list of all available V8 options, you can use
the value *"--help"* as follows:
```
--javascript.v8-options "--help"
```
<br />
Another example of specific V8 options being set at startup:
<br />
```
--javascript.v8-options "--harmony --log"
```
<br />
Names and features or usable options depend on the version of V8 being used,
and might change in the future if a different version of V8 is being used
in ArangoDB. Not all options offered by V8 might be sensible to use in the
context of ArangoDB. Use the specific options only if you are sure that
they are not harmful for the regular database operation.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsCollectionName

`collection.document(document)`
<br />
The *document* method finds a document given its identifier or a document
object containing the *_id* or *_key* attribute. The method returns
the document if it can be found.
<br />
An error is thrown if *_rev* is specified but the document found has a
different revision already. An error is also thrown if no document exists
with the given *_id* or *_key* value.
<br />
Please note that if the method is executed on the arangod server (e.g. from
inside a Foxx application), an immutable document object will be returned
for performance reasons. It is not possible to change attributes of this
immutable object. To update or patch the returned document, it needs to be
cloned/copied into a regular JavaScript object first. This is not necessary
if the *document* method is called from out of arangosh or from any other
client.
<br />
`collection.document(document-handle)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
*Examples*
<br />
Returns the document for a document-handle:
<br />

<div id="documentsCollectionName_container">
<div id="documentsCollectionName_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.document(<span class="hljs-string">"example/2873916"</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/2873916"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1113278593"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2873916"</span> 
}
</pre>
</div>
<div id="documentsCollectionName_short" onclick="$('#documentsCollectionName_short').hide(); $('#documentsCollectionName_long').show();">
<pre>
arangosh&gt; db.example.document(<span class="hljs-string">"example/2873916"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
An error is raised if the document is unknown:
<br />

<div id="documentsCollectionNameUnknown_container">
<div id="documentsCollectionNameUnknown_long">
<pre>
arangosh&gt; db.example.document(<span class="hljs-string">"example/4472917"</span>);
[ArangoError <span class="hljs-number">1202</span>: <span class="hljs-built_in">document</span> not found]
</pre>
</div>
</div>

<br />
An error is raised if the handle is invalid:
<br />

<div id="documentsCollectionNameHandle_container">
<div id="documentsCollectionNameHandle_long">
<pre>
arangosh&gt; db.example.document(<span class="hljs-string">""</span>);
[ArangoError <span class="hljs-number">1205</span>: illegal <span class="hljs-built_in">document</span> handle]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionDrop

`collection.drop()`
<br />
Drops a *collection* and all its indexes.
<br />
@EXAMPLES
<br />

<div id="collectionDrop_container">
<div id="collectionDrop_long">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">1081362561</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; col.drop();
arangosh&gt; col;
[ArangoCollection <span class="hljs-number">1081362561</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status deleted)]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsCollectionExists

`collection.exists(document)`
<br />
The *exists* method determines whether a document exists given its
identifier.  Instead of returning the found document or an error, this
method will return either *true* or *false*. It can thus be used
for easy existence checks.
<br />
The *document* method finds a document given its identifier.  It returns
the document. Note that the returned document contains two
pseudo-attributes, namely *_id* and *_rev*. *_id* contains the
document-handle and *_rev* the revision of the document.
<br />
No error will be thrown if the sought document or collection does not
exist.
Still this method will throw an error if used improperly, e.g. when called
with a non-document handle, a non-document, or when a cross-collection
request is performed.
<br />
`collection.exists(document-handle)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionFigures

`collection.figures()`
<br />
Returns an object containing statistics about the collection.
**Note** : Retrieving the figures will always load the collection into 
memory.
<br />
* *alive.count*: The number of currently active documents in all datafiles and
  journals of the collection. Documents that are contained in the
  write-ahead log only are not reported in this figure.
* *alive.size*: The total size in bytes used by all active documents of the
  collection. Documents that are contained in the write-ahead log only are
  not reported in this figure.
- *dead.count*: The number of dead documents. This includes document
  versions that have been deleted or replaced by a newer version. Documents
  deleted or replaced that are contained in the write-ahead log only are not
  reported in this figure.
* *dead.size*: The total size in bytes used by all dead documents.
* *dead.deletion*: The total number of deletion markers. Deletion markers
  only contained in the write-ahead log are not reporting in this figure.
* *datafiles.count*: The number of datafiles.
* *datafiles.fileSize*: The total filesize of datafiles (in bytes).
* *journals.count*: The number of journal files.
* *journals.fileSize*: The total filesize of the journal files
  (in bytes).
* *compactors.count*: The number of compactor files.
* *compactors.fileSize*: The total filesize of the compactor files
  (in bytes).
* *shapefiles.count*: The number of shape files. This value is
  deprecated and kept for compatibility reasons only. The value will always
  be 0 since ArangoDB 2.0 and higher.
* *shapefiles.fileSize*: The total filesize of the shape files. This
  value is deprecated and kept for compatibility reasons only. The value will
  always be 0 in ArangoDB 2.0 and higher.
* *shapes.count*: The total number of shapes used in the collection.
  This includes shapes that are not in use anymore. Shapes that are contained
  in the write-ahead log only are not reported in this figure.
* *shapes.size*: The total size of all shapes (in bytes). This includes
  shapes that are not in use anymore. Shapes that are contained in the
  write-ahead log only are not reported in this figure.
* *attributes.count*: The total number of attributes used in the
  collection. Note: the value includes data of attributes that are not in use
  anymore. Attributes that are contained in the write-ahead log only are
  not reported in this figure.
* *attributes.size*: The total size of the attribute data (in bytes).
  Note: the value includes data of attributes that are not in use anymore.
  Attributes that are contained in the write-ahead log only are not 
  reported in this figure.
* *indexes.count*: The total number of indexes defined for the
  collection, including the pre-defined indexes (e.g. primary index).
* *indexes.size*: The total memory allocated for indexes in bytes.
* *maxTick*: The tick of the last marker that was stored in a journal
  of the collection. This might be 0 if the collection does not yet have
  a journal.
* *uncollectedLogfileEntries*: The number of markers in the write-ahead
  log for this collection that have not been transferred to journals or
  datafiles.
* *documentReferences*: The number of references to documents in datafiles
  that JavaScript code currently holds. This information can be used for
  debugging compaction and unload issues.
* *waitingFor*: An optional string value that contains information about
  which object type is at the head of the collection's cleanup queue. This 
  information can be used for debugging compaction and unload issues.
* *compactionStatus.time*: The point in time the compaction for the collection
  was last executed. This information can be used for debugging compaction
  issues.
* *compactionStatus.message*: The action that was performed when the compaction
  was last run for the collection. This information can be used for debugging
  compaction issues.
<br />
**Note**: collection data that are stored in the write-ahead log only are
not reported in the results. When the write-ahead log is collected, documents
might be added to journals and datafiles of the collection, which may modify 
the figures of the collection. Also note that `waitingFor` and `compactionStatus` 
may be empty when called on a coordinator in a cluster.
<br />
Additionally, the filesizes of collection and index parameter JSON files are
not reported. These files should normally have a size of a few bytes
each. Please also note that the *fileSize* values are reported in bytes
and reflect the logical file sizes. Some filesystems may use optimisations
(e.g. sparse files) so that the actual physical file size is somewhat
different. Directories and sub-directories may also require space in the
file system, but this space is not reported in the *fileSize* results.
<br />
That means that the figures reported do not reflect the actual disk
usage of the collection with 100% accuracy. The actual disk usage of
a collection is normally slightly higher than the sum of the reported 
*fileSize* values. Still the sum of the *fileSize* values can still be 
used as a lower bound approximation of the disk usage.
<br />
@EXAMPLES
<br />

<div id="collectionFigures_container">
<div id="collectionFigures_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.demo.figures()
{ 
  <span class="hljs-string">"alive"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"size"</span> : <span class="hljs-number">256</span> 
  }, 
  <span class="hljs-string">"dead"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"size"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"deletion"</span> : <span class="hljs-number">0</span> 
  }, 
  <span class="hljs-string">"datafiles"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">0</span> 
  }, 
  <span class="hljs-string">"journals"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">1048576</span> 
  }, 
  <span class="hljs-string">"compactors"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">0</span> 
  }, 
  <span class="hljs-string">"shapefiles"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">0</span> 
  }, 
  <span class="hljs-string">"shapes"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"size"</span> : <span class="hljs-number">272</span> 
  }, 
  <span class="hljs-string">"attributes"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">6</span>, 
    <span class="hljs-string">"size"</span> : <span class="hljs-number">304</span> 
  }, 
  <span class="hljs-string">"indexes"</span> : { 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"size"</span> : <span class="hljs-number">16120</span> 
  }, 
  <span class="hljs-string">"lastTick"</span> : <span class="hljs-string">"17254529"</span>, 
  <span class="hljs-string">"uncollectedLogfileEntries"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"documentReferences"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"waitingFor"</span> : <span class="hljs-string">"-"</span>, 
  <span class="hljs-string">"compactionStatus"</span> : { 
    <span class="hljs-string">"message"</span> : <span class="hljs-string">"skipped compaction because collection has no datafiles"</span>, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:49Z"</span> 
  } 
}
</pre>
</div>
<div id="collectionFigures_short" onclick="$('#collectionFigures_short').hide(); $('#collectionFigures_long').show();">
<pre>
arangosh&gt; db.demo.figures()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionLoad

`collection.load()`
<br />
Loads a collection into memory.
<br />
@EXAMPLES
<br />

<div id="collectionLoad_container">
<div id="collectionLoad_long">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">1092307073</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; col.load();
arangosh&gt; col;
[ArangoCollection <span class="hljs-number">1092307073</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionProperties

`collection.properties()`
<br />
Returns an object containing all collection properties.
<br />
* *waitForSync*: If *true* creating a document will only return
  after the data was synced to disk.
<br />
* *journalSize* : The size of the journal in bytes.
<br />
* *isVolatile*: If *true* then the collection data will be
  kept in memory only and ArangoDB will not write or sync the data
  to disk.
<br />
* *keyOptions* (optional) additional options for key generation. This is
  a JSON array containing the following attributes (note: some of the
  attributes are optional):
  * *type*: the type of the key generator used for the collection.
  * *allowUserKeys*: if set to *true*, then it is allowed to supply
    own key values in the *_key* attribute of a document. If set to
  *false*, then the key generator will solely be responsible for
    generating keys and supplying own key values in the *_key* attribute
    of documents is considered an error.
  * *increment*: increment value for *autoincrement* key generator.
    Not used for other key generator types.
  * *offset*: initial offset value for *autoincrement* key generator.
    Not used for other key generator types.
<br />
* *indexBuckets*: number of buckets into which indexes using a hash
  table are split. The default is 16 and this number has to be a
  power of 2 and less than or equal to 1024. 
<br />
  For very large collections one should increase this to avoid long pauses 
  when the hash table has to be initially built or resized, since buckets 
  are resized individually and can be initially built in parallel. For 
  example, 64 might be a sensible value for a collection with 100
  000 000 documents. Currently, only the edge index respects this
  value, but other index types might follow in future ArangoDB versions. 
  Changes (see below) are applied when the collection is loaded the next 
  time.
<br />
In a cluster setup, the result will also contain the following attributes:
<br />
* *numberOfShards*: the number of shards of the collection.
<br />
* *shardKeys*: contains the names of document attributes that are used to
  determine the target shard for documents.
<br />
`collection.properties(properties)`
<br />
Changes the collection properties. *properties* must be a object with
one or more of the following attribute(s):
<br />
* *waitForSync*: If *true* creating a document will only return
  after the data was synced to disk.
<br />
* *journalSize* : The size of the journal in bytes.
<br />
* *indexBuckets* : See above, changes are only applied when the
  collection is loaded the next time.
<br />
*Note*: it is not possible to change the journal size after the journal or
datafile has been created. Changing this parameter will only effect newly
created journals. Also note that you cannot lower the journal size to less
then size of the largest document already stored in the collection.
<br />
**Note**: some other collection properties, such as *type*, *isVolatile*,
or *keyOptions* cannot be changed once the collection is created.
<br />
@EXAMPLES
<br />
Read all properties
<br />

<div id="collectionProperties_container">
<div id="collectionProperties_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.properties();
{ 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span> 
}
</pre>
</div>
<div id="collectionProperties_short" onclick="$('#collectionProperties_short').hide(); $('#collectionProperties_long').show();">
<pre>
arangosh&gt; db.example.properties();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Change a property
<br />

<div id="collectionProperty_container">
<div id="collectionProperty_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.properties({ waitForSync : <span class="hljs-literal">true</span> });
{ 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span> 
}
</pre>
</div>
<div id="collectionProperty_short" onclick="$('#collectionProperty_short').hide(); $('#collectionProperty_long').show();">
<pre>
arangosh&gt; db.example.properties({ waitForSync : <span class="hljs-literal">true</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsCollectionRemove

`collection.remove(document)`
<br />
Removes a document. If there is revision mismatch, then an error is thrown.
<br />
`collection.remove(document, true)`
<br />
Removes a document. If there is revision mismatch, then mismatch is ignored
and document is deleted. The function returns *true* if the document
existed and was deleted. It returns *false*, if the document was already
deleted.
<br />
`collection.remove(document, true, waitForSync)`
<br />
The optional *waitForSync* parameter can be used to force synchronization
of the document deletion operation to disk even in case that the
*waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* parameter can be used to force synchronization of just
specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
`collection.remove(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
@EXAMPLES
<br />
Remove a document:
<br />

<div id="documentDocumentRemove_container">
<div id="documentDocumentRemove_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1106528385"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1106528385"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1106528385"</span> 
}
arangosh&gt; db.example.document(a1);
{ 
  <span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1106528385"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1106528385"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1106528385"</span> 
}
arangosh&gt; db.example.remove(a1);
<span class="hljs-literal">true</span>
arangosh&gt; db.example.document(a1);
[ArangoError <span class="hljs-number">1202</span>: <span class="hljs-built_in">document</span> not found]
</pre>
</div>
<div id="documentDocumentRemove_short" onclick="$('#documentDocumentRemove_short').hide(); $('#documentDocumentRemove_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; db.example.document(a1);
arangosh&gt; db.example.remove(a1);
arangosh&gt; db.example.document(a1);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Remove a document with a conflict:
<br />

<div id="documentDocumentRemoveConflict_container">
<div id="documentDocumentRemoveConflict_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1107380353"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1107380353"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1107380353"</span> 
}
arangosh&gt; a2 = db.example.replace(a1, { a : <span class="hljs-number">2</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1107380353"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1107576961"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1107380353"</span> 
}
arangosh&gt; db.example.remove(a1);
[ArangoError <span class="hljs-number">1200</span>: precondition failed]
arangosh&gt; db.example.remove(a1, <span class="hljs-literal">true</span>);
<span class="hljs-literal">true</span>
arangosh&gt; db.example.document(a1);
[ArangoError <span class="hljs-number">1202</span>: <span class="hljs-built_in">document</span> not found]
</pre>
</div>
<div id="documentDocumentRemoveConflict_short" onclick="$('#documentDocumentRemoveConflict_short').hide(); $('#documentDocumentRemoveConflict_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; a2 = db.example.replace(a1, { a : <span class="hljs-number">2</span> });
arangosh&gt; db.example.remove(a1);
arangosh&gt; db.example.remove(a1, <span class="hljs-literal">true</span>);
arangosh&gt; db.example.document(a1);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionRename

`collection.rename(new-name)`
<br />
Renames a collection using the *new-name*. The *new-name* must not
already be used for a different collection. *new-name* must also be a
valid collection name. For more information on valid collection names please refer
to the [naming conventions](../NamingConventions/README.md).
<br />
If renaming fails for any reason, an error is thrown.
If renaming the collection succeeds, then the collection is also renamed in 
all graph definitions inside the `_graphs` collection in the current database.
<br />
**Note**: this method is not available in a cluster.
<br />
@EXAMPLES
<br />

<div id="collectionRename_container">
<div id="collectionRename_long">
<pre>
arangosh&gt; c = db.example;
[ArangoCollection <span class="hljs-number">1099188353</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; c.rename(<span class="hljs-string">"better-example"</span>);
arangosh&gt; c;
[ArangoCollection <span class="hljs-number">1099188353</span>, <span class="hljs-string">"better-example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsCollectionReplace

`collection.replace(document, data)`
<br />
Replaces an existing *document*. The *document* must be a document in
the current collection. This document is then replaced with the
*data* given as second argument.
<br />
The method returns a document with the attributes *_id*, *_rev* and
*{_oldRev*.  The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
`collection.replace(document, data, true)` or
`collection.replace(document, data, overwrite: true)`
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
`collection.replace(document, data, true, waitForSync)` or
`collection.replace(document, data, overwrite: true, waitForSync: true or false)`
<br />
The optional *waitForSync* parameter can be used to force
synchronization of the document replacement operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
`collection.replace(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
@EXAMPLES
<br />
Create and update a document:
<br />

<div id="documentsCollectionReplace_container">
<div id="documentsCollectionReplace_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1117341825"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1117341825"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1117341825"</span> 
}
arangosh&gt; a2 = db.example.replace(a1, { a : <span class="hljs-number">2</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1117341825"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1117538433"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1117341825"</span> 
}
arangosh&gt; a3 = db.example.replace(a1, { a : <span class="hljs-number">3</span> });
[ArangoError <span class="hljs-number">1200</span>: precondition failed]
</pre>
</div>
<div id="documentsCollectionReplace_short" onclick="$('#documentsCollectionReplace_short').hide(); $('#documentsCollectionReplace_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; a2 = db.example.replace(a1, { a : <span class="hljs-number">2</span> });
arangosh&gt; a3 = db.example.replace(a1, { a : <span class="hljs-number">3</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Use a document handle:
<br />

<div id="documentsCollectionReplaceHandle_container">
<div id="documentsCollectionReplaceHandle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1118455937"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1118455937"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1118455937"</span> 
}
arangosh&gt; a2 = db.example.replace(<span class="hljs-string">"example/3903044"</span>, { a : <span class="hljs-number">2</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/3903044"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1118652545"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"3903044"</span> 
}
</pre>
</div>
<div id="documentsCollectionReplaceHandle_short" onclick="$('#documentsCollectionReplaceHandle_short').hide(); $('#documentsCollectionReplaceHandle_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; a2 = db.example.replace(<span class="hljs-string">"example/3903044"</span>, { a : <span class="hljs-number">2</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionRevision

`collection.revision()`
<br />
Returns the revision id of the collection
<br />
The revision id is updated when the document data is modified, either by
inserting, deleting, updating or replacing documents in it.
<br />
The revision id of a collection can be used by clients to check whether
data in a collection has changed or if it is still unmodified since a
previous fetch of the revision id.
<br />
The revision id returned is a string value. Clients should treat this value
as an opaque string, and only use it for equality/non-equality comparisons.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionRotate

`collection.rotate()`
<br />
Rotates the current journal of a collection. This operation makes the 
current journal of the collection a read-only datafile so it may become a
candidate for garbage collection. If there is currently no journal available
for the collection, the operation will fail with an error.
<br />
**Note**: this method is not available in a cluster.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsCollectionUpdate

`collection.update(document, data, overwrite, keepNull, waitForSync)` or
`collection.update(document, data,
overwrite: true or false, keepNull: true or false, waitForSync: true or false)`
<br />
Updates an existing *document*. The *document* must be a document in
the current collection. This document is then patched with the
*data* given as second argument. The optional *overwrite* parameter can
be used to control the behavior in case of version conflicts (see below).
The optional *keepNull* parameter can be used to modify the behavior when
handling *null* values. Normally, *null* values are stored in the
database. By setting the *keepNull* parameter to *false*, this behavior
can be changed so that all attributes in *data* with *null* values will
be removed from the target document.
<br />
The optional *waitForSync* parameter can be used to force
synchronization of the document update operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
The method returns a document with the attributes *_id*, *_rev* and
*_oldRev*.  The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
`collection.update(document, data, true)`
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
collection.update(document-handle, data)`
<br />
As before. Instead of document a document-handle can be passed as
first argument.
<br />
*Examples*
<br />
Create and update a document:
<br />

<div id="documentsCollectionUpdate_container">
<div id="documentsCollectionUpdate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1119176833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1119176833"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1119176833"</span> 
}
arangosh&gt; a2 = db.example.update(a1, {<span class="hljs-string">"b"</span> : <span class="hljs-number">2</span>, <span class="hljs-string">"c"</span> : <span class="hljs-number">3</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1119176833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1119570049"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1119176833"</span> 
}
arangosh&gt; a3 = db.example.update(a1, {<span class="hljs-string">"d"</span> : <span class="hljs-number">4</span>});
[ArangoError <span class="hljs-number">1200</span>: precondition failed]
arangosh&gt; a4 = db.example.update(a2, {<span class="hljs-string">"e"</span> : <span class="hljs-number">5</span>, <span class="hljs-string">"f"</span> : <span class="hljs-number">6</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1119176833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1120225409"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1119176833"</span> 
}
arangosh&gt; db.example.document(a4);
{ 
  <span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"b"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"c"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"e"</span> : <span class="hljs-number">5</span>, 
  <span class="hljs-string">"f"</span> : <span class="hljs-number">6</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1119176833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1120225409"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1119176833"</span> 
}
arangosh&gt; a5 = db.example.update(a4, {<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>, c : <span class="hljs-number">9</span>, e : <span class="hljs-number">42</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1119176833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1120487553"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1119176833"</span> 
}
arangosh&gt; db.example.document(a5);
{ 
  <span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"b"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"c"</span> : <span class="hljs-number">9</span>, 
  <span class="hljs-string">"e"</span> : <span class="hljs-number">42</span>, 
  <span class="hljs-string">"f"</span> : <span class="hljs-number">6</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1119176833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1120487553"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1119176833"</span> 
}
</pre>
</div>
<div id="documentsCollectionUpdate_short" onclick="$('#documentsCollectionUpdate_short').hide(); $('#documentsCollectionUpdate_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>});
arangosh&gt; a2 = db.example.update(a1, {<span class="hljs-string">"b"</span> : <span class="hljs-number">2</span>, <span class="hljs-string">"c"</span> : <span class="hljs-number">3</span>});
arangosh&gt; a3 = db.example.update(a1, {<span class="hljs-string">"d"</span> : <span class="hljs-number">4</span>});
arangosh&gt; a4 = db.example.update(a2, {<span class="hljs-string">"e"</span> : <span class="hljs-number">5</span>, <span class="hljs-string">"f"</span> : <span class="hljs-number">6</span> });
arangosh&gt; db.example.document(a4);
arangosh&gt; a5 = db.example.update(a4, {<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>, c : <span class="hljs-number">9</span>, e : <span class="hljs-number">42</span> });
arangosh&gt; db.example.document(a5);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Use a document handle:
<br />

<div id="documentsCollectionUpdateHandle_container">
<div id="documentsCollectionUpdateHandle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1121339521"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1121339521"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1121339521"</span> 
}
arangosh&gt; a2 = db.example.update(<span class="hljs-string">"example/18612115"</span>, { <span class="hljs-string">"x"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"y"</span> : <span class="hljs-number">2</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/18612115"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1121732737"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18612115"</span> 
}
</pre>
</div>
<div id="documentsCollectionUpdateHandle_short" onclick="$('#documentsCollectionUpdateHandle_short').hide(); $('#documentsCollectionUpdateHandle_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>});
arangosh&gt; a2 = db.example.update(<span class="hljs-string">"example/18612115"</span>, { <span class="hljs-string">"x"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"y"</span> : <span class="hljs-number">2</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Use the keepNull parameter to remove attributes with null values:
<br />

<div id="documentsCollectionUpdateHandleKeepNull_container">
<div id="documentsCollectionUpdateHandleKeepNull_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.insert({<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1124550785"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1124550785"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1124550785"</span> 
}
arangosh&gt; db.example.update(<span class="hljs-string">"example/19988371"</span>, { <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span>, <span class="hljs-string">"c"</span> : <span class="hljs-literal">null</span>, <span class="hljs-string">"d"</span> : <span class="hljs-number">3</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/19988371"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1125009537"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19988371"</span> 
}
arangosh&gt; db.example.document(<span class="hljs-string">"example/19988371"</span>);
{ 
  <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span>, 
  <span class="hljs-string">"c"</span> : <span class="hljs-literal">null</span>, 
  <span class="hljs-string">"d"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/19988371"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1125009537"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19988371"</span> 
}
arangosh&gt; db.example.update(<span class="hljs-string">"example/19988371"</span>, { <span class="hljs-string">"a"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/19988371"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1125271681"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19988371"</span> 
}
arangosh&gt; db.example.document(<span class="hljs-string">"example/19988371"</span>);
{ 
  <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span>, 
  <span class="hljs-string">"c"</span> : <span class="hljs-literal">null</span>, 
  <span class="hljs-string">"d"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/19988371"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1125271681"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19988371"</span> 
}
arangosh&gt; db.example.update(<span class="hljs-string">"example/19988371"</span>, { <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span>, <span class="hljs-string">"c"</span>: <span class="hljs-literal">null</span>, <span class="hljs-string">"d"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/19988371"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1125533825"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19988371"</span> 
}
arangosh&gt; db.example.document(<span class="hljs-string">"example/19988371"</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/19988371"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1125533825"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19988371"</span> 
}
</pre>
</div>
<div id="documentsCollectionUpdateHandleKeepNull_short" onclick="$('#documentsCollectionUpdateHandleKeepNull_short').hide(); $('#documentsCollectionUpdateHandleKeepNull_long').show();">
<pre>
arangosh&gt; db.example.insert({<span class="hljs-string">"a"</span> : <span class="hljs-number">1</span>});
arangosh&gt; db.example.update(<span class="hljs-string">"example/19988371"</span>, { <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span>, <span class="hljs-string">"c"</span> : <span class="hljs-literal">null</span>, <span class="hljs-string">"d"</span> : <span class="hljs-number">3</span> });
arangosh&gt; db.example.document(<span class="hljs-string">"example/19988371"</span>);
arangosh&gt; db.example.update(<span class="hljs-string">"example/19988371"</span>, { <span class="hljs-string">"a"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
arangosh&gt; db.example.document(<span class="hljs-string">"example/19988371"</span>);
arangosh&gt; db.example.update(<span class="hljs-string">"example/19988371"</span>, { <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span>, <span class="hljs-string">"c"</span>: <span class="hljs-literal">null</span>, <span class="hljs-string">"d"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
arangosh&gt; db.example.document(<span class="hljs-string">"example/19988371"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Patching array values:
<br />

<div id="documentsCollectionUpdateHandleArray_container">
<div id="documentsCollectionUpdateHandleArray_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.insert({<span class="hljs-string">"a"</span> : { <span class="hljs-string">"one"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"two"</span> : <span class="hljs-number">2</span>, <span class="hljs-string">"three"</span> : <span class="hljs-number">3</span> }, <span class="hljs-string">"b"</span> : { }});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1122846849"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1122846849"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1122846849"</span> 
}
arangosh&gt; db.example.update(<span class="hljs-string">"example/20774803"</span>, {<span class="hljs-string">"a"</span> : { <span class="hljs-string">"four"</span> : <span class="hljs-number">4</span> }, <span class="hljs-string">"b"</span> : { <span class="hljs-string">"b1"</span> : <span class="hljs-number">1</span> }});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/20774803"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1123371137"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20774803"</span> 
}
arangosh&gt; db.example.document(<span class="hljs-string">"example/20774803"</span>);
{ 
  <span class="hljs-string">"a"</span> : { 
    <span class="hljs-string">"four"</span> : <span class="hljs-number">4</span> 
  }, 
  <span class="hljs-string">"b"</span> : { 
    <span class="hljs-string">"b1"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/20774803"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1123371137"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20774803"</span> 
}
arangosh&gt; db.example.update(<span class="hljs-string">"example/20774803"</span>, { <span class="hljs-string">"a"</span> : { <span class="hljs-string">"one"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/20774803"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1123698817"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20774803"</span> 
}
arangosh&gt; db.example.document(<span class="hljs-string">"example/20774803"</span>);
{ 
  <span class="hljs-string">"a"</span> : { 
    <span class="hljs-string">"four"</span> : <span class="hljs-number">4</span> 
  }, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/20774803"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1123698817"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20774803"</span> 
}
</pre>
</div>
<div id="documentsCollectionUpdateHandleArray_short" onclick="$('#documentsCollectionUpdateHandleArray_short').hide(); $('#documentsCollectionUpdateHandleArray_long').show();">
<pre>
arangosh&gt; db.example.insert({<span class="hljs-string">"a"</span> : { <span class="hljs-string">"one"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"two"</span> : <span class="hljs-number">2</span>, <span class="hljs-string">"three"</span> : <span class="hljs-number">3</span> }, <span class="hljs-string">"b"</span> : { }});
arangosh&gt; db.example.update(<span class="hljs-string">"example/20774803"</span>, {<span class="hljs-string">"a"</span> : { <span class="hljs-string">"four"</span> : <span class="hljs-number">4</span> }, <span class="hljs-string">"b"</span> : { <span class="hljs-string">"b1"</span> : <span class="hljs-number">1</span> }});
arangosh&gt; db.example.document(<span class="hljs-string">"example/20774803"</span>);
arangosh&gt; db.example.update(<span class="hljs-string">"example/20774803"</span>, { <span class="hljs-string">"a"</span> : { <span class="hljs-string">"one"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-string">"b"</span> : <span class="hljs-literal">null</span> }, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
arangosh&gt; db.example.document(<span class="hljs-string">"example/20774803"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock InsertEdgeCol

`edge-collection.insert(from, to, document)`
<br />
Saves a new edge and returns the document-handle. *from* and *to*
must be documents or document references.
<br />
`edge-collection.insert(from, to, document, waitForSync)`
<br />
The optional *waitForSync* parameter can be used to force
synchronization of the document creation operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
@EXAMPLES
<br />

<div id="EDGCOL_01_SaveEdgeCol_container">
<div id="EDGCOL_01_SaveEdgeCol_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
[ArangoCollection <span class="hljs-number">519194753</span>, <span class="hljs-string">"vertex"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
[ArangoCollection <span class="hljs-number">519325825</span>, <span class="hljs-string">"relation"</span> (type edge, status loaded)]
arangosh&gt; v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/519653505"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"519653505"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"519653505"</span> 
}
arangosh&gt; v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/519850113"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"519850113"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"519850113"</span> 
}
arangosh&gt; e1 = db.relation.insert(v1, v2, { label : <span class="hljs-string">"knows"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/520177793"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"520177793"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"520177793"</span> 
}
arangosh&gt; db._document(e1);
{ 
  <span class="hljs-string">"label"</span> : <span class="hljs-string">"knows"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/520177793"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"520177793"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"520177793"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertex/519653505"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertex/519850113"</span> 
}
</pre>
</div>
<div id="EDGCOL_01_SaveEdgeCol_short" onclick="$('#EDGCOL_01_SaveEdgeCol_short').hide(); $('#EDGCOL_01_SaveEdgeCol_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
arangosh&gt; v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
arangosh&gt; v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
arangosh&gt; e1 = db.relation.insert(v1, v2, { label : <span class="hljs-string">"knows"</span> });
arangosh&gt; db._document(e1);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsCollectionInsert

`collection.insert(data)`
<br />
Creates a new document in the *collection* from the given *data*. The
*data* must be an object.
<br />
The method returns a document with the attributes *_id* and *_rev*.
The attribute *_id* contains the document handle of the newly created
document, the attribute *_rev* contains the document revision.
<br />
`collection.insert(data, waitForSync)`
<br />
Creates a new document in the *collection* from the given *data* as
above. The optional *waitForSync* parameter can be used to force
synchronization of the document creation operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
Note: since ArangoDB 2.2, *insert* is an alias for *save*.
<br />
@EXAMPLES
<br />

<div id="documentsCollectionInsert_container">
<div id="documentsCollectionInsert_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.insert({ Hello : <span class="hljs-string">"World"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1111115905"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1111115905"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1111115905"</span> 
}
arangosh&gt; db.example.insert({ Hello : <span class="hljs-string">"World"</span> }, <span class="hljs-literal">true</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1111312513"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1111312513"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1111312513"</span> 
}
</pre>
</div>
<div id="documentsCollectionInsert_short" onclick="$('#documentsCollectionInsert_short').hide(); $('#documentsCollectionInsert_long').show();">
<pre>
arangosh&gt; db.example.insert({ Hello : <span class="hljs-string">"World"</span> });
arangosh&gt; db.example.insert({ Hello : <span class="hljs-string">"World"</span> }, <span class="hljs-literal">true</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionType

`collection.type()`
<br />
Returns the type of a collection. Possible values are:
- 2: document collection
- 3: edge collection
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionUnload

`collection.unload()`
<br />
Starts unloading a collection from memory. Note that unloading is deferred
until all query have finished.
<br />
@EXAMPLES
<br />

<div id="CollectionUnload_container">
<div id="CollectionUnload_long">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">518998145</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; col.unload();
arangosh&gt; col;
[ArangoCollection <span class="hljs-number">518998145</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status unloaded)]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionDatabaseName

`db._collection(collection-name)`
<br />
Returns the collection with the given name or null if no such collection
exists.
<br />
`db._collection(collection-identifier)`
<br />
Returns the collection with the given identifier or null if no such
collection exists. Accessing collections by identifier is discouraged for
end users. End users should access collections using the collection name.
<br />
@EXAMPLES
<br />
Get a collection by name:
<br />

<div id="collectionDatabaseName_container">
<div id="collectionDatabaseName_long">
<pre>
arangosh&gt; db._collection(<span class="hljs-string">"demo"</span>);
[ArangoCollection <span class="hljs-number">16468097</span>, <span class="hljs-string">"demo"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
</pre>
</div>
</div>

<br />
Get a collection by id:
<br />
```
arangosh> db._collection(123456);
[ArangoCollection 123456, "demo" (type document, status loaded)]
```
<br />
Unknown collection:
<br />

<div id="collectionDatabaseNameUnknown_container">
<div id="collectionDatabaseNameUnknown_long">
<pre>
arangosh&gt; db._collection(<span class="hljs-string">"unknown"</span>);
<span class="hljs-literal">null</span>
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionDatabaseNameAll

`db._collections()`
<br />
Returns all collections of the given database.
<br />
@EXAMPLES
<br />

<div id="collectionsDatabaseName_container">
<div id="collectionsDatabaseName_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._collections();
[ 
  [ArangoCollection <span class="hljs-number">5523585</span>, <span class="hljs-string">"_jobs"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">2312321</span>, <span class="hljs-string">"_routing"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">4081793</span>, <span class="hljs-string">"_statisticsRaw"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">5392513</span>, <span class="hljs-string">"_queues"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">13387905</span>, <span class="hljs-string">"_system_users_users"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">4475009</span>, <span class="hljs-string">"_statistics"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">16468097</span>, <span class="hljs-string">"demo"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">17320065</span>, <span class="hljs-string">"animals"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">4868225</span>, <span class="hljs-string">"_statistics15"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">2181249</span>, <span class="hljs-string">"_modules"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">3950721</span>, <span class="hljs-string">"_aqlfunctions"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">5261441</span>, <span class="hljs-string">"_configuration"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">5654657</span>, <span class="hljs-string">"_apps"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">1100499073</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">2050177</span>, <span class="hljs-string">"_graphs"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">2443393</span>, <span class="hljs-string">"_cluster_kickstarter_plans"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">215169</span>, <span class="hljs-string">"_users"</span> (type <span class="hljs-built_in">document</span>, status loaded)], 
  [ArangoCollection <span class="hljs-number">12667009</span>, <span class="hljs-string">"_sessions"</span> (type <span class="hljs-built_in">document</span>, status loaded)] 
]
</pre>
</div>
<div id="collectionsDatabaseName_short" onclick="$('#collectionsDatabaseName_short').hide(); $('#collectionsDatabaseName_long').show();">
<pre>
arangosh&gt; db._collections();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsDocumentRemove

`db._remove(document)`
<br />
Removes a document. If there is revision mismatch, then an error is thrown.
<br />
`db._remove(document, true)`
<br />
Removes a document. If there is revision mismatch, then mismatch is ignored
and document is deleted. The function returns *true* if the document
existed and was deleted. It returns *false*, if the document was already
deleted.
<br />
`db._remove(document, true, waitForSync)` or
`db._remove(document, {overwrite: true or false, waitForSync: true or false})`
<br />
The optional *waitForSync* parameter can be used to force synchronization
of the document deletion operation to disk even in case that the
*waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* parameter can be used to force synchronization of just
specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
`db._remove(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as first
argument.
<br />
@EXAMPLES
<br />
Remove a document:
<br />

<div id="documentsCollectionRemove_container">
<div id="documentsCollectionRemove_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1114589313"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1114589313"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1114589313"</span> 
}
arangosh&gt; db._remove(a1);
<span class="hljs-literal">true</span>
arangosh&gt; db._remove(a1);
[ArangoError <span class="hljs-number">1202</span>: <span class="hljs-built_in">document</span> not found]
arangosh&gt; db._remove(a1, <span class="hljs-literal">true</span>);
<span class="hljs-literal">false</span>
</pre>
</div>
<div id="documentsCollectionRemove_short" onclick="$('#documentsCollectionRemove_short').hide(); $('#documentsCollectionRemove_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; db._remove(a1);
arangosh&gt; db._remove(a1);
arangosh&gt; db._remove(a1, <span class="hljs-literal">true</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Remove a document with a conflict:
<br />

<div id="documentsCollectionRemoveConflict_container">
<div id="documentsCollectionRemoveConflict_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1115572353"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1115572353"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1115572353"</span> 
}
arangosh&gt; a2 = db._replace(a1, { a : <span class="hljs-number">2</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1115572353"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1115768961"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1115572353"</span> 
}
arangosh&gt; db._remove(a1);
[ArangoError <span class="hljs-number">1200</span>: precondition failed]
arangosh&gt; db._remove(a1, <span class="hljs-literal">true</span>);
<span class="hljs-literal">true</span>
arangosh&gt; db._document(a1);
[ArangoError <span class="hljs-number">1202</span>: <span class="hljs-built_in">document</span> not found]
</pre>
</div>
<div id="documentsCollectionRemoveConflict_short" onclick="$('#documentsCollectionRemoveConflict_short').hide(); $('#documentsCollectionRemoveConflict_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; a2 = db._replace(a1, { a : <span class="hljs-number">2</span> });
arangosh&gt; db._remove(a1);
arangosh&gt; db._remove(a1, <span class="hljs-literal">true</span>);
arangosh&gt; db._document(a1);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Remove a document using new signature:
<br />

<div id="documentsCollectionRemoveSignature_container">
<div id="documentsCollectionRemoveSignature_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.insert({ a:  <span class="hljs-number">1</span> } );
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1116686465"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1116686465"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1116686465"</span> 
}
arangosh&gt; db.example.remove(<span class="hljs-string">"example/11265325374"</span>, {overwrite: <span class="hljs-literal">true</span>, waitForSync: <span class="hljs-literal">false</span>})
<span class="hljs-literal">false</span>
</pre>
</div>
<div id="documentsCollectionRemoveSignature_short" onclick="$('#documentsCollectionRemoveSignature_short').hide(); $('#documentsCollectionRemoveSignature_long').show();">
<pre>
arangosh&gt; db.example.insert({ a:  <span class="hljs-number">1</span> } );
arangosh&gt; db.example.remove(<span class="hljs-string">"example/11265325374"</span>, {overwrite: <span class="hljs-literal">true</span>, waitForSync: <span class="hljs-literal">false</span>})
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsDocumentName

`db._document(document)`
<br />
This method finds a document given its identifier. It returns the document
if the document exists. An error is thrown if no document with the given
identifier exists, or if the specified *_rev* value does not match the
current revision of the document.
<br />
**Note**: If the method is executed on the arangod server (e.g. from
inside a Foxx application), an immutable document object will be returned
for performance reasons. It is not possible to change attributes of this
immutable object. To update or patch the returned document, it needs to be
cloned/copied into a regular JavaScript object first. This is not necessary
if the *_document* method is called from out of arangosh or from any
other client.
<br />
`db._document(document-handle)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
@EXAMPLES
<br />
Returns the document:
<br />

<div id="documentsDocumentName_container">
<div id="documentsDocumentName_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._document(<span class="hljs-string">"example/12345"</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/12345"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1126058113"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"12345"</span> 
}
</pre>
</div>
<div id="documentsDocumentName_short" onclick="$('#documentsDocumentName_short').hide(); $('#documentsDocumentName_long').show();">
<pre>
arangosh&gt; db._document(<span class="hljs-string">"example/12345"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsDocumentExists

`db._exists(document)`
<br />
This method determines whether a document exists given its identifier.
Instead of returning the found document or an error, this method will
return either *true* or *false*. It can thus be used
for easy existence checks.
<br />
No error will be thrown if the sought document or collection does not
exist.
Still this method will throw an error if used improperly, e.g. when called
with a non-document handle.
<br />
`db._exists(document-handle)`
<br />
As before, but instead of a document a document-handle can be passed.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsDocumentReplace

`db._replace(document, data)`
<br />
The method returns a document with the attributes *_id*, *_rev* and
*_oldRev*.  The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
`db._replace(document, data, true)`
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
`db._replace(document, data, true, waitForSync)`
<br />
The optional *waitForSync* parameter can be used to force
synchronization of the document replacement operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
`db._replace(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
@EXAMPLES
<br />
Create and replace a document:
<br />

<div id="documentsDocumentReplace_container">
<div id="documentsDocumentReplace_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1126647937"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1126647937"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1126647937"</span> 
}
arangosh&gt; a2 = db._replace(a1, { a : <span class="hljs-number">2</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1126647937"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1126844545"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1126647937"</span> 
}
arangosh&gt; a3 = db._replace(a1, { a : <span class="hljs-number">3</span> });
[ArangoError <span class="hljs-number">1200</span>: precondition failed]
</pre>
</div>
<div id="documentsDocumentReplace_short" onclick="$('#documentsDocumentReplace_short').hide(); $('#documentsDocumentReplace_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; a2 = db._replace(a1, { a : <span class="hljs-number">2</span> });
arangosh&gt; a3 = db._replace(a1, { a : <span class="hljs-number">3</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock documentsDocumentUpdate

`db._update(document, data, overwrite, keepNull, waitForSync)`
<br />
Updates an existing *document*. The *document* must be a document in
the current collection. This document is then patched with the
*data* given as second argument. The optional *overwrite* parameter can
be used to control the behavior in case of version conflicts (see below).
The optional *keepNull* parameter can be used to modify the behavior when
handling *null* values. Normally, *null* values are stored in the
database. By setting the *keepNull* parameter to *false*, this behavior
can be changed so that all attributes in *data* with *null* values will
be removed from the target document.
<br />
The optional *waitForSync* parameter can be used to force
synchronization of the document update operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
The method returns a document with the attributes *_id*, *_rev* and
*_oldRev*. The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
`db._update(document, data, true)`
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
`db._update(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
@EXAMPLES
<br />
Create and update a document:
<br />

<div id="documentDocumentUpdate_container">
<div id="documentDocumentUpdate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1108494465"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1108494465"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1108494465"</span> 
}
arangosh&gt; a2 = db._update(a1, { b : <span class="hljs-number">2</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1108494465"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1108822145"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1108494465"</span> 
}
arangosh&gt; a3 = db._update(a1, { c : <span class="hljs-number">3</span> });
[ArangoError <span class="hljs-number">1200</span>: precondition failed]
</pre>
</div>
<div id="documentDocumentUpdate_short" onclick="$('#documentDocumentUpdate_short').hide(); $('#documentDocumentUpdate_long').show();">
<pre>
arangosh&gt; a1 = db.example.insert({ a : <span class="hljs-number">1</span> });
arangosh&gt; a2 = db._update(a1, { b : <span class="hljs-number">2</span> });
arangosh&gt; a3 = db._update(a1, { c : <span class="hljs-number">3</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-collection.cpp -->
@startDocuBlock collectionCount

`collection.count()`
<br />
Returns the number of living documents in the collection.
<br />
@EXAMPLES
<br />

<div id="collectionCount_container">
<div id="collectionCount_long">
<pre>
arangosh&gt; db.users.count();
<span class="hljs-number">0</span>
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-query.cpp -->
@startDocuBlock collectionChecksum

`collection.checksum(withRevisions, withData)`
<br />
The *checksum* operation calculates a CRC32 checksum of the keys
contained in collection *collection*.
<br />
If the optional argument *withRevisions* is set to *true*, then the
revision ids of the documents are also included in the checksumming.
<br />
If the optional argument *withData* is set to *true*, then the
actual document data is also checksummed. Including the document data in
checksumming will make the calculation slower, but is more accurate.
<br />
**Note**: this method is not available in a cluster.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-query.cpp -->
@startDocuBlock edgeCollectionEdges

`edge-collection.edges(vertex)`
<br />
The *edges* operator finds all edges starting from (outbound) or ending
in (inbound) *vertex*.
<br />
`edge-collection.edges(vertices)`
<br />
The *edges* operator finds all edges starting from (outbound) or ending
in (inbound) a document from *vertices*, which must a list of documents
or document handles.
<br />

<div id="EDGCOL_02_Relation_container">
<div id="EDGCOL_02_Relation_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
[ArangoCollection <span class="hljs-number">520505473</span>, <span class="hljs-string">"vertex"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
[ArangoCollection <span class="hljs-number">520636545</span>, <span class="hljs-string">"relation"</span> (type edge, status loaded)]
arangosh&gt; myGraph.v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/520964225"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"520964225"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"520964225"</span> 
}
arangosh&gt; myGraph.v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/521160833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"521160833"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"521160833"</span> 
}
arangosh&gt; myGraph.e1 = db.relation.insert(myGraph.v1, myGraph.v2, { label : <span class="hljs-string">"knows"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/521488513"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"521488513"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"521488513"</span> 
}
arangosh&gt; db._document(myGraph.e1);
{ 
  <span class="hljs-string">"label"</span> : <span class="hljs-string">"knows"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/521488513"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"521488513"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"521488513"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertex/520964225"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertex/521160833"</span> 
}
arangosh&gt; db.relation.edges(myGraph.e1._id);
[ ]
</pre>
</div>
<div id="EDGCOL_02_Relation_short" onclick="$('#EDGCOL_02_Relation_short').hide(); $('#EDGCOL_02_Relation_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
arangosh&gt; myGraph.v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
arangosh&gt; myGraph.v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
arangosh&gt; myGraph.e1 = db.relation.insert(myGraph.v1, myGraph.v2, { label : <span class="hljs-string">"knows"</span> });
arangosh&gt; db._document(myGraph.e1);
arangosh&gt; db.relation.edges(myGraph.e1._id);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-query.cpp -->
@startDocuBlock edgeCollectionInEdges

`edge-collection.inEdges(vertex)`
<br />
The *edges* operator finds all edges ending in (inbound) *vertex*.
<br />
`edge-collection.inEdges(vertices)`
<br />
The *edges* operator finds all edges ending in (inbound) a document from
*vertices*, which must a list of documents or document handles.
<br />
@EXAMPLES

<div id="EDGCOL_02_inEdges_container">
<div id="EDGCOL_02_inEdges_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
[ArangoCollection <span class="hljs-number">521881729</span>, <span class="hljs-string">"vertex"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
[ArangoCollection <span class="hljs-number">522012801</span>, <span class="hljs-string">"relation"</span> (type edge, status loaded)]
arangosh&gt; myGraph.v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/522340481"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"522340481"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"522340481"</span> 
}
arangosh&gt; myGraph.v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/522537089"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"522537089"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"522537089"</span> 
}
arangosh&gt; myGraph.e1 = db.relation.insert(myGraph.v1, myGraph.v2, { label : <span class="hljs-string">"knows"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/522864769"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"522864769"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"522864769"</span> 
}
arangosh&gt; db._document(myGraph.e1);
{ 
  <span class="hljs-string">"label"</span> : <span class="hljs-string">"knows"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/522864769"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"522864769"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"522864769"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertex/522340481"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertex/522537089"</span> 
}
arangosh&gt; db.relation.inEdges(myGraph.v1._id);
[ ]
arangosh&gt; db.relation.inEdges(myGraph.v2._id);
[ 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"knows"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/522864769"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"522864769"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"522864769"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertex/522340481"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertex/522537089"</span> 
  } 
]
</pre>
</div>
<div id="EDGCOL_02_inEdges_short" onclick="$('#EDGCOL_02_inEdges_short').hide(); $('#EDGCOL_02_inEdges_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
arangosh&gt; myGraph.v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
arangosh&gt; myGraph.v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
arangosh&gt; myGraph.e1 = db.relation.insert(myGraph.v1, myGraph.v2, { label : <span class="hljs-string">"knows"</span> });
arangosh&gt; db._document(myGraph.e1);
arangosh&gt; db.relation.inEdges(myGraph.v1._id);
arangosh&gt; db.relation.inEdges(myGraph.v2._id);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-query.cpp -->
@startDocuBlock edgeCollectionOutEdges

`edge-collection.outEdges(vertex)`
<br />
The *edges* operator finds all edges starting from (outbound)
*vertices*.
<br />
`edge-collection.outEdges(vertices)`
<br />
The *edges* operator finds all edges starting from (outbound) a document
from *vertices*, which must a list of documents or document handles.
<br />
@EXAMPLES

<div id="EDGCOL_02_outEdges_container">
<div id="EDGCOL_02_outEdges_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
[ArangoCollection <span class="hljs-number">523323521</span>, <span class="hljs-string">"vertex"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
[ArangoCollection <span class="hljs-number">523454593</span>, <span class="hljs-string">"relation"</span> (type edge, status loaded)]
arangosh&gt; myGraph.v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/523782273"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"523782273"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"523782273"</span> 
}
arangosh&gt; myGraph.v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"vertex/523978881"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"523978881"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"523978881"</span> 
}
arangosh&gt; myGraph.e1 = db.relation.insert(myGraph.v1, myGraph.v2, { label : <span class="hljs-string">"knows"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/524306561"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"524306561"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"524306561"</span> 
}
arangosh&gt; db._document(myGraph.e1);
{ 
  <span class="hljs-string">"label"</span> : <span class="hljs-string">"knows"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/524306561"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"524306561"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"524306561"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertex/523782273"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertex/523978881"</span> 
}
arangosh&gt; db.relation.outEdges(myGraph.v1._id);
[ 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"knows"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/524306561"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"524306561"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"524306561"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertex/523782273"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertex/523978881"</span> 
  } 
]
arangosh&gt; db.relation.outEdges(myGraph.v2._id);
[ ]
</pre>
</div>
<div id="EDGCOL_02_outEdges_short" onclick="$('#EDGCOL_02_outEdges_short').hide(); $('#EDGCOL_02_outEdges_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"vertex"</span>);
arangosh&gt; db._createEdgeCollection(<span class="hljs-string">"relation"</span>);
arangosh&gt; myGraph.v1 = db.vertex.insert({ name : <span class="hljs-string">"vertex 1"</span> });
arangosh&gt; myGraph.v2 = db.vertex.insert({ name : <span class="hljs-string">"vertex 2"</span> });
arangosh&gt; myGraph.e1 = db.relation.insert(myGraph.v1, myGraph.v2, { label : <span class="hljs-string">"knows"</span> });
arangosh&gt; db._document(myGraph.e1);
arangosh&gt; db.relation.outEdges(myGraph.v1._id);
arangosh&gt; db.relation.outEdges(myGraph.v2._id);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-query.cpp -->
@startDocuBlock collectionFulltext

`collection.fulltext(attribute, query)`
<br />
The *fulltext* simple query functions performs a fulltext search on the specified
*attribute* and the specified *query*.
<br />
Details about the fulltext query syntax can be found below.
<br />
Note: the *fulltext* simple query function is **deprecated** as of ArangoDB 2.6. 
The function may be removed in future versions of ArangoDB. The preferred
way for executing fulltext queries is to use an AQL query using the *FULLTEXT*
[AQL function](../Aql/FulltextFunctions.md) as follows:
<br />
    FOR doc IN FULLTEXT(@@collection, @attributeName, @queryString, @limit) 
      RETURN doc
<br />
@EXAMPLES
<br />

<div id="collectionFulltext_container">
<div id="collectionFulltext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.emails.ensureFulltextIndex(<span class="hljs-string">"content"</span>);
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"emails/1090013313"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"fulltext"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"content"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"minLength"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.emails.save({ content: <span class="hljs-string">"Hello Alice, how are you doing? Regards, Bob"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"emails/1090340993"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1090340993"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1090340993"</span> 
}
arangosh&gt; db.emails.save({ content: <span class="hljs-string">"Hello Charlie, do Alice and Bob know about it?"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"emails/1090537601"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1090537601"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1090537601"</span> 
}
arangosh&gt; db.emails.save({ content: <span class="hljs-string">"I think they don't know. Regards, Eve"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"emails/1090734209"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1090734209"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1090734209"</span> 
}
arangosh&gt; db.emails.fulltext(<span class="hljs-string">"content"</span>, <span class="hljs-string">"charlie,|eve"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"emails/1090537601"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1090537601"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1090537601"</span>, 
    <span class="hljs-string">"content"</span> : <span class="hljs-string">"Hello Charlie, do Alice and Bob know about it?"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"emails/1090734209"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1090734209"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1090734209"</span>, 
    <span class="hljs-string">"content"</span> : <span class="hljs-string">"I think they don't know. Regards, Eve"</span> 
  } 
]
</pre>
</div>
<div id="collectionFulltext_short" onclick="$('#collectionFulltext_short').hide(); $('#collectionFulltext_long').show();">
<pre>
arangosh&gt; db.emails.ensureFulltextIndex(<span class="hljs-string">"content"</span>);
arangosh&gt; db.emails.save({ content: <span class="hljs-string">"Hello Alice, how are you doing? Regards, Bob"</span> });
arangosh&gt; db.emails.save({ content: <span class="hljs-string">"Hello Charlie, do Alice and Bob know about it?"</span> });
arangosh&gt; db.emails.save({ content: <span class="hljs-string">"I think they don't know. Regards, Eve"</span> });
arangosh&gt; db.emails.fulltext(<span class="hljs-string">"content"</span>, <span class="hljs-string">"charlie,|eve"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-query.cpp -->
@startDocuBlock collectionLookupByKeys

`collection.documents(keys)`
<br />
Looks up the documents in the specified collection using the array of keys
provided. All documents for which a matching key was specified in the *keys*
array and that exist in the collection will be returned. 
Keys for which no document can be found in the underlying collection are ignored, 
and no exception will be thrown for them.
<br />
@EXAMPLES
<br />

<div id="collectionLookupByKeys_container">
<div id="collectionLookupByKeys_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; keys = [ ];
[ ]
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) {
........&gt;   db.example.insert({ _key: <span class="hljs-string">"test"</span> + i, value: i });
........&gt;   keys.push(<span class="hljs-string">"test"</span> + i);
........&gt; }
arangosh&gt; db.example.documents(keys);
{ 
  <span class="hljs-string">"documents"</span> : [ 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test0"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1092896897"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test0"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test1"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1093093505"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test1"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">2</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test2"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1093290113"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test2"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test3"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1093486721"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test3"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">4</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test4"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1093683329"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test4"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">5</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test5"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1093879937"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test5"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">6</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test6"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1094076545"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test6"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">7</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test7"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1094273153"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test7"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">8</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test8"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1094469761"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test8"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">9</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/test9"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1094666369"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test9"</span> 
    } 
  ] 
}
</pre>
</div>
<div id="collectionLookupByKeys_short" onclick="$('#collectionLookupByKeys_short').hide(); $('#collectionLookupByKeys_long').show();">
<pre>
arangosh&gt; keys = [ ];
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) {
........&gt;   db.example.insert({ _key: <span class="hljs-string">"test"</span> + i, value: i });
........&gt;   keys.push(<span class="hljs-string">"test"</span> + i);
........&gt; }
arangosh&gt; db.example.documents(keys);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/V8Server/v8-query.cpp -->
@startDocuBlock collectionRemoveByKeys

`collection.removeByKeys(keys)`
<br />
Looks up the documents in the specified collection using the array of keys
provided, and removes all documents from the collection whose keys are
contained in the *keys* array. Keys for which no document can be found in
the underlying collection are ignored, and no exception will be thrown for 
them.
<br />
The method will return an object containing the number of removed documents 
in the *removed* sub-attribute, and the number of not-removed/ignored
documents in the *ignored* sub-attribute.
<br />
@EXAMPLES
<br />

<div id="collectionRemoveByKeys_container">
<div id="collectionRemoveByKeys_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; keys = [ ];
[ ]
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) {
........&gt;   db.example.insert({ _key: <span class="hljs-string">"test"</span> + i, value: i });
........&gt;   keys.push(<span class="hljs-string">"test"</span> + i);
........&gt; }
arangosh&gt; db.example.removeByKeys(keys);
{ 
  <span class="hljs-string">"removed"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="collectionRemoveByKeys_short" onclick="$('#collectionRemoveByKeys_short').hide(); $('#collectionRemoveByKeys_long').show();">
<pre>
arangosh&gt; keys = [ ];
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) {
........&gt;   db.example.insert({ _key: <span class="hljs-string">"test"</span> + i, value: i });
........&gt;   keys.push(<span class="hljs-string">"test"</span> + i);
........&gt; }
arangosh&gt; db.example.removeByKeys(keys);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/VocbaseContext.h -->
@startDocuBlock SessionTimeout

`--server.session-timeout value`
<br />
The timeout for web interface sessions, using for authenticating requests
to the web interface (/_admin/aardvark) and related areas.
<br />
Sessions are only used when authentication is turned on.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock serverAuthenticateSystemOnly

`--server.authenticate-system-only boolean`
<br />
Controls whether incoming requests need authentication only if they are
directed to the ArangoDB's internal APIs and features, located at */_api/*,
*/_admin/* etc.
<br />
IF the flag is set to *true*, then HTTP authentication is only
required for requests going to URLs starting with */_*, but not for other
URLs. The flag can thus be used to expose a user-made API without HTTP
authentication to the outside world, but to prevent the outside world from
using the ArangoDB API and the admin interface without authentication.
Note that checking the URL is performed after any database name prefix
has been removed. That means when the actual URL called is
*/_db/_system/myapp/myaction*, the URL */myapp/myaction* will be used for
*authenticate-system-only* check.
<br />
The default is *false*.
<br />
Note that authentication still needs to be enabled for the server regularly
in order for HTTP authentication to be forced for the ArangoDB API and the
web interface.  Setting only this flag is not enough.
<br />
You can control ArangoDB's general authentication feature with the
*--server.disable-authentication* flag.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock server_authentication

`--server.disable-authentication`
<br />
Setting value to true will turn off authentication on the server side
so all clients can execute any action without authorization and privilege
checks.
<br />
The default value is *false*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock serverAuthenticationDisable

`--server.disable-authentication-unix-sockets value`
<br />
Setting *value* to true will turn off authentication on the server side
for requests coming in via UNIX domain sockets. With this flag enabled,
clients located on the same host as the ArangoDB server can use UNIX domain
sockets to connect to the server without authentication.
Requests coming in by other means (e.g. TCP/IP) are not affected by this
option.
<br />
The default value is *false*.
<br />
**Note**: this option is only available on platforms that support UNIX domain
sockets.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock serverThreads

`--server.threads number`
<br />
Specifies the *number* of threads that are spawned to handle HTTP REST
requests.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock schedulerMaximalQueueSize

`--scheduler.maximal-queue-size size`
<br />
Specifies the maximum *size* of the dispatcher queue for asynchronous
task execution. If the queue already contains *size* tasks, new tasks
will be rejected until other tasks are popped from the queue. Setting this
value may help preventing from running out of memory if the queue is filled
up faster than the server can process requests.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock v8Contexts

`--server.v8-contexts number`
<br />
Specifies the *number* of V8 contexts that are created for executing 
JavaScript code. More contexts allow execute more JavaScript actions in 
parallel, provided that there are also enough threads available. Please
note that each V8 context will use a substantial amount of memory and 
requires periodic CPU processing time for garbage collection. 
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock indexThreads

`--database.index-threads`
<br />
Specifies the *number* of background threads for index creation. When a
collection contains extra indexes other than the primary index, these other
indexes can be built by multiple threads in parallel. The index threads
are shared among multiple collections and databases. Specifying a value of 
*0* will turn off parallel building, meaning that indexes for each collection
are built sequentially by the thread that opened the collection.
If the number of index threads is greater than 1, it will also be used to
built the edge index of a collection in parallel (this also requires the
edge index in the collection to be split into multiple buckets).
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock DatabaseDirectory

`--database.directory directory`
<br />
The directory containing the collections and datafiles. Defaults
to */var/lib/arango*. When specifying the database directory, please
make sure the directory is actually writable by the arangod process.
<br />
You should further not use a database directory which is provided by a
network filesystem such as NFS. The reason is that networked filesystems
might cause inconsistencies when there are multiple parallel readers or
writers or they lack features required by arangod (e.g. flock()).
<br />
`directory`
<br />
When using the command line version, you can simply supply the database
directory as argument.
<br />
@EXAMPLES
<br />
```
> ./arangod --server.endpoint tcp://127.0.0.1:8529 --database.directory /tmp/vocbase
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock queryCacheMode

`--database.query-cache-mode`
<br />
Toggles the AQL query cache behavior. Possible values are:
<br />
* *off*: do not use query cache
* *on*: always use query cache, except for queries that have their *cache*
  attribute set to *false*
* *demand*: use query cache only for queries that have their *cache*
  attribute set to *true*
  set
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock queryCacheMaxResults

`--database.query-cache-max-results`
<br />
Maximum number of query results that can be stored per database-specific 
query cache. If a query is eligible for caching and the number of items in 
the database's query cache is equal to this threshold value, another cached
query result will be removed from the cache.
<br />
This option only has an effect if the query cache mode is set to either
*on* or *demand*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock databaseMaximalJournalSize

<br />
`--database.maximal-journal-size size`
<br />
Maximal size of journal in bytes. Can be overwritten when creating a new
collection. Note that this also limits the maximal size of a single
document.
<br />
The default is *32MB*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock databaseWaitForSync

`--database.wait-for-sync boolean`
<br />
Default wait-for-sync value. Can be overwritten when creating a new
collection.
<br />
The default is *false*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock databaseForceSyncProperties

`--database.force-sync-properties boolean`
<br />
Force syncing of collection properties to disk after creating a collection
or updating its properties.
<br />
If turned off, no fsync will happen for the collection and database 
properties stored in `parameter.json` files in the file system. Turning
off this option will speed up workloads that create and drop a lot of
collections (e.g. test suites).
<br />
The default is *true*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock databaseIgnoreDatafileErrors

`--database.ignore-datafile-errors boolean`
<br />
If set to `false`, CRC mismatch and other errors in collection datafiles 
will lead to a collection not being loaded at all. The collection in this
case becomes unavailable. If such collection needs to be loaded during WAL 
recovery, the WAL recovery will also abort (if not forced with option
`--wal.ignore-recovery-errors true`). 
<br />
Setting this flag to `false` protects users from unintentionally using a 
collection with corrupted datafiles, from which only a subset of the 
original data can be recovered. Working with such collection could lead
to data loss and follow up errors.
In order to access such collection, it is required to inspect and repair
the collection datafile with the datafile debugger (arango-dfdb).
<br />
If set to `true`, CRC mismatch and other errors during the loading of a
collection will lead to the datafile being partially loaded, up to the
position of the first error. All data up to until the invalid position
will be loaded. This will enable users to continue with collection datafiles
even if they are corrupted, but this will result in only a partial load 
of the original data and potential follow up errors. The WAL recovery 
will still abort when encountering a collection with a corrupted datafile, 
at least if `--wal.ignore-recovery-errors` is not set to `true`.
<br />
The default value is *false*, so collections with corrupted datafiles will
not be loaded at all, preventing partial loads and follow up errors. However,
if such collection is required at server startup, during WAL recovery, the
server will abort the recovery and refuse to start.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock serverDisableReplicationApplier

`--server.disable-replication-applier flag`
<br />
If *true* the server will start with the replication applier turned off,
even if the replication applier is configured with the *autoStart* option.
Using the command-line option will not change the value of the *autoStart*
option in the applier configuration, but will suppress auto-starting the
replication applier just once.
<br />
If the option is not used, ArangoDB will read the applier configuration from
the file *REPLICATION-APPLIER-CONFIG* on startup, and use the value of the
*autoStart* attribute from this file.
<br />
The default is *false*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock databaseDisableQueryTracking

`--database.disable-query-tracking flag`
<br />
If *true*, the server's query tracking feature will be disabled by default.
<br />
The default is *false*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock databaseThrowCollectionNotLoadedError

`--database.throw-collection-not-loaded-error flag`
<br />
Accessing a not-yet loaded collection will automatically load a collection
on first access. This flag controls what happens in case an operation
would need to wait for another thread to finalize loading a collection. If
set to *true*, then the first operation that accesses an unloaded collection
will load it. Further threads that try to access the same collection while
it is still loading will get an error (1238, *collection not loaded*). When
the initial operation has completed loading the collection, all operations
on the collection can be carried out normally, and error 1238 will not be
thrown.
<br />
If set to *false*, the first thread that accesses a not-yet loaded collection
will still load it. Other threads that try to access the collection while
loading will not fail with error 1238 but instead block until the collection
is fully loaded. This configuration might lead to all server threads being
blocked because they are all waiting for the same collection to complete
loading. Setting the option to *true* will prevent this from happening, but
requires clients to catch error 1238 and react on it (maybe by scheduling 
a retry for later).
<br />
The default value is *false*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock foxxQueues

`--server.foxx-queues flag`
<br />
If *true*, the Foxx queues will be available and jobs in the queues will
be executed asynchronously.
<br />
The default is *true*.
When set to `false` the queue manager will be disabled and any jobs
are prevented from being processed, which may reduce CPU load a great deal.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock foxxQueuesPollInterval

`--server.foxx-queues-poll-interval value`
<br />
The poll interval for the Foxx queues manager. The value is specified in
seconds. Lower values will mean more immediate and more frequent Foxx queue 
job execution, but will make the queue thread wake up and query the
queues more often. When set to a low value, the queue thread might cause
CPU load.
<br />
The default is *1* second. If Foxx queues are not used much, then this value
may be increased to make the queues thread wake up less.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestServer/ArangoServer.h -->
@startDocuBlock DefaultLanguage

`--default-language default-language`
<br />
The default language ist used for sorting and comparing strings.
The language value is a two-letter language code (ISO-639) or it is
composed by a two-letter language code with and a two letter country code
(ISO-3166). Valid languages are "de", "en", "en_US" or "en_UK".
<br />
The default default-language is set to be the system locale on that platform.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Rest/AnyServer.h -->
@startDocuBlock pidFile

`--pid-file filename`
<br />
The name of the process ID file to use when running the server as a
daemon. This parameter must be specified if either the flag *daemon* or
*supervisor* is set.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Cluster/ApplicationCluster.h -->
@startDocuBlock clusterAgencyEndpoint

`--cluster.agency-endpoint endpoint`
<br />
An agency endpoint the server can connect to. The option can be specified
multiple times so the server can use a cluster of agency servers. Endpoints
have the following pattern:
<br />
- tcp://ipv4-address:port - TCP/IP endpoint, using IPv4
- tcp://[ipv6-address]:port - TCP/IP endpoint, using IPv6
- ssl://ipv4-address:port - TCP/IP endpoint, using IPv4, SSL encryption
- ssl://[ipv6-address]:port - TCP/IP endpoint, using IPv6, SSL encryption
<br />
At least one endpoint must be specified or ArangoDB will refuse to start.
It is recommended to specify at least two endpoints so ArangoDB has an
alternative endpoint if one of them becomes unavailable.
<br />
@EXAMPLES
<br />
```
--cluster.agency-endpoint tcp://192.168.1.1:4001 --cluster.agency-endpoint tcp://192.168.1.2:4002
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Cluster/ApplicationCluster.h -->
@startDocuBlock clusterAgencyPrefix

`--cluster.agency-prefix prefix`
<br />
The global key prefix used in all requests to the agency. The specified
prefix will become part of each agency key. Specifying the key prefix
allows managing multiple ArangoDB clusters with the same agency
server(s).
<br />
*prefix* must consist of the letters *a-z*, *A-Z* and the digits *0-9*
only. Specifying a prefix is mandatory.
<br />
@EXAMPLES
<br />
```
--cluster.prefix mycluster
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Cluster/ApplicationCluster.h -->
@startDocuBlock clusterMyLocalInfo

`--cluster.my-local-info info`
<br />
Some local information about the server in the cluster, this can for
example be an IP address with a process ID or any string unique to
the server. Specifying *info* is mandatory on startup if the server
id (see below) is not specified. Each server of the cluster must
have a unique local info. This is ignored if my-id below is specified.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Cluster/ApplicationCluster.h -->
@startDocuBlock clusterMyId

`--cluster.my-id id`
<br />
The local server's id in the cluster. Specifying *id* is mandatory on
startup. Each server of the cluster must have a unique id.
<br />
Specifying the id is very important because the server id is used for
determining the server's role and tasks in the cluster.
<br />
*id* must be a string consisting of the letters *a-z*, *A-Z* or the
digits *0-9* only.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Cluster/ApplicationCluster.h -->
@startDocuBlock clusterMyAddress

`--cluster.my-address endpoint`
<br />
The server's endpoint for cluster-internal communication. If specified, it
must have the following pattern:
- tcp://ipv4-address:port - TCP/IP endpoint, using IPv4
- tcp://[ipv6-address]:port - TCP/IP endpoint, using IPv6
- ssl://ipv4-address:port - TCP/IP endpoint, using IPv4, SSL encryption
- ssl://[ipv6-address]:port - TCP/IP endpoint, using IPv6, SSL encryption
<br />
If no *endpoint* is specified, the server will look up its internal
endpoint address in the agency. If no endpoint can be found in the agency
for the server's id, ArangoDB will refuse to start.
<br />
@EXAMPLES
<br />
```
--cluster.my-address tcp://192.168.1.1:8530
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Cluster/ApplicationCluster.h -->
@startDocuBlock clusterUsername

`--cluster.username username`
<br />
The username used for authorization of cluster-internal requests.
This username will be used to authenticate all requests and responses in
cluster-internal communication, i.e. requests exchanged between coordinators
and individual database servers.
<br />
This option is used for cluster-internal requests only. Regular requests to
coordinators are authenticated normally using the data in the *_users*
collection.
<br />
If coordinators and database servers are run with authentication turned off,
(e.g. by setting the *--server.disable-authentication* option to *true*),
the cluster-internal communication will also be unauthenticated.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Cluster/ApplicationCluster.h -->
@startDocuBlock clusterPassword

`--cluster.password password`
<br />
The password used for authorization of cluster-internal requests.
This password will be used to authenticate all requests and responses in
cluster-internal communication, i.e. requests exchanged between coordinators
and individual database servers.
<br />
This option is used for cluster-internal requests only. Regular requests to
coordinators are authenticated normally using the data in the `_users`
collection.
<br />
If coordinators and database servers are run with authentication turned off,
(e.g. by setting the *--server.disable-authentication* option to *true*),
the cluster-internal communication will also be unauthenticated.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileDirectory

`--wal.directory`
<br />
Specifies the directory in which the write-ahead logfiles should be 
stored. If this option is not specified, it defaults to the subdirectory
*journals* in the server's global database directory. If the directory is
not present, it will be created.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileSize

`--wal.logfile-size`
<br />
Specifies the filesize (in bytes) for each write-ahead logfile. The logfile 
size should be chosen so that each logfile can store a considerable amount of
documents. The bigger the logfile size is chosen, the longer it will take
to fill up a single logfile, which also influences the delay until the data
in a logfile will be garbage-collected and written to collection journals
and datafiles. It also affects how long logfile recovery will take at
server start. 
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileReserveLogfiles

`--wal.reserve-logfiles`
<br />
The maximum number of reserve logfiles that ArangoDB will create in a 
background process. Reserve logfiles are useful in the situation when an
operation needs to be written to a logfile but the reserve space in the 
logfile is too low for storing the operation. In this case, a new logfile
needs to be created to store the operation. Creating new logfiles is 
normally slow, so ArangoDB will try to pre-create logfiles in a background
process so there are always reserve logfiles when the active logfile gets
full. The number of reserve logfiles that ArangoDB keeps in the background
is configurable with this option.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileHistoricLogfiles

`--wal.historic-logfiles`
<br />
The maximum number of historic logfiles that ArangoDB will keep after they
have been garbage-collected. If no replication is used, there is no need
to keep historic logfiles except for having a local changelog.
<br />
In a replication setup, the number of historic logfiles affects the amount
of data a slave can fetch from the master's logs. The more historic 
logfiles, the more historic data is available for a slave, which is useful
if the connection between master and slave is unstable or slow. Not having
enough historic logfiles available might lead to logfile data being deleted
on the master already before a slave has fetched it.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileSlots

`--wal.slots`
<br />
Configures the amount of write slots the write-ahead log can give to write
operations in parallel. Any write operation will lease a slot and return it
to the write-ahead log when it is finished writing the data. A slot will
remain blocked until the data in it was synchronized to disk. After that,
a slot becomes reusable by following operations. The required number of
slots is thus determined by the parallelity of write operations and the 
disk synchronization speed. Slow disks probably need higher values, and fast
disks may only require a value lower than the default.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileSyncInterval

`--wal.sync-interval`
<br />
The interval (in milliseconds) that ArangoDB will use to automatically 
synchronize data in its write-ahead logs to disk. Automatic syncs will only
be performed for not-yet synchronized data, and only for operations that
have been executed without the *waitForSync* attribute.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileThrottling

`--wal.throttle-when-pending`
<br />
The maximum value for the number of write-ahead log garbage-collection queue
elements. If set to *0*, the queue size is unbounded, and no 
writtle-throttling will occur. If set to a non-zero value, writte-throttling
will automatically kick in when the garbage-collection queue contains at
least as many elements as specified by this option.
While write-throttling is active, data-modification operations will 
intentionally be delayed by a configurable amount of time. This is to 
ensure the write-ahead log garbage collector can catch up with the 
operations executed.
Write-throttling will stay active until the garbage-collection queue size
goes down below the specified value.
Write-throttling is turned off by default.
<br />
`--wal.throttle-wait`
<br />
This option determines the maximum wait time (in milliseconds) for
operations that are write-throttled. If write-throttling is active and a
new write operation is to be executed, it will wait for at most the 
specified amount of time for the write-ahead log garbage-collection queue
size to fall below the throttling threshold. If the queue size decreases
before the maximum wait time is over, the operation will be executed
normally. If the queue size does not decrease before the wait time is over,
the operation will be aborted with an error.
This option only has an effect if `--wal.throttle-when-pending` has a 
non-zero value, which is not the default.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileAllowOversizeEntries

`--wal.allow-oversize-entries`
<br />
Whether or not it is allowed to store individual documents that are bigger 
than would fit into a single logfile. Setting the option to false will make 
such operations fail with an error. Setting the option to true will make
such operations succeed, but with a high potential performance impact.
The reason is that for each oversize operation, an individual oversize
logfile needs to be created which may also block other operations. 
The option should be set to *false* if it is certain that documents will
always have a size smaller than a single logfile.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileIgnoreLogfileErrors

`--wal.ignore-logfile-errors`
<br />
Ignores any recovery errors caused by corrupted logfiles on startup. When
set to *false*, the recovery procedure on startup will fail with an error
whenever it encounters a corrupted (that includes only half-written) 
logfile. This is a security precaution to prevent data loss in case of disk
errors etc. When the recovery procedure aborts because of corruption, any
corrupted files can be inspected and fixed (or removed) manually and the
server can be restarted afterwards.
<br />
Setting the option to *true* will make the server continue with the recovery
procedure even in case it detects corrupt logfile entries. In this case it
will stop at the first corrupted logfile entry and ignore all others, which
might cause data loss.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileIgnoreRecoveryErrors

`--wal.ignore-recovery-errors`
<br />
Ignores any recovery errors not caused by corrupted logfiles but by logical
errors. Logical errors can occur if logfiles or any other server datafiles
have been manually edited or the server is somehow misconfigured. 
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/Wal/LogfileManager.h -->
@startDocuBlock WalLogfileSuppressShapeInformation

`--wal.suppress-shape-information`
<br />
Setting this variable to *true* will lead to no shape information being 
written into the write-ahead logfiles for documents or edges. While this is 
a good optimization for a single server to save memory (and disk space), it
it will effectively disable using the write-ahead log as a reliable source 
for replicating changes to other servers. A master server with this option
set to *true* will not be able to fully reproduce the structure of saved
documents after a collection has been deleted. In case a replication client
requests a document for which the collection is already deleted, the master
will return an empty document. Note that this only affects replication and
not normal operation on the master.
<br />
**Do not set this variable to *true* on a server that you plan to use as a 
replication master** 
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverEndpoint

`--server.endpoint endpoint`
<br />
Specifies an *endpoint* for HTTP requests by clients. Endpoints have
the following pattern:
- tcp://ipv4-address:port - TCP/IP endpoint, using IPv4
- tcp://[ipv6-address]:port - TCP/IP endpoint, using IPv6
- ssl://ipv4-address:port - TCP/IP endpoint, using IPv4, SSL encryption
- ssl://[ipv6-address]:port - TCP/IP endpoint, using IPv6, SSL encryption
- unix:///path/to/socket - Unix domain socket endpoint
<br />
If a TCP/IP endpoint is specified without a port number, then the default
port (8529) will be used.
If multiple endpoints need to be used, the option can be repeated multiple
times.
<br />
@EXAMPLES
<br />
```
unix> ./arangod --server.endpoint tcp://127.0.0.1:8529
  --server.endpoint ssl://127.0.0.1:8530
  --server.keyfile server.pem /tmp/vocbase
2012-07-26T07:07:47Z [8161] INFO using SSL protocol version 'TLSv1'
2012-07-26T07:07:48Z [8161] INFO using endpoint 'ssl://127.0.0.1:8530' for http ssl requests
2012-07-26T07:07:48Z [8161] INFO using endpoint 'tcp://127.0.0.1:8529' for http tcp requests
2012-07-26T07:07:49Z [8161] INFO ArangoDB (version 1.1.alpha) is ready for business
2012-07-26T07:07:49Z [8161] INFO Have Fun!
```
<br />
**Note**: If you are using SSL-encrypted endpoints, you must also supply
the path to a server certificate using the \-\-server.keyfile option.
<br />
Endpoints can also be changed at runtime.
Please refer to [HTTP Interface for Endpoints](../HttpEndpoints/README.md) for more details.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverReuseAddress

`--server.reuse-address`
<br />
If this boolean option is set to *true* then the socket option
SO_REUSEADDR is set on all server endpoints, which is the default.
If this option is set to *false* it is possible that it takes up
to a minute after a server has terminated until it is possible for
a new server to use the same endpoint again. This is why this is
activated by default.
<br />
Please note however that under some operating systems this can be
a security risk because it might be possible for another process
to bind to the same address and port, possibly hijacking network
traffic. Under Windows, ArangoDB additionally sets the flag
SO_EXCLUSIVEADDRUSE as a measure to alleviate this problem.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock keep_alive_timeout

`--server.keep-alive-timeout`
<br />
Allows to specify the timeout for HTTP keep-alive connections. The timeout
value must be specified in seconds.
Idle keep-alive connections will be closed by the server automatically when
the timeout is reached. A keep-alive-timeout value 0 will disable the keep
alive feature entirely.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverDefaultApi

`--server.default-api-compatibility`
<br />
This option can be used to determine the API compatibility of the ArangoDB
server. It expects an ArangoDB version number as an integer, calculated as
follows:
<br />
*10000 \* major + 100 \* minor (example: *10400* for ArangoDB 1.4)*
<br />
The value of this option will have an influence on some API return values
when the HTTP client used does not send any compatibility information.
<br />
In most cases it will be sufficient to not set this option explicitly but to
keep the default value. However, in case an "old" ArangoDB client is used
that does not send any compatibility information and that cannot handle the
responses of the current version of ArangoDB, it might be reasonable to set
the option to an old version number to improve compatibility with older
clients.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverAllowMethod

`--server.allow-method-override`
<br />
When this option is set to *true*, the HTTP request method will optionally
be fetched from one of the following HTTP request headers if present in
the request:
<br />
- *x-http-method*
- *x-http-method-override*
- *x-method-override*
<br />
If the option is set to *true* and any of these headers is set, the
request method will be overridden by the value of the header. For example,
this allows issuing an HTTP DELETE request which to the outside world will
look like an HTTP GET request. This allows bypassing proxies and tools that
will only let certain request types pass.
<br />
Setting this option to *true* may impose a security risk so it should only
be used in controlled environments.
<br />
The default value for this option is *false*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverBacklog

`--server.backlog-size`
<br />
Allows to specify the size of the backlog for the *listen* system call
The default value is 10. The maximum value is platform-dependent. Specifying
a higher value than defined in the system header's SOMAXCONN may result in
a warning on server start. The actual value used by *listen* may also be
silently truncated on some platforms (this happens inside the *listen*
system call).
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverKeyfile

`--server.keyfile filename`
<br />
If SSL encryption is used, this option must be used to specify the filename
of the server private key. The file must be PEM formatted and contain both
the certificate and the server's private key.
<br />
The file specified by *filename* should have the following structure:
<br />
```
# create private key in file "server.key"
openssl genrsa -des3 -out server.key 1024
<br />
# create certificate signing request (csr) in file "server.csr"
openssl req -new -key server.key -out server.csr
<br />
# copy away original private key to "server.key.org"
cp server.key server.key.org
<br />
# remove passphrase from the private key
openssl rsa -in server.key.org -out server.key
<br />
# sign the csr with the key, creates certificate PEM file "server.crt"
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
<br />
# combine certificate and key into single PEM file "server.pem"
cat server.crt server.key > server.pem
```
<br />
You may use certificates issued by a Certificate Authority or self-signed
certificates. Self-signed certificates can be created by a tool of your
choice. When using OpenSSL for creating the self-signed certificate, the
following commands should create a valid keyfile:
<br />
```
-----BEGIN CERTIFICATE-----
<br />
(base64 encoded certificate)
<br />
-----END CERTIFICATE-----
-----BEGIN RSA PRIVATE KEY-----
<br />
(base64 encoded private key)
<br />
-----END RSA PRIVATE KEY-----
```
<br />
For further information please check the manuals of the tools you use to
create the certificate.
<br />
**Note**: the \-\-server.keyfile option must be set if the server is started with
at least one SSL endpoint.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverCafile

`--server.cafile filename`
<br />
This option can be used to specify a file with CA certificates that are sent
to the client whenever the server requests a client certificate. If the
file is specified, The server will only accept client requests with
certificates issued by these CAs. Do not specify this option if you want
clients to be able to connect without specific certificates.
<br />
The certificates in *filename* must be PEM formatted.
<br />
**Note**: this option is only relevant if at least one SSL endpoint is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverSSLProtocol

`--server.ssl-protocolvalue`
<br />
Use this option to specify the default encryption protocol to be used.
The following variants are available:
- 1: SSLv2
- 2: SSLv23
- 3: SSLv3
- 4: TLSv1
- 5: TLSv1.2 (recommended)
<br />
The default *value* is 4 (i.e. TLSv1).
<br />
**Note**: this option is only relevant if at least one SSL endpoint is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverSSLCache

`--server.ssl-cache value`
<br />
Set to true if SSL session caching should be used.
<br />
*value* has a default value of *false* (i.e. no caching).
<br />
**Note**: this option is only relevant if at least one SSL endpoint is used, and
only if the client supports sending the session id.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverSSLOptions

`--server.ssl-options value`
<br />
This option can be used to set various SSL-related options. Individual
option values must be combined using bitwise OR.
<br />
Which options are available on your platform is determined by the OpenSSL
version you use. The list of options available on your platform might be
retrieved by the following shell command:
<br />
```
 > grep "#define SSL_OP_.*" /usr/include/openssl/ssl.h
<br />
 #define SSL_OP_MICROSOFT_SESS_ID_BUG                    0x00000001L
 #define SSL_OP_NETSCAPE_CHALLENGE_BUG                   0x00000002L
 #define SSL_OP_LEGACY_SERVER_CONNECT                    0x00000004L
 #define SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG         0x00000008L
 #define SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG              0x00000010L
 #define SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER               0x00000020L
 ...
```
<br />
A description of the options can be found online in the 
[OpenSSL documentation](http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html)
<br />
**Note**: this option is only relevant if at least one SSL endpoint is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/HttpServer/ApplicationEndpointServer.h -->
@startDocuBlock serverSSLCipher

`--server.ssl-cipher-list cipher-list`
<br />
This option can be used to restrict the server to certain SSL ciphers only,
and to define the relative usage preference of SSL ciphers.
<br />
The format of *cipher-list* is documented in the OpenSSL documentation.
<br />
To check which ciphers are available on your platform, you may use the
following shell command:
<br />
```
> openssl ciphers -v
<br />
ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA1
ECDHE-ECDSA-AES256-SHA  SSLv3 Kx=ECDH     Au=ECDSA Enc=AES(256)  Mac=SHA1
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
DHE-RSA-CAMELLIA256-SHA SSLv3 Kx=DH       Au=RSA  Enc=Camellia(256) Mac=SHA1
...
```
<br />
The default value for *cipher-list* is "ALL".
<br />
**Note**: this option is only relevant if at least one SSL endpoint is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock generalHelp

`--help`
<br />
`-h`
<br />
Prints a list of the most common options available and then
exits. In order to see all options use *--help-all*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock generalVersion

`--version`
<br />
`-v`
<br />
Prints the version of the server and exits.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock configurationFilename

`--configuration filename`
<br />
`-c filename`
<br />
Specifies the name of the configuration file to use.
<br />
If this command is not passed to the server, then by default, the server
will attempt to first locate a file named *~/.arango/arangod.conf* in the
user's home directory.
<br />
If no such file is found, the server will proceed to look for a file
*arangod.conf* in the system configuration directory. The system
configuration directory is platform-specific, and may be changed when
compiling ArangoDB yourself. It may default to */etc/arangodb* or
*/usr/local/etc/arangodb*. This file is installed when using a package
manager like rpm or dpkg. If you modify this file and later upgrade to a new
version of ArangoDB, then the package manager normally warns you about the
conflict. In order to avoid these warning for small adjustments, you can put
local overrides into a file *arangod.conf.local*.
<br />
Only command line options with a value should be set within the
configuration file. Command line options which act as flags should be
entered on the command line when starting the server.
<br />
Whitespace in the configuration file is ignored. Each option is specified on
a separate line in the form
<br />
```js
key = value 
```
<br />
Alternatively, a header section can be specified and options pertaining to
that section can be specified in a shorter form
<br />
```js
[log] 
level = trace
```
<br />
rather than specifying
<br />
```js
log.level = trace 
```
<br />
Comments can be placed in the configuration file, only if the line begins
with one or more hash symbols (#).
<br />
There may be occasions where a configuration file exists and the user wishes
to override configuration settings stored in a configuration file. Any
settings specified on the command line will overwrite the same setting when
it appears in a configuration file. If the user wishes to completely ignore
configuration files without necessarily deleting the file (or files), then
add the command line option
<br />
```js
-c none 
```
<br />
or
<br />
```js
--configuration none 
```
<br />
When starting up the server. Note that, the word *none* is
case-insensitive.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock configurationUid

`--uid uid`
<br />
The name (identity) of the user the server will run as. If this parameter is
not specified, the server will not attempt to change its UID, so that the
UID used by the server will be the same as the UID of the user who started
the server. If this parameter is specified, then the server will change its
UID after opening ports and reading configuration files, but before
accepting connections or opening other files (such as recovery files). This
is useful when the server must be started with raised privileges (in certain
environments) but security considerations require that these privileges be
dropped once the server has started work.
<br />
Observe that this parameter cannot be used to bypass operating system
security. In general, this parameter (and its corresponding relative gid)
can lower privileges but not raise them.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock configurationGid

`--gid gid`
<br />
The name (identity) of the group the server will run as. If this parameter
is not specified, then the server will not attempt to change its GID, so
that the GID the server runs as will be the primary group of the user who
started the server. If this parameter is specified, then the server will
change its GID after opening ports and reading configuration files, but
before accepting connections or opening other files (such as recovery
files).
<br />
This parameter is related to the parameter uid.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logApplication

`--log.application name`
<br />
Specifies the *name* of the application which should be logged if this item of
information is to be logged.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logFacility

`--log.facility name`
<br />
If this option is set, then in addition to output being directed to the
standard output (or to a specified file, in the case that the command line
log.file option was set), log output is also sent to the system logging
facility. The *arg* is the system log facility to use. See syslog for
further details.
<br />
The value of *arg* depends on your syslog configuration. In general it
will be *user*. Fatal messages are mapped to *crit*, so if *arg*
is *user*, these messages will be logged as *user.crit*.  Error
messages are mapped to *err*.  Warnings are mapped to *warn*.  Info
messages are mapped to *notice*.  Debug messages are mapped to
*info*.  Trace messages are mapped to *debug*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logLevel

`--log.level level`
<br />
`--log level`
<br />
Allows the user to choose the level of information which is logged by the
server. The argument *level* is specified as a string and can be one of
the values listed below. Note that, fatal errors, that is, errors which
cause the server to terminate, are always logged irrespective of the log
level assigned by the user. The variant *c* log.level can be used in
configuration files, the variant *c* log for command line options.
<br />
**fatal**: 
Logs errors which cause the server to terminate.
<br />
Fatal errors generally indicate some inconsistency with the manner in which
the server has been coded. Fatal errors may also indicate a problem with the
platform on which the server is running. Fatal errors always cause the
server to terminate. For example,
<br />
```
2010-09-20T07:32:12Z [4742] FATAL a http server has already been created
```
<br />
**error**: 
Logs errors which the server has encountered.
<br />
These errors may not necessarily result in the termination of the
server. For example,
<br />
```
2010-09-17T13:10:22Z [13967] ERROR strange log level 'errors'\, going to 'warning'
```
<br />
**warning**:
Provides information on errors encountered by the server,
which are not necessarily detrimental to it's continued operation.
<br />
For example,
<br />
```
2010-09-20T08:15:26Z [5533] WARNING got corrupted HTTP request 'POS?'
```
<br />
**Note**: The setting the log level to warning will also result in all errors
to be logged as well.
<br />
**info**: 
Logs information about the status of the server.
<br />
For example,
<br />
```
2010-09-20T07:40:38Z [4998] INFO SimpleVOC ready for business
```
<br />
**Note**: The setting the log level to info will also result in all errors and
warnings to be logged as well.
<br />
**debug**: 
Logs all errors, all warnings and debug information.
<br />
Debug log information is generally useful to find out the state of the
server in the case of an error. For example,
<br />
```
2010-09-17T13:02:53Z [13783] DEBUG opened port 7000 for any
```
<br />
**Note**: The setting the log level to debug will also result in all errors,
warnings and server status information to be logged as well.
<br />
**trace**: 
As the name suggests, logs information which may be useful to trace
problems encountered with using the server.
<br />
For example,
<br />
```
2010-09-20T08:23:12Z [5687] TRACE trying to open port 8000
```
<br />
**Note**: The setting the log level to trace will also result in all errors,
warnings, status information, and debug information to be logged as well.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logFile

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logRequests

`--log.requests-file filename`
<br />
This option allows the user to specify the name of a file to which
requests are logged. By default, no log file is used and requests are
not logged. Note that if the file named by *filename* does not
exist, it will be created. If the file cannot be created (e.g. due to
missing file privileges), the server will refuse to start. If the specified
file already exists, output is appended to that file.
<br />
Use *+* to log to standard error. Use *-* to log to standard output.
Use *""* to disable request logging altogether.
<br />
The log format is
- `"http-request"`: static string indicating that an HTTP request was logged
- client address: IP address of client
- HTTP method type, e.g. `GET`, `POST`
- HTTP version, e.g. `HTTP/1.1`
- HTTP response code, e.g. 200
- request body length in bytes
- response body length in bytes
- server request processing time, containing the time span between fetching
  the first byte of the HTTP request and the start of the HTTP response
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logPrefix

`--log.prefix prefix`
<br />
This option is used specify an prefix to logged text.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logThread

`--log.thread`
<br />
Whenever log output is generated, the process ID is written as part of the
log information. Setting this option appends the thread id of the calling
thread to the process id. For example,
<br />
```
2010-09-20T13:04:01Z [19355] INFO ready for business
```
<br />
when no thread is logged and
<br />
```
2010-09-20T13:04:17Z [19371-18446744072487317056] ready for business
```
<br />
when this command line option is set.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logLineNumber

`--log.line-number`
<br />
Normally, if an human readable fatal, error, warning or info message is
logged, no information about the file and line number is provided. The file
and line number is only logged for debug and trace message. This option can
be use to always log these pieces of information.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logLocalTime

`--log.use-local-time`
<br />
If specified, all dates and times in log messages will use the server's
local time-zone. If not specified, all dates and times in log messages
will be printed in UTC / Zulu time. The date and time format used in logs 
is always `YYYY-MM-DD HH:MM:SS`, regardless of this setting. If UTC time
is used, a `Z` will be appended to indicate Zulu time.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logSourceFilter

`--log.source-filter arg`
<br />
For debug and trace messages, only log those messages originated from the
C source file *arg*. The argument can be used multiple times.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logContentFilter

`--log.content-filter arg`
<br />
Only log message containing the specified string *arg*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock logPerformance

`--log.performance`
<br />
If this option is set, performance-related info messages will be logged via
the regular logging mechanisms. These will consist of mostly timing and 
debugging information for performance-critical operations.
<br />
Currently performance-related operations are logged as INFO messages.
Messages starting with prefix `[action]` indicate that an instrumented
operation was started (note that its end won't be logged). Messages with
prefix `[timer]` will contain timing information for operations. Note that
no timing information will be logged for operations taking less time than
1 second. This is to ensure that sub-second operations do not pollute logs.
<br />
The contents of performance-related log messages enabled by this option
are subject to change in future versions of ArangoDB.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/ApplicationServer/ApplicationServer.h -->
@startDocuBlock randomGenerator

`--random.generator arg`
<br />
The argument is an integer (1,2,3 or 4) which sets the manner in which
random numbers are generated. The default method (3) is to use the a
non-blocking random (or pseudorandom) number generator supplied by the
operating system. 
<br />
Specifying an argument of 2, uses a blocking random (or
pseudorandom) number generator. Specifying an argument 1 sets a pseudorandom
number generator using an implication of the Mersenne Twister MT19937
algorithm. Algorithm 4 is a combination of the blocking random number
generator and the Mersenne Twister.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgeHandler.cpp -->
@startDocuBlock API_EDGE_CREATE

@brief creates an edge
<br />
@RESTHEADER{POST /_api/edge,Create edge}
<br />
@RESTALLBODYPARAM{edge-document,json,required}
A JSON representation of the edge document must be passed as the body of
the POST request. This JSON object may contain the edge's document key in
the *_key* attribute if needed.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
Creates a new edge in the collection identified by *collection* name.
<br />
@RESTQUERYPARAM{createCollection,boolean,optional}
If this parameter has a value of *true* or *yes*, then the collection is
created if it does not yet exist. Other values will be ignored so the
collection must be present for the operation to succeed.
<br />
**Note**: This flag is not supported in a cluster. Using it will result in an
error.
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until the edge document has been synced to disk.
<br />
@RESTQUERYPARAM{from,string,required}
The document handle of the start point must be passed in *from* handle.
<br />
@RESTQUERYPARAM{to,string,required}
The document handle of the end point must be passed in *to* handle.
<br />
@RESTDESCRIPTION
Creates a new edge document in the collection named *collection*. A JSON
representation of the document must be passed as the body of the POST
request.
<br />
The *from* and *to* handles are immutable once the edge has been created.
<br />
In all other respects the method works like *POST /document*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the edge was created successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the edge was created successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of an
edge, or if the collection specified is not an edge collection.
The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Create an edge and read it back:
<br />

<div id="RestEdgeCreateEdge_container">
<div id="RestEdgeCreateEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/edge/?collection=edges&from=vertices/1&to=vertices/2 &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Emil"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"740771969"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/edge/edges/<span class="hljs-number">740771969</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/740771969"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"740771969"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"740771969"</span> 
}
shell> curl --dump - http://localhost:8529/_api/edge/edges/740771969

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"740771969"</span>

{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Emil"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/740771969"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"740771969"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"740771969"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertices/1"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertices/2"</span> 
}
</pre>
</div>
<div id="RestEdgeCreateEdge_short" onclick="$('#RestEdgeCreateEdge_short').hide(); $('#RestEdgeCreateEdge_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/edge/?collection=edges&from=vertices/1&to=vertices/2 &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Emil"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"740771969"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/edge/edges/<span class="hljs-number">740771969</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgeHandler.cpp -->
@startDocuBlock API_EDGE_READ

@brief reads a single edge
<br />
@RESTHEADER{GET /_api/edge/{collection-name}/{document-key}, Read edge}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the edge collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the edge document.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-None-Match,string,optional}
If the "If-None-Match" header is given, then it must contain exactly one
etag. The edge is returned if it has a different revision than the
given etag. Otherwise an *HTTP 304* is returned.
<br />
@RESTHEADERPARAM{If-Match,string,optional}
If the "If-Match" header is given, then it must contain exactly one
etag. The edge is returned if it has the same revision ad the
given etag. Otherwise a *HTTP 412* is returned. As an alternative
you can supply the etag in an attribute *rev* in the URL.
<br />
@RESTDESCRIPTION
Returns the edge identified by *document-handle*. The returned
edge contains a few special attributes:
<br />
- *_id* contains the document handle
<br />
- *_rev* contains the revision
<br />
- *_from* and *to* contain the document handles of the connected
  vertex documents
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the edge was found
<br />
@RESTRETURNCODE{304}
is returned if the "If-None-Match" header is given and the edge has
the same version
<br />
@RESTRETURNCODE{404}
is returned if the edge or collection was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgeHandler.cpp -->
@startDocuBlock API_EDGE_READ_ALL

@brief reads all edges from collection
<br />
@RESTHEADER{GET /_api/edge, Read all edges from collection}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
Returns an array of all URIs for all edges from the collection identified
by *collection*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
All went good.
<br />
@RESTRETURNCODE{404}
The collection does not exist.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgeHandler.cpp -->
@startDocuBlock API_EDGE_READ_HEAD

@brief reads a single edge head
<br />
@RESTHEADER{HEAD /_api/edge/{collection-name}/{document-key}, Read edge header}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the edge collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the edge document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally fetch an edge document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-None-Match,string,optional}
If the "If-None-Match" header is given, then it must contain exactly one
etag. If the current document revision is different to the specified etag,
an *HTTP 200* response is returned. If the current document revision is
identical to the specified etag, then an *HTTP 304* is returned.
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally fetch an edge document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
Like *GET*, but only returns the header fields and not the body. You
can use this call to get the current revision of an edge document or check if
it was deleted.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the edge document was found
<br />
@RESTRETURNCODE{304}
is returned if the "If-None-Match" header is given and the edge document has
same version
<br />
@RESTRETURNCODE{404}
is returned if the edge document or collection was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *etag* header.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgeHandler.cpp -->
@startDocuBlock API_EDGE_REPLACE

@brief replaces an edge
<br />
@RESTHEADER{PUT /_api/edge/{collection-name}/{document-key},replaces an edge}
<br />
@RESTALLBODYPARAM{edge,json,required}
A JSON representation of the new edge data.
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the edge collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the edge document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until edge document has been synced to disk.
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally replace an edge document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTQUERYPARAM{policy,string,optional}
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter (see below).
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally replace an edge document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
Completely updates (i.e. replaces) the edge document identified by *document-handle*.
If the edge document exists and can be updated, then a *HTTP 201* is returned
and the "ETag" header field contains the new revision of the edge document.
<br />
If the new edge document passed in the body of the request contains the
*document-handle* in the attribute *_id* and the revision in *_rev*,
these attributes will be ignored. Only the URI and the "ETag" header are
relevant in order to avoid confusion when using proxies. 
**Note**: The attributes
*_from* and *_to* of an edge are immutable and cannot be updated either.
<br />
Optionally, the query parameter *waitForSync* can be used to force
synchronization of the edge document replacement operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* query parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* query parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
The body of the response contains a JSON object with the information about
the handle and the revision. The attribute *_id* contains the known
*document-handle* of the updated edge document, *_key* contains the key which 
uniquely identifies a document in a given collection, and the attribute *_rev*
contains the new document revision.
<br />
If the edge document does not exist, then a *HTTP 404* is returned and the
body of the response contains an error document.
<br />
There are two ways for specifying the targeted revision id for
conditional replacements (i.e. replacements that will only be executed if
the revision id found in the database matches the revision id specified
in the request):
- specifying the target revision in the *rev* URL query parameter
- specifying the target revision in the *if-match* HTTP header
<br />
Specifying a target revision is optional, however, if done, only one of the
described mechanisms must be used (either the *rev* query parameter or the
*if-match* HTTP header).
Regardless which mechanism is used, the parameter needs to contain the target
revision id as returned in the *_rev* attribute of an edge document or
by an HTTP *etag* header.
<br />
For example, to conditionally replace an edge document based on a specific revision
id, you can use the following request:
<br />
- PUT /_api/document/*collection-name*/*document-key*?rev=*etag*
<br />
If a target revision id is provided in the request (e.g. via the *etag* value
in the *rev* URL query parameter above), ArangoDB will check that
the revision id of the edge document found in the database is equal to the target
revision id provided in the request. If there is a mismatch between the revision
id, then by default a *HTTP 412* conflict is returned and no replacement is
performed.
<br />
The conditional update behavior can be overridden with the *policy* URL query parameter:
<br />
- PUT /_api/document/*collection-name*/*document-key*?policy=*policy*
<br />
If *policy* is set to *error*, then the behavior is as before: replacements
will fail if the revision id found in the database does not match the target
revision id specified in the request.
<br />
If *policy* is set to *last*, then the replacement will succeed, even if the
revision id found in the database does not match the target revision id specified
in the request. You can use the *last* *policy* to force replacements.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the edge document was replaced successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the edge document was replaced successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of an edge
document or if applied to a non-edge collection. The response body contains an
error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection or the edge document was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgeHandler.cpp -->
@startDocuBlock API_EDGE_UPDATES

@brief updates an edge
<br />
@RESTHEADER{PATCH /_api/edge/{collection-name}/{document-key}, Patches edge}
<br />
@RESTALLBODYPARAM{document,json,required}
A JSON representation of the edge update.
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the edge collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the edge document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{keepNull,boolean,optional}
If the intention is to delete existing attributes with the patch command,
the URL query parameter *keepNull* can be used with a value of *false*.
This will modify the behavior of the patch command to remove any attributes
from the existing edge document that are contained in the patch document with an
attribute value of *null*.
<br />
@RESTQUERYPARAM{mergeObjects,boolean,optional}
Controls whether objects (not arrays) will be merged if present in both the
existing and the patch edge. If set to *false*, the value in the
patch edge will overwrite the existing edge's value. If set to
*true*, objects will be merged. The default is *true*.
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until edge document has been synced to disk.
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally patch an edge document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTQUERYPARAM{policy,string,optional}
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally patch an edge document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
Partially updates the edge document identified by *document-handle*.
The body of the request must contain a JSON document with the attributes
to patch (the patch document). All attributes from the patch document will
be added to the existing edge document if they do not yet exist, and overwritten
in the existing edge document if they do exist there.
<br />
Setting an attribute value to *null* in the patch document will cause a
value of *null* be saved for the attribute by default.
<br />
**Note**: Internal attributes such as *_key*, *_from* and *_to* are immutable
once set and cannot be updated.
<br />
Optionally, the query parameter *waitForSync* can be used to force
synchronization of the edge document update operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* query parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* query parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
The body of the response contains a JSON object with the information about
the handle and the revision. The attribute *_id* contains the known
*document-handle* of the updated edge document, *_key* contains the key which 
uniquely identifies a document in a given collection, and the attribute *_rev*
contains the new document revision.
<br />
If the edge document does not exist, then a *HTTP 404* is returned and the
body of the response contains an error document.
<br />
You can conditionally update an edge document based on a target revision id by
using either the *rev* query parameter or the *if-match* HTTP header.
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter. This is the same as when replacing
edge documents (see replacing documents for details).
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the document was patched successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the document was patched successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation or when
applied on an non-edge collection. The response body contains an error document
in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection or the edge document was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgeHandler.cpp -->
@startDocuBlock API_EDGE_DELETE

@brief deletes an edge
<br />
@RESTHEADER{DELETE /_api/edge/{collection-name}/{document-key}, Deletes edge}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the edge collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the edge document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally delete an edge document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTQUERYPARAM{policy,string,optional}
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter. This is the same as when replacing edge
documents (see replacing edge documents for more details).
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until edge document has been synced to disk.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally delete an edge document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
The body of the response contains a JSON object with the information about
the handle and the revision. The attribute *_id* contains the known
*document-handle* of the deleted edge document, *_key* contains the key which 
uniquely identifies a document in a given collection, and the attribute *_rev*
contains the new document revision.
<br />
If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* query parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the edge document was deleted successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the edge document was deleted successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{404}
is returned if the collection or the edge document was not found.
The response body contains an error document in this case.
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestJobHandler.cpp -->
@startDocuBlock JSF_job_fetch_result

@brief fetches a job result and removes it from the queue
<br />
@RESTHEADER{PUT /_api/job/{job-id}, Return result of an async job}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{job-id,string,required}
The async job id.
<br />
@RESTDESCRIPTION
Returns the result of an async job identified by job-id. If the async job 
result is present on the server, the result will be removed from the list of
result. That means this method can be called for each job-id once.
The method will return the original job result's headers and body, plus the 
additional HTTP header x-arango-async-job-id. If this header is present, then 
the job was found and the response contains the original job's result. If 
the header is not present, the job was not found and the response contains 
status information from the job manager.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{204}
is returned if the job requested via job-id is still in the queue of pending 
(or not yet finished) jobs. In this case, no x-arango-async-id HTTP header 
will be returned.
<br />
@RESTRETURNCODE{400}
is returned if no job-id was specified in the request. In this case, 
no x-arango-async-id HTTP header will be returned.
<br />
@RESTRETURNCODE{404}
is returned if the job was not found or already deleted or fetched from 
the job result list. In this case, no x-arango-async-id HTTP header will 
be returned.
<br />
@EXAMPLES
Not providing a job-id:
<br />

<div id="JSF_job_fetch_result_01_container">
<div id="JSF_job_fetch_result_01_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/job

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"bad parameter"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">400</span> 
}
</pre>
</div>
<div id="JSF_job_fetch_result_01_short" onclick="$('#JSF_job_fetch_result_01_short').hide(); $('#JSF_job_fetch_result_01_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/job

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Providing a job-id for a non-existing job:
<br />

<div id="JSF_job_fetch_result_02_container">
<div id="JSF_job_fetch_result_02_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/job/notthere

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">404</span> 
}
</pre>
</div>
<div id="JSF_job_fetch_result_02_short" onclick="$('#JSF_job_fetch_result_02_short').hide(); $('#JSF_job_fetch_result_02_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/job/notthere

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Fetching the result of an HTTP GET job:
<br />

<div id="JSF_job_fetch_result_03_container">
<div id="JSF_job_fetch_result_03_long">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626542721

shell> curl -X PUT --dump - http://localhost:8529/_api/job/626542721

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
x-arango-<span class="hljs-keyword">async</span>-id: <span class="hljs-number">626542721</span>

{ 
  <span class="hljs-string">"server"</span> : <span class="hljs-string">"arango"</span>, 
  <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span> 
}
</pre>
</div>
</div>

<br />
Fetching the result of an HTTP POST job that failed:
<br />

<div id="JSF_job_fetch_result_04_container">
<div id="JSF_job_fetch_result_04_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --data-binary @- --dump - http://localhost:8529/_api/collection &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">" this name is invalid "</span> 
}
EOF

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626608257

shell> curl -X PUT --dump - http://localhost:8529/_api/job/626608257

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
x-arango-<span class="hljs-keyword">async</span>-id: <span class="hljs-number">626608257</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"expected PUT /_api/collection/&lt;collection-name&gt;/&lt;action&gt;"</span> 
}
</pre>
</div>
<div id="JSF_job_fetch_result_04_short" onclick="$('#JSF_job_fetch_result_04_short').hide(); $('#JSF_job_fetch_result_04_long').show();">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --data-binary @- --dump - http://localhost:8529/_api/collection &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">" this name is invalid "</span> 
}
EOF

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626608257

shell> curl -X PUT --dump - http://localhost:8529/_api/job/626608257

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
x-arango-<span class="hljs-keyword">async</span>-id: <span class="hljs-number">626608257</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestJobHandler.cpp -->
@startDocuBlock JSF_job_cancel

@brief cancels an async job
<br />
@RESTHEADER{PUT /_api/job/{job-id}/cancel, Cancel async job}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{job-id,string,required}
The async job id.
<br />
@RESTDESCRIPTION
Cancels the currently running job identified by job-id. Note that it still 
might take some time to actually cancel the running async job.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
cancel has been initiated.
<br />
@RESTRETURNCODE{400}
is returned if no job-id was specified in the request. In this case, 
no x-arango-async-id HTTP header will be returned.
<br />
@RESTRETURNCODE{404}
is returned if the job was not found or already deleted or fetched from 
the job result list. In this case, no x-arango-async-id HTTP header will 
be returned.
<br />
@EXAMPLES
<br />

<div id="JSF_job_cancel_container">
<div id="JSF_job_cancel_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --header 'x-arango-async: store' --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..10 FOR j IN 1..10 LET x = sleep(1.0) FILTER i == 5 &amp;&amp; j == 5 RETURN 42"</span> 
}
EOF

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 623003777

shell> curl --dump - http://localhost:8529/_api/job/pending

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  <span class="hljs-string">"623003777"</span> 
]
shell> curl -X PUT --dump - http://localhost:8529/_api/job/623003777/cancel

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span> 
}
shell> curl --dump - http://localhost:8529/_api/job/pending

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  <span class="hljs-string">"623003777"</span> 
]
</pre>
</div>
<div id="JSF_job_cancel_short" onclick="$('#JSF_job_cancel_short').hide(); $('#JSF_job_cancel_long').show();">
<pre>
shell> curl -X POST --header 'x-arango-async: store' --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..10 FOR j IN 1..10 LET x = sleep(1.0) FILTER i == 5 &amp;&amp; j == 5 RETURN 42"</span> 
}
EOF

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 623003777

shell> curl --dump - http://localhost:8529/_api/job/pending

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  <span class="hljs-string">"623003777"</span> 
]
shell> curl -X PUT --dump - http://localhost:8529/_api/job/623003777/cancel

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestJobHandler.cpp -->
@startDocuBlock JSF_job_getStatusById

@brief Returns the status of a specific job
<br />
@RESTHEADER{GET /_api/job/{job-id}, Returns async job}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{job-id,string,required}
The async job id.
<br />
@RESTDESCRIPTION
Returns the processing status of the specified job. The processing status can be 
determined by peeking into the HTTP response code of the response.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the job requested via job-id has been executed 
and its result is ready to fetch.
<br />
@RESTRETURNCODE{204}
is returned if the job requested via job-id is still in the queue of pending 
(or not yet finished) jobs.
<br />
@RESTRETURNCODE{404}
is returned if the job was not found or already deleted or fetched from the job result list.
<br />
@EXAMPLES
<br />
Querying the status of a done job:
<br />

<div id="JSF_job_getStatusById_01_container">
<div id="JSF_job_getStatusById_01_long">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626870401

shell> curl -X PUT --dump - http://localhost:8529/_api/job/626870401

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
x-arango-<span class="hljs-keyword">async</span>-id: <span class="hljs-number">626870401</span>

{ 
  <span class="hljs-string">"server"</span> : <span class="hljs-string">"arango"</span>, 
  <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span> 
}
</pre>
</div>
</div>

<br />
Querying the status of a pending job:
(we create a sleep job therefore...)
<br />

<div id="JSF_job_getStatusById_02_container">
<div id="JSF_job_getStatusById_02_long">
<pre>
shell> curl --header 'x-arango-async: store' --dump - http://localhost:8529/_admin/sleep?duration=30

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626935937

shell> curl --dump - http://localhost:8529/_api/job/626935937

HTTP/1.1 204 No Content
content-type: text/plain; charset=utf-8

</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestJobHandler.cpp -->
@startDocuBlock JSF_job_getByType

@brief Returns the ids of job results with a specific status
<br />
@RESTHEADER{GET /_api/job/{type}, Returns list of async jobs}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{type,string,required}
The type of jobs to return. The type can be either done or pending. Setting 
the type to done will make the method return the ids of already completed async 
jobs for which results can be fetched. Setting the type to pending will return 
the ids of not yet finished async jobs.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{count,number,optional}
<br />
The maximum number of ids to return per call. If not specified, a 
server-defined maximum value will be used.
<br />
@RESTDESCRIPTION
Returns the list of ids of async jobs with a specific status (either done or pending). 
The list can be used by the client to get an overview of the job system status and 
to retrieve completed job results later.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the list can be compiled successfully. Note: the list might be empty.
<br />
@RESTRETURNCODE{400}
is returned if type is not specified or has an invalid value.
<br />
@EXAMPLES
<br />
Fetching the list of done jobs:
<br />

<div id="JSF_job_getByType_01_container">
<div id="JSF_job_getByType_01_long">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626673793

shell> curl --dump - http://localhost:8529/_api/job/done

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  <span class="hljs-string">"626673793"</span> 
]
</pre>
</div>
</div>

<br />
Fetching the list of pending jobs:
<br />

<div id="JSF_job_getByType_02_container">
<div id="JSF_job_getByType_02_long">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626739329

shell> curl --dump - http://localhost:8529/_api/job/pending

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ ]
</pre>
</div>
</div>

<br />
Querying the status of a pending job:
(we create a sleep job therefore...)
<br />

<div id="JSF_job_getByType_03_container">
<div id="JSF_job_getByType_03_long">
<pre>
shell> curl --header 'x-arango-async: store' --dump - http://localhost:8529/_admin/sleep?duration=30

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626804865

shell> curl --dump - http://localhost:8529/_api/job/pending

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  <span class="hljs-string">"626804865"</span> 
]
shell> curl -X DELETE --dump - http://localhost:8529/_api/job/626804865

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span> 
}
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestJobHandler.cpp -->
@startDocuBlock JSF_job_delete

@brief deletes an async job result
<br />
@RESTHEADER{DELETE /_api/job/{type}, Deletes async job}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{type,string,required}
The type of jobs to delete. type can be:
* *all*: Deletes all jobs results. Currently executing or queued async 
  jobs will not be stopped by this call.
* *expired*: Deletes expired results. To determine the expiration status of a 
  result, pass the stamp query parameter. stamp needs to be a UNIX timestamp, 
  and all async job results created at a lower timestamp will be deleted.
* *an actual job-id*: In this case, the call will remove the result of the 
  specified async job. If the job is currently executing or queued, it will not be aborted.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{stamp, number, optional}
<br />
A UNIX timestamp specifying the expiration threshold when type is expired.
<br />
@RESTDESCRIPTION
Deletes either all job results, expired job results, or the result of a specific job. 
Clients can use this method to perform an eventual garbage collection of job results.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the deletion operation was carried out successfully. 
This code will also be returned if no results were deleted.
<br />
@RESTRETURNCODE{400}
is returned if type is not specified or has an invalid value.
<br />
@RESTRETURNCODE{404}
is returned if type is a job-id but no async job with the specified id was found.
<br />
@EXAMPLES
<br />
Deleting all jobs:
<br />

<div id="JSF_job_delete_01_container">
<div id="JSF_job_delete_01_long">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626346113

shell> curl -X DELETE --dump - http://localhost:8529/_api/job/all

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span> 
}
</pre>
</div>
</div>

<br />
Deleting expired jobs:
<br />

<div id="JSF_job_delete_02_container">
<div id="JSF_job_delete_02_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626411649

shell> curl --dump - http://localhost:8529/_admin/time

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"time"</span> : <span class="hljs-number">1468399061.08858</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
shell> curl -X DELETE --dump - http://localhost:8529/_api/job/expired?stamp=1468399061.08858

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span> 
}
shell> curl --dump - http://localhost:8529/_api/job/pending

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ ]
</pre>
</div>
<div id="JSF_job_delete_02_short" onclick="$('#JSF_job_delete_02_short').hide(); $('#JSF_job_delete_02_long').show();">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626411649

shell> curl --dump - http://localhost:8529/_admin/time

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Deleting the result of a specific job:
<br />

<div id="JSF_job_delete_03_container">
<div id="JSF_job_delete_03_long">
<pre>
shell> curl -X PUT --header 'x-arango-async: store' --dump - http://localhost:8529/_api/version

HTTP/1.1 202 Accepted
content-type: text/plain; charset=utf-8
x-arango-async-id: 626477185

shell> curl -X DELETE --dump - http://localhost:8529/_api/job/626477185

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span> 
}
</pre>
</div>
</div>

<br />
Deleting the result of a non-existing job:
<br />

<div id="JSF_job_delete_04_container">
<div id="JSF_job_delete_04_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/job/AreYouThere

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">404</span> 
}
</pre>
</div>
<div id="JSF_job_delete_04_short" onclick="$('#JSF_job_delete_04_short').hide(); $('#JSF_job_delete_04_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/job/AreYouThere

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestExportHandler.cpp -->
@startDocuBlock JSF_post_api_export

@brief export all documents from a collection, using a cursor
<br />
@RESTHEADER{POST /_api/export, Create export cursor}
<br />
@RESTBODYPARAM{flush,boolean,required,}
if set to *true*, a WAL flush operation will be executed prior to the
export. The flush operation will start copying documents from the WAL to the
collection's datafiles. There will be an additional wait time of up
to *flushWait* seconds after the flush to allow the WAL collector to change 
the adjusted document meta-data to point into the datafiles, too. 
The default value is *false* (i.e. no flush) so most recently inserted or updated
documents from the collection might be missing in the export.
<br />
@RESTBODYPARAM{flushWait,integer,required,int64}
maximum wait time in seconds after a flush operation. The default
value is 10. This option only has an effect when *flush* is set to *true*.
<br />
@RESTBODYPARAM{count,boolean,required,}
boolean flag that indicates whether the number of documents
in the result set should be returned in the "count" attribute of the result (optional).
Calculating the "count" attribute might in the future have a performance
impact so this option is turned off by default, and "count" is only returned 
when requested.
<br />
@RESTBODYPARAM{batchSize,integer,required,int64}
maximum number of result documents to be transferred from
the server to the client in one roundtrip (optional). If this attribute is
not set, a server-controlled default value will be used.
<br />
@RESTBODYPARAM{limit,integer,required,int64}
an optional limit value, determining the maximum number of documents to
be included in the cursor. Omitting the *limit* attribute or setting it to 0 will
lead to no limit being used. If a limit is used, it is undefined which documents
from the collection will be included in the export and which will be excluded. 
This is because there is no natural order of documents in a collection.
<br />
@RESTBODYPARAM{ttl,integer,required,int64}
an optional time-to-live for the cursor (in seconds). The cursor will be
removed on the server automatically after the specified amount of time. This
is useful to ensure garbage collection of cursors that are not fully fetched
by clients. If not set, a server-defined value will be used.
<br />
@RESTBODYPARAM{restrict,object,optional,JSF_post_api_export_restrictions}
an object containing an array of attribute names that will be 
included or excluded when returning result documents.
<br />
Not specifying *restrict* will by default return all attributes of each document.
<br />
@RESTSTRUCT{type,JSF_post_api_export_restrictions,string,required,string}
has to be be set to either *include* or *exclude* depending on which you want to use
<br />
@RESTSTRUCT{fields,JSF_post_api_export_restrictions,array,required,string}
Contains an array of attribute names to *include* or *exclude*. Matching of attribute names
for *inclusion* or *exclusion* will be done on the top level only.
Specifying names of nested attributes is not supported at the moment.
<br />
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The name of the collection to export.
<br />
@RESTDESCRIPTION
A call to this method creates a cursor containing all documents in the 
specified collection. In contrast to other data-producing APIs, the internal
data structures produced by the export API are more lightweight, so it is
the preferred way to retrieve all documents from a collection.
<br />
Documents are returned in a similar manner as in the `/_api/cursor` REST API. 
If all documents of the collection fit into the first batch, then no cursor
will be created, and the result object's *hasMore* attribute will be set to
*false*. If not all documents fit into the first batch, then the result 
object's *hasMore* attribute will be set to *true*, and the *id* attribute
of the result will contain a cursor id.
<br />
The order in which the documents are returned is not specified.
<br />
By default, only those documents from the collection will be returned that are
stored in the collection's datafiles. Documents that are present in the write-ahead
log (WAL) at the time the export is run will not be exported.
<br />
To export these documents as well, the caller can issue a WAL flush request
before calling the export API or set the *flush* attribute. Setting the *flush*
option will trigger a WAL flush before the export so documents get copied from 
the WAL to the collection datafiles.
<br />
If the result set can be created by the server, the server will respond with
*HTTP 201*. The body of the response will contain a JSON object with the
result set.
<br />
The returned JSON object has the following properties:
<br />
- *error*: boolean flag to indicate that an error occurred (*false*
  in this case)
<br />
- *code*: the HTTP status code
<br />
- *result*: an array of result documents (might be empty if the collection was empty)
<br />
- *hasMore*: a boolean indicator whether there are more results
  available for the cursor on the server
<br />
- *count*: the total number of result documents available (only
  available if the query was executed with the *count* attribute set)
<br />
- *id*: id of temporary cursor created on the server (optional, see above)
<br />
If the JSON representation is malformed or the query specification is
missing from the request, the server will respond with *HTTP 400*.
<br />
The body of the response will contain a JSON object with additional error
details. The object has the following attributes:
<br />
- *error*: boolean flag to indicate that an error occurred (*true* in this case)
<br />
- *code*: the HTTP status code
<br />
- *errorNum*: the server error number
<br />
- *errorMessage*: a descriptive error message
<br />
Clients should always delete an export cursor result as early as possible because a
lingering export cursor will prevent the underlying collection from being
compacted or unloaded. By default, unused cursors will be deleted automatically 
after a server-defined idle time, and clients can adjust this idle time by setting
the *ttl* value.
<br />
Note: this API is currently not supported on cluster coordinators.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the result set can be created by the server.
<br />
@RESTRETURNCODE{400}
is returned if the JSON representation is malformed or the query specification is
missing from the request.
<br />
@RESTRETURNCODE{404}
The server will respond with *HTTP 404* in case a non-existing collection is
accessed in the query.
<br />
@RESTRETURNCODE{405}
The server will respond with *HTTP 405* if an unsupported HTTP method is used.
<br />
@RESTRETURNCODE{501}
The server will respond with *HTTP 501* if this API is called on a cluster
coordinator.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
@startDocuBlock REST_DOCUMENT_CREATE

@brief creates a document
<br />
@RESTHEADER{POST /_api/document,Create document}
<br />
@RESTALLBODYPARAM{document,json,required}
A JSON representation of the document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
@RESTQUERYPARAM{createCollection,boolean,optional}
If this parameter has a value of *true* or *yes*, then the collection is
created if it does not yet exist. Other values will be ignored so the
collection must be present for the operation to succeed.
<br />
**Note**: this flag is not supported in a cluster. Using it will result in an
error.
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until document has been synced to disk.
<br />
@RESTDESCRIPTION
Creates a new document in the collection named *collection*.  A JSON
representation of the document must be passed as the body of the POST
request.
<br />
If the document was created successfully, then the "Location" header
contains the path to the newly created document. The "ETag" header field
contains the revision of the document.
<br />
The body of the response contains a JSON object with the following
attributes:
<br />
- *_id* contains the document handle of the newly created document
- *_key* contains the document key
- *_rev* contains the document revision
<br />
If the collection parameter *waitForSync* is *false*, then the call returns
as soon as the document has been accepted. It will not wait until the
document has been synced to disk.
<br />
Optionally, the query parameter *waitForSync* can be used to force
synchronization of the document creation operation to disk even in case that
the *waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* query parameter can be used to force synchronization of just
this specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to *false*,
then the collection's default *waitForSync* behavior is applied. The
*waitForSync* query parameter cannot be used to disable synchronization for
collections that have a default *waitForSync* value of *true*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the document was created successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the document was created successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
document. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Create a document in a collection named *products*. Note that the
revision identifier might or might not by equal to the auto-generated
key.
<br />

<div id="RestDocumentHandlerPostCreate1_container">
<div id="RestDocumentHandlerPostCreate1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727861377"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727861377</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/727861377"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"727861377"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"727861377"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostCreate1_short" onclick="$('#RestDocumentHandlerPostCreate1_short').hide(); $('#RestDocumentHandlerPostCreate1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727861377"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727861377</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Create a document in a collection named *products* with a collection-level
*waitForSync* value of *false*.
<br />

<div id="RestDocumentHandlerPostAccept1_container">
<div id="RestDocumentHandlerPostAccept1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727337089"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727337089</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/727337089"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"727337089"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"727337089"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostAccept1_short" onclick="$('#RestDocumentHandlerPostAccept1_short').hide(); $('#RestDocumentHandlerPostAccept1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727337089"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727337089</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Create a document in a collection with a collection-level *waitForSync*
value of *false*, but using the *waitForSync* query parameter.
<br />

<div id="RestDocumentHandlerPostWait1_container">
<div id="RestDocumentHandlerPostWait1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&waitForSync=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728909953"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728909953</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/728909953"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"728909953"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"728909953"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostWait1_short" onclick="$('#RestDocumentHandlerPostWait1_short').hide(); $('#RestDocumentHandlerPostWait1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&waitForSync=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728909953"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728909953</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Create a document in a new, named collection
<br />

<div id="RestDocumentHandlerPostCreate2_container">
<div id="RestDocumentHandlerPostCreate2_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&createCollection=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728385665"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728385665</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/728385665"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"728385665"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"728385665"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostCreate2_short" onclick="$('#RestDocumentHandlerPostCreate2_short').hide(); $('#RestDocumentHandlerPostCreate2_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&createCollection=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728385665"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728385665</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Unknown collection name
<br />

<div id="RestDocumentHandlerPostUnknownCollection1_container">
<div id="RestDocumentHandlerPostUnknownCollection1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'products' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostUnknownCollection1_short" onclick="$('#RestDocumentHandlerPostUnknownCollection1_short').hide(); $('#RestDocumentHandlerPostUnknownCollection1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Illegal document
<br />

<div id="RestDocumentHandlerPostBadJson1_container">
<div id="RestDocumentHandlerPostBadJson1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ 1: "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"expecting attribute name"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">600</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostBadJson1_short" onclick="$('#RestDocumentHandlerPostBadJson1_short').hide(); $('#RestDocumentHandlerPostBadJson1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ 1: "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock 


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
@startDocuBlock REST_DOCUMENT_READ

@brief reads a single document
<br />
@RESTHEADER{GET /_api/document/{collection-name}/{document-key},Read document}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the document.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-None-Match,string,optional}
If the "If-None-Match" header is given, then it must contain exactly one
etag. The document is returned, if it has a different revision than the
given etag. Otherwise an *HTTP 304* is returned.
<br />
@RESTHEADERPARAM{If-Match,string,optional}
If the "If-Match" header is given, then it must contain exactly one
etag. The document is returned, if it has the same revision as the
given etag. Otherwise a *HTTP 412* is returned. As an alternative
you can supply the etag in an attribute *rev* in the URL.
<br />
@RESTDESCRIPTION
Returns the document identified by *document-handle*. The returned
document contains three special attributes: *_id* containing the document
handle, *_key* containing key which uniquely identifies a document
in a given collection and *_rev* containing the revision.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the document was found
<br />
@RESTRETURNCODE{304}
is returned if the "If-None-Match" header is given and the document has
the same version
<br />
@RESTRETURNCODE{404}
is returned if the document or collection was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
<br />
@EXAMPLES
<br />
Use a document handle:
<br />

<div id="RestDocumentHandlerReadDocument_container">
<div id="RestDocumentHandlerReadDocument_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/729434241

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"729434241"</span>

{ 
  <span class="hljs-string">"hello"</span> : <span class="hljs-string">"world"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/729434241"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"729434241"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"729434241"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocument_short" onclick="$('#RestDocumentHandlerReadDocument_short').hide(); $('#RestDocumentHandlerReadDocument_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/729434241

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"729434241"</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Use a document handle and an etag:
<br />

<div id="RestDocumentHandlerReadDocumentIfNoneMatch_container">
<div id="RestDocumentHandlerReadDocumentIfNoneMatch_long">
<pre>
shell> curl --header 'If-None-Match: "733104257"' --dump - http://localhost:8529/_api/document/products/733104257

</pre>
</div>
</div>

<br />
Unknown document handle:
<br />

<div id="RestDocumentHandlerReadDocumentUnknownHandle_container">
<div id="RestDocumentHandlerReadDocumentUnknownHandle_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/unknownhandle

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'products' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentUnknownHandle_short" onclick="$('#RestDocumentHandlerReadDocumentUnknownHandle_short').hide(); $('#RestDocumentHandlerReadDocumentUnknownHandle_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/unknownhandle

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
@startDocuBlock REST_DOCUMENT_READ_ALL

@brief reads all documents from collection
<br />
@RESTHEADER{GET /_api/document,Read all documents}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The name of the collection.
<br />
@RESTQUERYPARAM{type,string,optional}
The type of the result. The following values are allowed:
<br />
- *id*: returns an array of document ids (*_id* attributes)
- *key*: returns an array of document keys (*_key* attributes)
- *path*: returns an array of document URI paths. This is the default.
<br />
@RESTDESCRIPTION
Returns an array of all keys, ids, or URI paths for all documents in the 
collection identified by *collection*. The type of the result array is
determined by the *type* attribute.
<br />
Note that the results have no defined order and thus the order should
not be relied on.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
All went good.
<br />
@RESTRETURNCODE{404}
The collection does not exist.
<br />
@EXAMPLES
<br />
Return all document paths
<br />

<div id="RestDocumentHandlerReadDocumentAllPath_container">
<div id="RestDocumentHandlerReadDocumentAllPath_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"documents"</span> : [ 
    <span class="hljs-string">"/_db/_system/_api/document/products/731924609"</span>, 
    <span class="hljs-string">"/_db/_system/_api/document/products/731269249"</span>, 
    <span class="hljs-string">"/_db/_system/_api/document/products/731596929"</span> 
  ] 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentAllPath_short" onclick="$('#RestDocumentHandlerReadDocumentAllPath_short').hide(); $('#RestDocumentHandlerReadDocumentAllPath_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Return all document keys
<br />

<div id="RestDocumentHandlerReadDocumentAllKey_container">
<div id="RestDocumentHandlerReadDocumentAllKey_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products&type=key

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"documents"</span> : [ 
    <span class="hljs-string">"730679425"</span>, 
    <span class="hljs-string">"730351745"</span>, 
    <span class="hljs-string">"730024065"</span> 
  ] 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentAllKey_short" onclick="$('#RestDocumentHandlerReadDocumentAllKey_short').hide(); $('#RestDocumentHandlerReadDocumentAllKey_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products&type=key

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Collection does not exist
<br />

<div id="RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_container">
<div id="RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=doesnotexist

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'doesnotexist' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_short" onclick="$('#RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_short').hide(); $('#RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=doesnotexist

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
@startDocuBlock REST_DOCUMENT_READ_HEAD

@brief reads a single document head
<br />
@RESTHEADER{HEAD /_api/document/{collection-name}/{document-key},Read document header}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally fetch a document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-None-Match,string,optional}
If the "If-None-Match" header is given, then it must contain exactly one
etag. If the current document revision is different to the specified etag,
an *HTTP 200* response is returned. If the current document revision is
identical to the specified etag, then an *HTTP 304* is returned.
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally fetch a document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
Like *GET*, but only returns the header fields and not the body. You
can use this call to get the current revision of a document or check if
the document was deleted.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the document was found
<br />
@RESTRETURNCODE{304}
is returned if the "If-None-Match" header is given and the document has
same version
///*
@RESTRETURNCODE{404}
is returned if the document or collection was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *etag* header.
<br />
@EXAMPLES
<br />

<div id="RestDocumentHandlerReadDocumentHead_container">
<div id="RestDocumentHandlerReadDocumentHead_long">
<pre>
shell> curl -X HEAD --dump - http://localhost:8529/_api/document/products/732514433

</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
<br />
@brief document request handler
<br />
@file
<br />
DISCLAIMER
<br />
Copyright 2014 ArangoDB GmbH, Cologne, Germany
Copyright 2004-2014 triAGENS GmbH, Cologne, Germany
<br />
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<br />
    http://www.apache.org/licenses/LICENSE-2.0
<br />
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
<br />
Copyright holder is ArangoDB GmbH, Cologne, Germany
<br />
@author Dr. Frank Celler
@author Copyright 2014, ArangoDB GmbH, Cologne, Germany
@author Copyright 2010-2014, triAGENS GmbH, Cologne, Germany
<br />

#include "RestDocumentHandler.h"

#include "Basics/StringUtils.h"
#include "Basics/conversions.h"
#include "Basics/json.h"
#include "Basics/string-buffer.h"
#include "Basics/json-utilities.h"
#include "Cluster/ServerState.h"
#include "Cluster/ClusterInfo.h"
#include "Cluster/ClusterComm.h"
#include "Cluster/ClusterMethods.h"
#include "Rest/HttpRequest.h"
#include "VocBase/document-collection.h"
#include "VocBase/vocbase.h"

using namespace std;
using namespace triagens::basics;
using namespace triagens::rest;
using namespace triagens::arango;

// -----------------------------------------------------------------------------
// --SECTION--                                      constructors and destructors
// -----------------------------------------------------------------------------

<br />
@brief constructor
<br />

RestDocumentHandler::RestDocumentHandler (HttpRequest* request)
  : RestVocbaseBaseHandler(request) {
}

// -----------------------------------------------------------------------------
// --SECTION--                                                   Handler methods
// -----------------------------------------------------------------------------

<br />
{@inheritDoc}
<br />

HttpHandler::status_t RestDocumentHandler::execute () {
  // extract the sub-request type
  HttpRequest::HttpRequestType type = _request->requestType();

  // execute one of the CRUD methods
  switch (type) {
    case HttpRequest::HTTP_REQUEST_DELETE: deleteDocument(); break;
    case HttpRequest::HTTP_REQUEST_GET:    readDocument(); break;
    case HttpRequest::HTTP_REQUEST_HEAD:   checkDocument(); break;
    case HttpRequest::HTTP_REQUEST_POST:   createDocument(); break;
    case HttpRequest::HTTP_REQUEST_PUT:    replaceDocument(); break;
    case HttpRequest::HTTP_REQUEST_PATCH:  updateDocument(); break;

    case HttpRequest::HTTP_REQUEST_ILLEGAL:
    default: {
      generateNotImplemented("ILLEGAL " + DOCUMENT_PATH);
      break;
    }
  }

  // this handler is done
  return status_t(HANDLER_DONE);
}

// -----------------------------------------------------------------------------
// --SECTION--                                                 protected methods
// -----------------------------------------------------------------------------

<br />
@startDocuBlock REST_DOCUMENT_CREATE

@brief creates a document
<br />
@RESTHEADER{POST /_api/document,Create document}
<br />
@RESTALLBODYPARAM{document,json,required}
A JSON representation of the document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
@RESTQUERYPARAM{createCollection,boolean,optional}
If this parameter has a value of *true* or *yes*, then the collection is
created if it does not yet exist. Other values will be ignored so the
collection must be present for the operation to succeed.
<br />
**Note**: this flag is not supported in a cluster. Using it will result in an
error.
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until document has been synced to disk.
<br />
@RESTDESCRIPTION
Creates a new document in the collection named *collection*.  A JSON
representation of the document must be passed as the body of the POST
request.
<br />
If the document was created successfully, then the "Location" header
contains the path to the newly created document. The "ETag" header field
contains the revision of the document.
<br />
The body of the response contains a JSON object with the following
attributes:
<br />
- *_id* contains the document handle of the newly created document
- *_key* contains the document key
- *_rev* contains the document revision
<br />
If the collection parameter *waitForSync* is *false*, then the call returns
as soon as the document has been accepted. It will not wait until the
document has been synced to disk.
<br />
Optionally, the query parameter *waitForSync* can be used to force
synchronization of the document creation operation to disk even in case that
the *waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* query parameter can be used to force synchronization of just
this specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to *false*,
then the collection's default *waitForSync* behavior is applied. The
*waitForSync* query parameter cannot be used to disable synchronization for
collections that have a default *waitForSync* value of *true*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the document was created successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the document was created successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
document. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Create a document in a collection named *products*. Note that the
revision identifier might or might not by equal to the auto-generated
key.
<br />

<div id="RestDocumentHandlerPostCreate1_container">
<div id="RestDocumentHandlerPostCreate1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727861377"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727861377</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/727861377"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"727861377"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"727861377"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostCreate1_short" onclick="$('#RestDocumentHandlerPostCreate1_short').hide(); $('#RestDocumentHandlerPostCreate1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727861377"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727861377</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Create a document in a collection named *products* with a collection-level
*waitForSync* value of *false*.
<br />

<div id="RestDocumentHandlerPostAccept1_container">
<div id="RestDocumentHandlerPostAccept1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727337089"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727337089</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/727337089"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"727337089"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"727337089"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostAccept1_short" onclick="$('#RestDocumentHandlerPostAccept1_short').hide(); $('#RestDocumentHandlerPostAccept1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"727337089"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">727337089</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Create a document in a collection with a collection-level *waitForSync*
value of *false*, but using the *waitForSync* query parameter.
<br />

<div id="RestDocumentHandlerPostWait1_container">
<div id="RestDocumentHandlerPostWait1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&waitForSync=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728909953"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728909953</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/728909953"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"728909953"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"728909953"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostWait1_short" onclick="$('#RestDocumentHandlerPostWait1_short').hide(); $('#RestDocumentHandlerPostWait1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&waitForSync=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728909953"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728909953</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Create a document in a new, named collection
<br />

<div id="RestDocumentHandlerPostCreate2_container">
<div id="RestDocumentHandlerPostCreate2_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&createCollection=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728385665"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728385665</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/728385665"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"728385665"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"728385665"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostCreate2_short" onclick="$('#RestDocumentHandlerPostCreate2_short').hide(); $('#RestDocumentHandlerPostCreate2_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&createCollection=true &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"728385665"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">728385665</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Unknown collection name
<br />

<div id="RestDocumentHandlerPostUnknownCollection1_container">
<div id="RestDocumentHandlerPostUnknownCollection1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'products' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostUnknownCollection1_short" onclick="$('#RestDocumentHandlerPostUnknownCollection1_short').hide(); $('#RestDocumentHandlerPostUnknownCollection1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ "Hello": "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Illegal document
<br />

<div id="RestDocumentHandlerPostBadJson1_container">
<div id="RestDocumentHandlerPostBadJson1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ 1: "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"expecting attribute name"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">600</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPostBadJson1_short" onclick="$('#RestDocumentHandlerPostBadJson1_short').hide(); $('#RestDocumentHandlerPostBadJson1_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF
{ 1: "World" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock 

<br />

bool RestDocumentHandler::createDocument () {
  vector<string> const& suffix = _request->suffix();

  if (! suffix.empty()) {
    generateError(HttpResponse::BAD,
                  TRI_ERROR_HTTP_SUPERFLUOUS_SUFFICES,
                  "superfluous suffix, expecting " + DOCUMENT_PATH + "?collection=<identifier>");
    return false;
  }

  // extract the cid
  bool found;
  char const* collection = _request->value("collection", found);

  if (! found || *collection == '\0') {
    generateError(HttpResponse::BAD,
                  TRI_ERROR_ARANGO_COLLECTION_PARAMETER_MISSING,
                  "'collection' is missing, expecting " + DOCUMENT_PATH + "?collection=<identifier>");
    return false;
  }

  bool const waitForSync = extractWaitForSync();

  std::unique_ptr<TRI_json_t> json(parseJsonBody());

  if (json == nullptr) {
    return false;
  }

  if (json->_type != TRI_JSON_OBJECT) {
    generateTransactionError(collection, TRI_ERROR_ARANGO_DOCUMENT_TYPE_INVALID);
    return false;
  }

  if (ServerState::instance()->isCoordinator()) {
    // json will be freed inside!
    return createDocumentCoordinator(collection, waitForSync, json.release());
  }

  if (! checkCreateCollection(collection, getCollectionType())) {
    return false;
  }

  // find and load collection given by name or identifier
  SingleCollectionWriteTransaction<1> trx(new StandaloneTransactionContext(), _vocbase, collection);

  // .............................................................................
  // inside write transaction
  // .............................................................................

  int res = trx.begin();

  if (res != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collection, res);
    return false;
  }

  if (trx.documentCollection()->_info._type != TRI_COL_TYPE_DOCUMENT) {
    // check if we are inserting with the DOCUMENT handler into a non-DOCUMENT collection
    generateError(HttpResponse::BAD, TRI_ERROR_ARANGO_COLLECTION_TYPE_INVALID);
    return false;
  }

  TRI_voc_cid_t const cid = trx.cid();

  TRI_doc_mptr_copy_t mptr;
  res = trx.createDocument(&mptr, json.get(), waitForSync);
  res = trx.finish(res);

  // .............................................................................
  // outside write transaction
  // .............................................................................

  if (res != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collection, res);
    return false;
  }

  generateSaved(trx, cid, mptr);

  return true;
}

<br />
@brief creates a document, coordinator case in a cluster
<br />

bool RestDocumentHandler::createDocumentCoordinator (char const* collection,
                                                     bool waitForSync,
                                                     TRI_json_t* json) {
  string const& dbname = _request->databaseName();
  string const collname(collection);
  triagens::rest::HttpResponse::HttpResponseCode responseCode;
  map<string, string> headers = triagens::arango::getForwardableRequestHeaders(_request);
  map<string, string> resultHeaders;
  string resultBody;

  int res = triagens::arango::createDocumentOnCoordinator(
            dbname, collname, waitForSync, json, headers,
            responseCode, resultHeaders, resultBody);

  if (res != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collection, res);
    return false;
  }

  // Essentially return the response we got from the DBserver, be it
  // OK or an error:
  _response = createResponse(responseCode);
  triagens::arango::mergeResponseHeaders(_response, resultHeaders);
  _response->body().appendText(resultBody.c_str(), resultBody.size());
  return responseCode >= triagens::rest::HttpResponse::BAD;
}

<br />
@brief reads a single or all documents
<br />
Either readSingleDocument or readAllDocuments.
<br />

bool RestDocumentHandler::readDocument () {
  const size_t len = _request->suffix().size();

  switch (len) {
    case 0:
      return readAllDocuments();

    case 1:
      generateError(HttpResponse::BAD,
                    TRI_ERROR_ARANGO_DOCUMENT_HANDLE_BAD,
                    "expecting GET /_api/document/<collection-name>/<document-key>");
      return false;

    case 2:
      return readSingleDocument(true);

    default:
      generateError(HttpResponse::BAD,
                    TRI_ERROR_HTTP_SUPERFLUOUS_SUFFICES,
                    "expecting GET /_api/document/<collection-name>/<document-key> or GET /_api/document?collection=<collection-name>");
      return false;
  }
}

<br />
@startDocuBlock REST_DOCUMENT_READ

@brief reads a single document
<br />
@RESTHEADER{GET /_api/document/{collection-name}/{document-key},Read document}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the document.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-None-Match,string,optional}
If the "If-None-Match" header is given, then it must contain exactly one
etag. The document is returned, if it has a different revision than the
given etag. Otherwise an *HTTP 304* is returned.
<br />
@RESTHEADERPARAM{If-Match,string,optional}
If the "If-Match" header is given, then it must contain exactly one
etag. The document is returned, if it has the same revision as the
given etag. Otherwise a *HTTP 412* is returned. As an alternative
you can supply the etag in an attribute *rev* in the URL.
<br />
@RESTDESCRIPTION
Returns the document identified by *document-handle*. The returned
document contains three special attributes: *_id* containing the document
handle, *_key* containing key which uniquely identifies a document
in a given collection and *_rev* containing the revision.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the document was found
<br />
@RESTRETURNCODE{304}
is returned if the "If-None-Match" header is given and the document has
the same version
<br />
@RESTRETURNCODE{404}
is returned if the document or collection was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
<br />
@EXAMPLES
<br />
Use a document handle:
<br />

<div id="RestDocumentHandlerReadDocument_container">
<div id="RestDocumentHandlerReadDocument_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/729434241

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"729434241"</span>

{ 
  <span class="hljs-string">"hello"</span> : <span class="hljs-string">"world"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/729434241"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"729434241"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"729434241"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocument_short" onclick="$('#RestDocumentHandlerReadDocument_short').hide(); $('#RestDocumentHandlerReadDocument_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/729434241

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"729434241"</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Use a document handle and an etag:
<br />

<div id="RestDocumentHandlerReadDocumentIfNoneMatch_container">
<div id="RestDocumentHandlerReadDocumentIfNoneMatch_long">
<pre>
shell> curl --header 'If-None-Match: "733104257"' --dump - http://localhost:8529/_api/document/products/733104257

</pre>
</div>
</div>

<br />
Unknown document handle:
<br />

<div id="RestDocumentHandlerReadDocumentUnknownHandle_container">
<div id="RestDocumentHandlerReadDocumentUnknownHandle_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/unknownhandle

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'products' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentUnknownHandle_short" onclick="$('#RestDocumentHandlerReadDocumentUnknownHandle_short').hide(); $('#RestDocumentHandlerReadDocumentUnknownHandle_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/unknownhandle

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock

<br />

bool RestDocumentHandler::readSingleDocument (bool generateBody) {
  vector<string> const& suffix = _request->suffix();

  // split the document reference
  string const& collection = suffix[0];
  string const& key = suffix[1];

  // check for an etag
  bool isValidRevision;
  TRI_voc_rid_t const ifNoneRid = extractRevision("if-none-match", 0, isValidRevision);
  if (! isValidRevision) {
    generateError(HttpResponse::BAD,
                  TRI_ERROR_HTTP_BAD_PARAMETER,
                  "invalid revision number");
    return false;
  }

  TRI_voc_rid_t const ifRid = extractRevision("if-match", "rev", isValidRevision);
  if (! isValidRevision) {
    generateError(HttpResponse::BAD,
                  TRI_ERROR_HTTP_BAD_PARAMETER,
                  "invalid revision number");
    return false;
  }

  if (ServerState::instance()->isCoordinator()) {
    return getDocumentCoordinator(collection, key, generateBody);
  }

  // find and load collection given by name or identifier
  SingleCollectionReadOnlyTransaction trx(new StandaloneTransactionContext(), _vocbase, collection);

  // .............................................................................
  // inside read transaction
  // .............................................................................

  int res = trx.begin();
  if (res != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collection, res);
    return false;
  }

  TRI_voc_cid_t const cid = trx.cid();
  // If we are a DBserver, we want to use the cluster-wide collection
  // name for error reporting:
  string collectionName = collection;
  if (ServerState::instance()->isDBServer()) {
    collectionName = trx.resolver()->getCollectionName(cid);
  }
  TRI_doc_mptr_copy_t mptr;

  res = trx.read(&mptr, key);

  TRI_document_collection_t* document = trx.documentCollection();
  TRI_ASSERT(document != nullptr);
  auto shaper = document->getShaper();  // PROTECTED by trx here

  res = trx.finish(res);

  // .............................................................................
  // outside read transaction
  // .............................................................................

  TRI_ASSERT(trx.hasDitch());

  if (res != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collectionName, res, (TRI_voc_key_t) key.c_str());
    return false;
  }

  if (mptr.getDataPtr() == nullptr) {   // PROTECTED by trx here
    generateDocumentNotFound(trx, cid, (TRI_voc_key_t) key.c_str());
    return false;
  }

  // generate result
  TRI_voc_rid_t const rid = mptr._rid;

  if (ifNoneRid == 0) {
    if (ifRid == 0 || ifRid == rid) {
      generateDocument(trx, cid, mptr, shaper, generateBody);
    }
    else {
      generatePreconditionFailed(trx, cid, mptr, rid);
    }
  }
  else if (ifNoneRid == rid) {
    if (ifRid == 0 || ifRid == rid) {
      generateNotModified(rid);
    }
    else {
      generatePreconditionFailed(trx, cid, mptr, rid);
    }
  }
  else {
    if (ifRid == 0 || ifRid == rid) {
      generateDocument(trx, cid, mptr, shaper, generateBody);
    }
    else {
      generatePreconditionFailed(trx, cid, mptr, rid);
    }
  }

  return true;
}

<br />
@brief reads a single a document, coordinator case in a cluster
<br />

bool RestDocumentHandler::getDocumentCoordinator (
                              string const& collname,
                              string const& key,
                              bool generateBody) {
  string const& dbname = _request->databaseName();
  triagens::rest::HttpResponse::HttpResponseCode responseCode;
  map<string, string> headers = triagens::arango::getForwardableRequestHeaders(_request);
  map<string, string> resultHeaders;
  string resultBody;

  // TODO: check if this is ok
  TRI_voc_rid_t rev = 0;
  bool found;
  char const* revstr = _request->value("rev", found);
  if (found) {
    rev = StringUtils::uint64(revstr);
  }

  int error = triagens::arango::getDocumentOnCoordinator(
            dbname, collname, key, rev, headers, generateBody,
            responseCode, resultHeaders, resultBody);

  if (error != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collname, error);
    return false;
  }
  // Essentially return the response we got from the DBserver, be it
  // OK or an error:
  _response = createResponse(responseCode);
  triagens::arango::mergeResponseHeaders(_response, resultHeaders);
  
  if (! generateBody) {
    // a head request...
    _response->headResponse((size_t) StringUtils::uint64(resultHeaders["content-length"]));
  }
  else {
    _response->body().appendText(resultBody.c_str(), resultBody.size());
  }
  return responseCode >= triagens::rest::HttpResponse::BAD;
}

<br />
@startDocuBlock REST_DOCUMENT_READ_ALL

@brief reads all documents from collection
<br />
@RESTHEADER{GET /_api/document,Read all documents}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The name of the collection.
<br />
@RESTQUERYPARAM{type,string,optional}
The type of the result. The following values are allowed:
<br />
- *id*: returns an array of document ids (*_id* attributes)
- *key*: returns an array of document keys (*_key* attributes)
- *path*: returns an array of document URI paths. This is the default.
<br />
@RESTDESCRIPTION
Returns an array of all keys, ids, or URI paths for all documents in the 
collection identified by *collection*. The type of the result array is
determined by the *type* attribute.
<br />
Note that the results have no defined order and thus the order should
not be relied on.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
All went good.
<br />
@RESTRETURNCODE{404}
The collection does not exist.
<br />
@EXAMPLES
<br />
Return all document paths
<br />

<div id="RestDocumentHandlerReadDocumentAllPath_container">
<div id="RestDocumentHandlerReadDocumentAllPath_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"documents"</span> : [ 
    <span class="hljs-string">"/_db/_system/_api/document/products/731924609"</span>, 
    <span class="hljs-string">"/_db/_system/_api/document/products/731269249"</span>, 
    <span class="hljs-string">"/_db/_system/_api/document/products/731596929"</span> 
  ] 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentAllPath_short" onclick="$('#RestDocumentHandlerReadDocumentAllPath_short').hide(); $('#RestDocumentHandlerReadDocumentAllPath_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Return all document keys
<br />

<div id="RestDocumentHandlerReadDocumentAllKey_container">
<div id="RestDocumentHandlerReadDocumentAllKey_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products&type=key

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"documents"</span> : [ 
    <span class="hljs-string">"730679425"</span>, 
    <span class="hljs-string">"730351745"</span>, 
    <span class="hljs-string">"730024065"</span> 
  ] 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentAllKey_short" onclick="$('#RestDocumentHandlerReadDocumentAllKey_short').hide(); $('#RestDocumentHandlerReadDocumentAllKey_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=products&type=key

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Collection does not exist
<br />

<div id="RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_container">
<div id="RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=doesnotexist

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'doesnotexist' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_short" onclick="$('#RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_short').hide(); $('#RestDocumentHandlerReadDocumentAllCollectionDoesNotExist_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/?collection=doesnotexist

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock

<br />

bool RestDocumentHandler::readAllDocuments () {
  bool found;
  std::string collection = _request->value("collection", found);
  std::string returnType = _request->value("type", found);

  if (returnType.empty()) {
    returnType = "path";
  }

  if (ServerState::instance()->isCoordinator()) {
    return getAllDocumentsCoordinator(collection, returnType);
  }

  // find and load collection given by name or identifier
  SingleCollectionReadOnlyTransaction trx(new StandaloneTransactionContext(), _vocbase, collection);

  std::vector<std::string> ids;

  // .............................................................................
  // inside read transaction
  // .............................................................................

  int res = trx.begin();

  if (res != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collection, res);
    return false;
  }

  TRI_voc_cid_t const cid = trx.cid();

  res = trx.read(ids);

  TRI_col_type_e type = trx.documentCollection()->_info._type;

  res = trx.finish(res);

  // .............................................................................
  // outside read transaction
  // .............................................................................

  if (res != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collection, res);
    return false;
  }

  std::string prefix;

  if (returnType == "key") {
    prefix = "";
  }
  else if (returnType == "id") {
    prefix = trx.resolver()->getCollectionName(cid) + "/";
  }
  else {
    // default return type: paths to documents
    if (type == TRI_COL_TYPE_EDGE) {
      prefix = "/_db/" + _request->databaseName() + EDGE_PATH + '/' + trx.resolver()->getCollectionName(cid) + '/';
    }
    else {
      prefix = "/_db/" + _request->databaseName() + DOCUMENT_PATH + '/' + trx.resolver()->getCollectionName(cid) + '/';
    }
  }

  // generate result
  triagens::basics::Json documents(triagens::basics::Json::Array);
  documents.reserve(ids.size());

  for (auto const& id : ids) {
    std::string v(prefix);
    v.append(id);
    documents.add(triagens::basics::Json(v));
  }

  triagens::basics::Json result(triagens::basics::Json::Object);
  result("documents", documents);

  // and generate a response
  generateResult(result.json());

  return true;
}

<br />
@brief reads a single a document, coordinator case in a cluster
<br />

bool RestDocumentHandler::getAllDocumentsCoordinator (string const& collname,
                                                      string const& returnType) {
  string const& dbname = _request->databaseName();

  triagens::rest::HttpResponse::HttpResponseCode responseCode;
  string contentType;
  string resultBody;

  int error = triagens::arango::getAllDocumentsOnCoordinator(
            dbname, collname, returnType, responseCode, contentType, resultBody);

  if (error != TRI_ERROR_NO_ERROR) {
    generateTransactionError(collname, error);
    return false;
  }
  // Return the response we got:
  _response = createResponse(responseCode);
  _response->setContentType(contentType);
  _response->body().appendText(resultBody.c_str(), resultBody.size());
  return responseCode >= triagens::rest::HttpResponse::BAD;
}

<br />
@startDocuBlock REST_DOCUMENT_READ_HEAD

@brief reads a single document head
<br />
@RESTHEADER{HEAD /_api/document/{collection-name}/{document-key},Read document header}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally fetch a document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-None-Match,string,optional}
If the "If-None-Match" header is given, then it must contain exactly one
etag. If the current document revision is different to the specified etag,
an *HTTP 200* response is returned. If the current document revision is
identical to the specified etag, then an *HTTP 304* is returned.
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally fetch a document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
Like *GET*, but only returns the header fields and not the body. You
can use this call to get the current revision of a document or check if
the document was deleted.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the document was found
<br />
@RESTRETURNCODE{304}
is returned if the "If-None-Match" header is given and the document has
same version
///*
@RESTRETURNCODE{404}
is returned if the document or collection was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *etag* header.
<br />
@EXAMPLES
<br />

<div id="RestDocumentHandlerReadDocumentHead_container">
<div id="RestDocumentHandlerReadDocumentHead_long">
<pre>
shell> curl -X HEAD --dump - http://localhost:8529/_api/document/products/732514433

</pre>
</div>
</div>

@endDocuBlock

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
@startDocuBlock REST_DOCUMENT_REPLACE

@brief replaces a document
<br />
@RESTHEADER{PUT /_api/document/{collection-name}/{document-key},Replace document}
<br />
@RESTALLBODYPARAM{document,json,required}
A JSON representation of the new document.
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until document has been synced to disk.
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally replace a document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTQUERYPARAM{policy,string,optional}
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter (see below).
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally replace a document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
Completely updates (i.e. replaces) the document identified by *document-handle*.
If the document exists and can be updated, then a *HTTP 201* is returned
and the "ETag" header field contains the new revision of the document.
<br />
If the new document passed in the body of the request contains the
*document-handle* in the attribute *_id* and the revision
in *_rev*,
these attributes will be ignored. Only the URI and the "ETag" header are
relevant in order to avoid confusion when using proxies.
<br />
<br />
Optionally, the query parameter *waitForSync* can be used to force
synchronization of the document replacement operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* query parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* query parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
<br />
The body of the response contains a JSON object with the information about
the handle and the revision. The attribute *_id* contains the known
*document-handle* of the updated document, *_key* contains the key which 
uniquely identifies a document in a given collection, and the attribute *_rev*
contains the new document revision.
<br />
If the document does not exist, then a *HTTP 404* is returned and the
body of the response contains an error document.
<br />
There are two ways for specifying the targeted document revision id for
conditional replacements (i.e. replacements that will only be executed if
the revision id found in the database matches the document revision id specified
in the request):
- specifying the target revision in the *rev* URL query parameter
- specifying the target revision in the *if-match* HTTP header
<br />
<br />
Specifying a target revision is optional, however, if done, only one of the
described mechanisms must be used (either the *rev* query parameter or the
*if-match* HTTP header).
Regardless which mechanism is used, the parameter needs to contain the target
document revision id as returned in the *_rev* attribute of a document or
by an HTTP *etag* header.
<br />
For example, to conditionally replace a document based on a specific revision
id, you can use the following request:
<br />
<br />
`PUT /_api/document/collection-name/document-key?rev=etag`
<br />
<br />
If a target revision id is provided in the request (e.g. via the *etag* value
in the *rev* URL query parameter above), ArangoDB will check that
the revision id of the document found in the database is equal to the target
revision id provided in the request. If there is a mismatch between the revision
id, then by default a *HTTP 412* conflict is returned and no replacement is
performed.
<br />
<br />
The conditional update behavior can be overridden with the *policy* URL query parameter:
<br />
<br />
`PUT /_api/document/collection-name/document-key?policy=policy`
<br />
<br />
If *policy* is set to *error*, then the behavior is as before: replacements
will fail if the revision id found in the database does not match the target
revision id specified in the request.
<br />
If *policy* is set to *last*, then the replacement will succeed, even if the
revision id found in the database does not match the target revision id specified
in the request. You can use the *last* *policy* to force replacements.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the document was replaced successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the document was replaced successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
document.  The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection or the document was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
<br />
@EXAMPLES
<br />
Using a document handle
<br />

<div id="RestDocumentHandlerUpdateDocument_container">
<div id="RestDocumentHandlerUpdateDocument_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/733694081 &lt;&lt;EOF
{"Hello": "you"}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"734021761"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">733694081</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/733694081"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"734021761"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"733694081"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerUpdateDocument_short" onclick="$('#RestDocumentHandlerUpdateDocument_short').hide(); $('#RestDocumentHandlerUpdateDocument_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/733694081 &lt;&lt;EOF
{"Hello": "you"}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"734021761"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">733694081</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Unknown document handle
<br />

<div id="RestDocumentHandlerUpdateDocumentUnknownHandle_container">
<div id="RestDocumentHandlerUpdateDocumentUnknownHandle_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/737888385 &lt;&lt;EOF
{}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"document not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1202</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerUpdateDocumentUnknownHandle_short" onclick="$('#RestDocumentHandlerUpdateDocumentUnknownHandle_short').hide(); $('#RestDocumentHandlerUpdateDocumentUnknownHandle_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/737888385 &lt;&lt;EOF
{}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Produce a revision conflict
<br />

<div id="RestDocumentHandlerUpdateDocumentIfMatchOther_container">
<div id="RestDocumentHandlerUpdateDocumentIfMatchOther_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --header 'If-Match: "734873729"' --data-binary @- --dump - http://localhost:8529/_api/document/products/734546049 &lt;&lt;EOF
{"other":"content"}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">412</span> Precondition Failed
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"734546049"</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">412</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1200</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"precondition failed"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/734546049"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"734546049"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"734546049"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerUpdateDocumentIfMatchOther_short" onclick="$('#RestDocumentHandlerUpdateDocumentIfMatchOther_short').hide(); $('#RestDocumentHandlerUpdateDocumentIfMatchOther_long').show();">
<pre>
shell> curl -X PUT --header 'If-Match: "734873729"' --data-binary @- --dump - http://localhost:8529/_api/document/products/734546049 &lt;&lt;EOF
{"other":"content"}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">412</span> Precondition Failed
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"734546049"</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Last write wins
<br />

<div id="RestDocumentHandlerUpdateDocumentIfMatchOtherLastWriteWins_container">
<div id="RestDocumentHandlerUpdateDocumentIfMatchOtherLastWriteWins_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --header 'If-Match: "735987841"' --data-binary @- --dump - http://localhost:8529/_api/document/products/735660161?policy=last &lt;&lt;EOF
{}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"736249985"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">735660161</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/735660161"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"736249985"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"735660161"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerUpdateDocumentIfMatchOtherLastWriteWins_short" onclick="$('#RestDocumentHandlerUpdateDocumentIfMatchOtherLastWriteWins_short').hide(); $('#RestDocumentHandlerUpdateDocumentIfMatchOtherLastWriteWins_long').show();">
<pre>
shell> curl -X PUT --header 'If-Match: "735987841"' --data-binary @- --dump - http://localhost:8529/_api/document/products/735660161?policy=last &lt;&lt;EOF
{}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"736249985"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">735660161</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Alternative to header fields
<br />

<div id="RestDocumentHandlerUpdateDocumentRevOther_container">
<div id="RestDocumentHandlerUpdateDocumentRevOther_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/736774273?rev=737101953 &lt;&lt;EOF
{"other":"content"}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">412</span> Precondition Failed
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"736774273"</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">412</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1200</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"precondition failed"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/736774273"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"736774273"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"736774273"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerUpdateDocumentRevOther_short" onclick="$('#RestDocumentHandlerUpdateDocumentRevOther_short').hide(); $('#RestDocumentHandlerUpdateDocumentRevOther_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/736774273?rev=737101953 &lt;&lt;EOF
{"other":"content"}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">412</span> Precondition Failed
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"736774273"</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock  


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
@startDocuBlock REST_DOCUMENT_UPDATE

@brief updates a document
<br />
@RESTHEADER{PATCH /_api/document/{collection-name}/{document-key}, Patch document}
<br />
@RESTALLBODYPARAM{document,json,required}
A JSON representation of the document update.
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{keepNull,boolean,optional}
If the intention is to delete existing attributes with the patch command,
the URL query parameter *keepNull* can be used with a value of *false*.
This will modify the behavior of the patch command to remove any attributes
from the existing document that are contained in the patch document with an
attribute value of *null*.
<br />
@RESTQUERYPARAM{mergeObjects,boolean,optional}
Controls whether objects (not arrays) will be merged if present in both the
existing and the patch document. If set to *false*, the value in the
patch document will overwrite the existing document's value. If set to
*true*, objects will be merged. The default is *true*.
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until document has been synced to disk.
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally patch a document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTQUERYPARAM{policy,string,optional}
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally patch a document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
Partially updates the document identified by *document-handle*.
The body of the request must contain a JSON document with the attributes
to patch (the patch document). All attributes from the patch document will
be added to the existing document if they do not yet exist, and overwritten
in the existing document if they do exist there.
<br />
Setting an attribute value to *null* in the patch document will cause a
value of *null* be saved for the attribute by default.
<br />
Optionally, the query parameter *waitForSync* can be used to force
synchronization of the document update operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* query parameter can be used to force synchronization
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* query parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
The body of the response contains a JSON object with the information about
the handle and the revision. The attribute *_id* contains the known
*document-handle* of the updated document, *_key* contains the key which 
uniquely identifies a document in a given collection, and the attribute *_rev*
contains the new document revision.
<br />
If the document does not exist, then a *HTTP 404* is returned and the
body of the response contains an error document.
<br />
You can conditionally update a document based on a target revision id by
using either the *rev* query parameter or the *if-match* HTTP header.
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter. This is the same as when replacing
documents (see replacing documents for details).
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the document was created successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the document was created successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
document. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection or the document was not found
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
<br />
@EXAMPLES
<br />
patches an existing document with new content.
<br />

<div id="RestDocumentHandlerPatchDocument_container">
<div id="RestDocumentHandlerPatchDocument_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/723536001 &lt;&lt;EOF
{ 
  <span class="hljs-string">"hello"</span> : <span class="hljs-string">"world"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"723863681"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">723536001</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/723536001"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"723863681"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"723536001"</span> 
}
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/723536001 &lt;&lt;EOF
{ 
  <span class="hljs-string">"numbers"</span> : { 
    <span class="hljs-string">"one"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"two"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"three"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"empty"</span> : <span class="hljs-literal">null</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"724453505"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">723536001</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/723536001"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"724453505"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"723536001"</span> 
}
shell> curl --dump - http://localhost:8529/_api/document/products/723536001

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"724453505"</span>

{ 
  <span class="hljs-string">"one"</span> : <span class="hljs-string">"world"</span>, 
  <span class="hljs-string">"hello"</span> : <span class="hljs-string">"world"</span>, 
  <span class="hljs-string">"numbers"</span> : { 
    <span class="hljs-string">"empty"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"one"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"two"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"three"</span> : <span class="hljs-number">3</span> 
  }, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/723536001"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"724453505"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"723536001"</span> 
}
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/723536001?keepNull=false &lt;&lt;EOF
{ 
  <span class="hljs-string">"hello"</span> : <span class="hljs-literal">null</span>, 
  <span class="hljs-string">"numbers"</span> : { 
    <span class="hljs-string">"four"</span> : <span class="hljs-number">4</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"724912257"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">723536001</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/723536001"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"724912257"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"723536001"</span> 
}
shell> curl --dump - http://localhost:8529/_api/document/products/723536001

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"724912257"</span>

{ 
  <span class="hljs-string">"one"</span> : <span class="hljs-string">"world"</span>, 
  <span class="hljs-string">"numbers"</span> : { 
    <span class="hljs-string">"empty"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"one"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"two"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"three"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"four"</span> : <span class="hljs-number">4</span> 
  }, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/723536001"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"724912257"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"723536001"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPatchDocument_short" onclick="$('#RestDocumentHandlerPatchDocument_short').hide(); $('#RestDocumentHandlerPatchDocument_long').show();">
<pre>
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/723536001 &lt;&lt;EOF
{ 
  <span class="hljs-string">"hello"</span> : <span class="hljs-string">"world"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"723863681"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">723536001</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Merging attributes of an object using `mergeObjects`:
<br />

<div id="RestDocumentHandlerPatchDocumentMerge_container">
<div id="RestDocumentHandlerPatchDocumentMerge_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/725764225

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"725764225"</span>

{ 
  <span class="hljs-string">"inhabitants"</span> : { 
    <span class="hljs-string">"china"</span> : <span class="hljs-number">1366980000</span>, 
    <span class="hljs-string">"india"</span> : <span class="hljs-number">1263590000</span>, 
    <span class="hljs-string">"usa"</span> : <span class="hljs-number">319220000</span> 
  }, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/725764225"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"725764225"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"725764225"</span> 
}
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/725764225?mergeObjects=true &lt;&lt;EOF
{ 
  <span class="hljs-string">"inhabitants"</span> : { 
    <span class="hljs-string">"indonesia"</span> : <span class="hljs-number">252164800</span>, 
    <span class="hljs-string">"brazil"</span> : <span class="hljs-number">203553000</span> 
  } 
}
EOF

shell> curl --dump - http://localhost:8529/_api/document/products/725764225

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"726288513"</span>

{ 
  <span class="hljs-string">"inhabitants"</span> : { 
    <span class="hljs-string">"china"</span> : <span class="hljs-number">1366980000</span>, 
    <span class="hljs-string">"india"</span> : <span class="hljs-number">1263590000</span>, 
    <span class="hljs-string">"usa"</span> : <span class="hljs-number">319220000</span>, 
    <span class="hljs-string">"indonesia"</span> : <span class="hljs-number">252164800</span>, 
    <span class="hljs-string">"brazil"</span> : <span class="hljs-number">203553000</span> 
  }, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/725764225"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"726288513"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"725764225"</span> 
}
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/725764225?mergeObjects=false &lt;&lt;EOF
{ 
  <span class="hljs-string">"inhabitants"</span> : { 
    <span class="hljs-string">"pakistan"</span> : <span class="hljs-number">188346000</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"726747265"</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/<span class="hljs-built_in">document</span>/products/<span class="hljs-number">725764225</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/725764225"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"726747265"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"725764225"</span> 
}
shell> curl --dump - http://localhost:8529/_api/document/products/725764225

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"726747265"</span>

{ 
  <span class="hljs-string">"inhabitants"</span> : { 
    <span class="hljs-string">"pakistan"</span> : <span class="hljs-number">188346000</span> 
  }, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/725764225"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"726747265"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"725764225"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerPatchDocumentMerge_short" onclick="$('#RestDocumentHandlerPatchDocumentMerge_short').hide(); $('#RestDocumentHandlerPatchDocumentMerge_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/document/products/725764225

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"725764225"</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestDocumentHandler.cpp -->
@startDocuBlock REST_DOCUMENT_DELETE

@brief removes a document
<br />
@RESTHEADER{DELETE /_api/document/{collection-name}/{document-key}, Removes a document}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTURLPARAM{document-key,string,required}
The key of the document.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{rev,string,optional}
You can conditionally remove a document based on a target revision id by
using the *rev* query parameter.
<br />
@RESTQUERYPARAM{policy,string,optional}
To control the update behavior in case there is a revision mismatch, you
can use the *policy* parameter. This is the same as when replacing
documents (see replacing documents for more details).
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until deletion operation has been synced to disk.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTHEADERPARAM{If-Match,string,optional}
You can conditionally remove a document based on a target revision id by
using the *if-match* HTTP header.
<br />
@RESTDESCRIPTION
The body of the response contains a JSON object with the information about
the handle and the revision. The attribute *_id* contains the known
*document-handle* of the removed document, *_key* contains the key which
uniquely identifies a document in a given collection, and the attribute *_rev*
contains the new document revision.
<br />
If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* query parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the document was removed successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{202}
is returned if the document was removed successfully and *waitForSync* was
*false*.
<br />
@RESTRETURNCODE{404}
is returned if the collection or the document was not found.
The response body contains an error document in this case.
<br />
@RESTRETURNCODE{412}
is returned if a "If-Match" header or *rev* is given and the found
document has a different version. The response will also contain the found
document's current revision in the *_rev* attribute. Additionally, the
attributes *_id* and *_key* will be returned.
<br />
@EXAMPLES
<br />
Using document handle:
<br />

<div id="RestDocumentHandlerDeleteDocument_container">
<div id="RestDocumentHandlerDeleteDocument_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/document/products/720980097

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/720980097"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"720980097"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"720980097"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerDeleteDocument_short" onclick="$('#RestDocumentHandlerDeleteDocument_short').hide(); $('#RestDocumentHandlerDeleteDocument_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/document/products/720980097

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Unknown document handle:
<br />

<div id="RestDocumentHandlerDeleteDocumentUnknownHandle_container">
<div id="RestDocumentHandlerDeleteDocumentUnknownHandle_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/document/products/722684033

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"document not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1202</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerDeleteDocumentUnknownHandle_short" onclick="$('#RestDocumentHandlerDeleteDocumentUnknownHandle_short').hide(); $('#RestDocumentHandlerDeleteDocumentUnknownHandle_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/document/products/722684033

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Revision conflict:
<br />

<div id="RestDocumentHandlerDeleteDocumentIfMatchOther_container">
<div id="RestDocumentHandlerDeleteDocumentIfMatchOther_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --header 'If-Match: "722028673"' --dump - http://localhost:8529/_api/document/products/721700993

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">412</span> Precondition Failed
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"721700993"</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">412</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1200</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"precondition failed"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/721700993"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"721700993"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"721700993"</span> 
}
</pre>
</div>
<div id="RestDocumentHandlerDeleteDocumentIfMatchOther_short" onclick="$('#RestDocumentHandlerDeleteDocumentIfMatchOther_short').hide(); $('#RestDocumentHandlerDeleteDocumentIfMatchOther_long').show();">
<pre>
shell> curl -X DELETE --header 'If-Match: "722028673"' --dump - http://localhost:8529/_api/document/products/721700993

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">412</span> Precondition Failed
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
etag: <span class="hljs-string">"721700993"</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestBatchHandler.cpp -->
@startDocuBlock JSF_batch_processing

@brief executes a batch request
<br />
@RESTHEADER{POST /_api/batch,executes a batch request} TODOSWAGGER: contentype
<br />
@RESTALLBODYPARAM{body,string,required}
The multipart batch request, consisting of the envelope and the individual
batch parts.
<br />
@RESTDESCRIPTION
Executes a batch request. A batch request can contain any number of
other requests that can be sent to ArangoDB in isolation. The benefit of
using batch requests is that batching requests requires less client/server
roundtrips than when sending isolated requests.
<br />
All parts of a batch request are executed serially on the server. The
server will return the results of all parts in a single response when all
parts are finished.
<br />
Technically, a batch request is a multipart HTTP request, with
content-type `multipart/form-data`. A batch request consists of an
envelope and the individual batch part actions. Batch part actions
are "regular" HTTP requests, including full header and an optional body.
Multiple batch parts are separated by a boundary identifier. The
boundary identifier is declared in the batch envelope. The MIME content-type
for each individual batch part must be `application/x-arango-batchpart`.
<br />
Please note that when constructing the individual batch parts, you must
use CRLF (`\r\n`) as the line terminator as in regular HTTP messages.
<br />
The response sent by the server will be an `HTTP 200` response, with an
optional error summary header `x-arango-errors`. This header contains the
number of batch part operations that failed with an HTTP error code of at
least 400. This header is only present in the response if the number of
errors is greater than zero.
<br />
The response sent by the server is a multipart response, too. It contains
the individual HTTP responses for all batch parts, including the full HTTP
result header (with status code and other potential headers) and an
optional result body. The individual batch parts in the result are
seperated using the same boundary value as specified in the request.
<br />
The order of batch parts in the response will be the same as in the
original client request. Client can additionally use the `Content-Id`
MIME header in a batch part to define an individual id for each batch part.
The server will return this id is the batch part responses, too.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the batch was received successfully. HTTP 200 is returned
even if one or multiple batch part actions failed.
<br />
@RESTRETURNCODE{400}
is returned if the batch envelope is malformed or incorrectly formatted.
This code will also be returned if the content-type of the overall batch
request or the individual MIME parts is not as expected.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@EXAMPLES
<br />
Sending a batch request with five batch parts:
<br />
- GET /_api/version
<br />
- DELETE /_api/collection/products
<br />
- POST /_api/collection/products
<br />
- GET /_api/collection/products/figures
<br />
- DELETE /_api/collection/products
<br />
The boundary (`SomeBoundaryValue`) is passed to the server in the HTTP
`Content-Type` HTTP header.
*Please note the reply is not displayed all accurate.*
<br />

<div id="RestBatchMultipartHeader_container">
<div id="RestBatchMultipartHeader_long">
<pre>
shell> curl -X POST --header 'Content-Type: multipart/form-data; boundary=SomeBoundaryValue' --data-binary @- --dump - http://localhost:8529/_api/batch &lt;&lt;EOF
--SomeBoundaryValue
Content-Type: application/x-arango-batchpart
Content-Id: myId1

GET /_api/version HTTP/1.1

--SomeBoundaryValue
Content-Type: application/x-arango-batchpart
Content-Id: myId2

DELETE /_api/collection/products HTTP/1.1

--SomeBoundaryValue
Content-Type: application/x-arango-batchpart
Content-Id: someId

POST /_api/collection/products HTTP/1.1

{ "name": "products" }

--SomeBoundaryValue
Content-Type: application/x-arango-batchpart
Content-Id: nextId

GET /_api/collection/products/figures HTTP/1.1

--SomeBoundaryValue
Content-Type: application/x-arango-batchpart
Content-Id: otherId

DELETE /_api/collection/products HTTP/1.1
--SomeBoundaryValue--

EOF

HTTP/1.1 200 OK
content-type: multipart/form-data; boundary=SomeBoundaryValue
x-arango-errors: 1

"--SomeBoundaryValue\r\nContent-Type: application/x-arango-batchpart\r\nContent-Id: myId1\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 38\r\n\r\n{\"server\":\"arango\",\"version\":\"2.8.11\"}\r\n--SomeBoundaryValue\r\nContent-Type: application/x-arango-batchpart\r\nContent-Id: myId2\r\n\r\nHTTP/1.1 404 Not Found\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 88\r\n\r\n{\"error\":true,\"code\":404,\"errorNum\":1203,\"errorMessage\":\"unknown collection 'products'\"}\r\n--SomeBoundaryValue\r\nContent-Type: application/x-arango-batchpart\r\nContent-Id: someId\r\n\r\nHTTP/1.1 200 OK\r\nLocation: /_db/_system/_api/collection/products\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 137\r\n\r\n{\"id\":\"643188865\",\"name\":\"products\",\"waitForSync\":false,\"isVolatile\":false,\"isSystem\":false,\"status\":3,\"type\":2,\"error\":false,\"code\":200}\r\n--SomeBoundaryValue\r\nContent-Type: application/x-arango-batchpart\r\nContent-Id: nextId\r\n\r\nHTTP/1.1 200 OK\r\nLocation: /_db/_system/_api/collection/products/figures\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 765\r\n\r\n{\"id\":\"643188865\",\"name\":\"products\",\"isSystem\":false,\"doCompact\":true,\"isVolatile\":false,\"journalSize\":1048576,\"keyOptions\":{\"type\":\"traditional\",\"allowUserKeys\":true},\"waitForSync\":false,\"indexBuckets\":8,\"count\":0,\"figures\":{\"alive\":{\"count\":0,\"size\":0},\"dead\":{\"count\":0,\"size\":0,\"deletion\":0},\"datafiles\":{\"count\":0,\"fileSize\":0},\"journals\":{\"count\":0,\"fileSize\":0},\"compactors\":{\"count\":0,\"fileSize\":0},\"shapefiles\":{\"count\":0,\"fileSize\":0},\"shapes\":{\"count\":0,\"size\":0},\"attributes\":{\"count\":0,\"size\":0},\"indexes\":{\"count\":1,\"size\":16064},\"lastTick\":\"0\",\"uncollectedLogfileEntries\":0,\"documentReferences\":0,\"waitingFor\":\"-\",\"compactionStatus\":{\"message\":\"compaction not yet started\",\"time\":\"2016-07-13T08:37:42Z\"}},\"status\":3,\"type\":2,\"error\":false,\"code\":200}\r\n--SomeBoundaryValue\r\nContent-Type: application/x-arango-batchpart\r\nContent-Id: otherId\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 43\r\n\r\n{\"id\":\"643188865\",\"error\":false,\"code\":200}\r\n--SomeBoundaryValue--"
</pre>
</div>
</div>

<br />
Sending a batch request, setting the boundary implicitly (the server will
in this case try to find the boundary at the beginning of the request body).
<br />

<div id="RestBatchImplicitBoundary_container">
<div id="RestBatchImplicitBoundary_long">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/batch &lt;&lt;EOF
--SomeBoundaryValue
Content-Type: application/x-arango-batchpart

DELETE /_api/collection/notexisting1 HTTP/1.1

--SomeBoundaryValue
Content-Type: application/x-arango-batchpart

DELETE /_api/collection/notexisting2 HTTP/1.1
--SomeBoundaryValue--

EOF

HTTP/1.1 200 OK
x-arango-errors: 2

"--SomeBoundaryValue\r\nContent-Type: application/x-arango-batchpart\r\n\r\nHTTP/1.1 404 Not Found\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 92\r\n\r\n{\"error\":true,\"code\":404,\"errorNum\":1203,\"errorMessage\":\"unknown collection 'notexisting1'\"}\r\n--SomeBoundaryValue\r\nContent-Type: application/x-arango-batchpart\r\n\r\nHTTP/1.1 404 Not Found\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 92\r\n\r\n{\"error\":true,\"code\":404,\"errorNum\":1203,\"errorMessage\":\"unknown collection 'notexisting2'\"}\r\n--SomeBoundaryValue--"
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestAdminLogHandler.cpp -->
@startDocuBlock JSF_get_admin_modules_flush

@brief returns the log files
<br />
@RESTHEADER{GET /_admin/log, Read global log from the server}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{upto,string,optional}
Returns all log entries up to log level *upto*. Note that *upto* must be:
- *fatal* or *0*
- *error* or *1*
- *warning* or *2*
- *info* or *3*
- *debug*  or *4*
The default value is *info*.
<br />
@RESTQUERYPARAM{level,string,optional}
Returns all log entries of log level *level*. Note that the query parameters
*upto* and *level* are mutually exclusive.
<br />
@RESTQUERYPARAM{start,number,optional}
Returns all log entries such that their log entry identifier (*lid* value)
is greater or equal to *start*.
<br />
@RESTQUERYPARAM{size,number,optional}
Restricts the result to at most *size* log entries.
<br />
@RESTQUERYPARAM{offset,number,optional}
Starts to return log entries skipping the first *offset* log entries. *offset*
and *size* can be used for pagination.
<br />
@RESTQUERYPARAM{search,string,optional}
Only return the log entries containing the text specified in *search*.
<br />
@RESTQUERYPARAM{sort,string,optional}
Sort the log entries either ascending (if *sort* is *asc*) or descending
(if *sort* is *desc*) according to their *lid* values. Note that the *lid*
imposes a chronological order. The default value is *asc*.
<br />
@RESTDESCRIPTION
Returns fatal, error, warning or info log messages from the server's global log.
The result is a JSON object with the following attributes:
<br />
- *lid*: a list of log entry identifiers. Each log message is uniquely
  identified by its @LIT{lid} and the identifiers are in ascending
  order.
<br />
- *level*: a list of the log-levels for all log entries.
<br />
- *timestamp*: a list of the timestamps as seconds since 1970-01-01 for all log
  entries.
<br />
- *text* a list of the texts of all log entries
<br />
- *totalAmount*: the total amount of log entries before pagination.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
is returned if invalid values are specified for *upto* or *level*.
<br />
@RESTRETURNCODE{403}
is returned if the log is requested for any database other than *_system*.
<br />
@RESTRETURNCODE{500}
is returned if the server cannot generate the result due to an out-of-memory
error.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestShutdownHandler.cpp -->
@startDocuBlock JSF_get_api_initiate

@brief initiates the shutdown sequence
<br />
@RESTHEADER{GET /_admin/shutdown, Initiate shutdown sequence}
<br />
@RESTDESCRIPTION
This call initiates a clean shutdown sequence.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned in all cases.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestSimpleQueryHandler.cpp -->
@startDocuBlock JSA_put_api_simple_all

@brief returns all documents of a collection
<br />
@RESTHEADER{PUT /_api/simple/all, Return all documents}
<br />
@RESTALLBODYPARAM{query,string,required}
Contains the query.
<br />
@RESTDESCRIPTION
<br />
Returns all documents of a collections. The call expects a JSON object
as body with the following attributes:
<br />
- *collection*: The name of the collection to query.
<br />
- *skip*: The number of documents to skip in the query (optional).
<br />
- *limit*: The maximal amount of documents to return. The *skip*
  is applied before the *limit* restriction. (optional)
<br />
Returns a cursor containing the result, see [Http Cursor](../HttpAqlQueryCursor/README.md) for details.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Limit the amount of documents using *limit*
<br />

<div id="RestSimpleAllSkipLimit_container">
<div id="RestSimpleAllSkipLimit_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/all &lt;&lt;EOF
{ "collection": "products", "skip": 2, "limit" : 2 }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"Hello3"</span> : <span class="hljs-string">"World3"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/797198465"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"797198465"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"797198465"</span> 
    }, 
    { 
      <span class="hljs-string">"Hello4"</span> : <span class="hljs-string">"World4"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/797526145"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"797526145"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"797526145"</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">5</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.00010895729064941406</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleAllSkipLimit_short" onclick="$('#RestSimpleAllSkipLimit_short').hide(); $('#RestSimpleAllSkipLimit_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/all &lt;&lt;EOF
{ "collection": "products", "skip": 2, "limit" : 2 }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a *batchSize* value
<br />

<div id="RestSimpleAllBatch_container">
<div id="RestSimpleAllBatch_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/all &lt;&lt;EOF
{ "collection": "products", "batchSize" : 3 }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"Hello2"</span> : <span class="hljs-string">"World2"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/794904705"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"794904705"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"794904705"</span> 
    }, 
    { 
      <span class="hljs-string">"Hello5"</span> : <span class="hljs-string">"World5"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/795887745"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"795887745"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"795887745"</span> 
    }, 
    { 
      <span class="hljs-string">"Hello1"</span> : <span class="hljs-string">"World1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/794577025"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"794577025"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"794577025"</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"796084353"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">5</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">5</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.00010895729064941406</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleAllBatch_short" onclick="$('#RestSimpleAllBatch_short').hide(); $('#RestSimpleAllBatch_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/all &lt;&lt;EOF
{ "collection": "products", "batchSize" : 3 }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryHandler.cpp -->
@startDocuBlock GetApiQueryProperties

@brief returns the configuration for the AQL query tracking
<br />
@RESTHEADER{GET /_api/query/properties, Returns the properties for the AQL query tracking}
<br />
@RESTDESCRIPTION
Returns the current query tracking configuration. The configuration is a
JSON object with the following properties:
<br />
- *enabled*: if set to *true*, then queries will be tracked. If set to 
  *false*, neither queries nor slow queries will be tracked.
<br />
- *trackSlowQueries*: if set to *true*, then slow queries will be tracked
  in the list of slow queries if their runtime exceeds the value set in 
  *slowQueryThreshold*. In order for slow queries to be tracked, the *enabled*
  property must also be set to *true*.
<br />
- *maxSlowQueries*: the maximum number of slow queries to keep in the list
  of slow queries. If the list of slow queries is full, the oldest entry in
  it will be discarded when additional slow queries occur.
<br />
- *slowQueryThreshold*: the threshold value for treating a query as slow. A
  query with a runtime greater or equal to this threshold value will be
  put into the list of slow queries when slow query tracking is enabled.
  The value for *slowQueryThreshold* is specified in seconds.
<br />
- *maxQueryStringLength*: the maximum query string length to keep in the
  list of queries. Query strings can have arbitrary lengths, and this property
  can be used to save memory in case very long query strings are used. The
  value is specified in bytes.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if properties were retrieved successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryHandler.cpp -->
@startDocuBlock GetApiQueryCurrent

@brief returns a list of currently running AQL queries
<br />
@RESTHEADER{GET /_api/query/current, Returns the currently running AQL queries}
<br />
@RESTDESCRIPTION
Returns an array containing the AQL queries currently running in the selected
database. Each query is a JSON object with the following attributes:
<br />
- *id*: the query's id
<br />
- *query*: the query string (potentially truncated)
<br />
- *started*: the date and time when the query was started
<br />
- *runTime*: the query's run time up to the point the list of queries was
  queried
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned when the list of queries can be retrieved successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryHandler.cpp -->
@startDocuBlock GetApiQuerySlow

@brief returns a list of slow running AQL queries
<br />
@RESTHEADER{GET /_api/query/slow, Returns the list of slow AQL queries}
<br />
@RESTDESCRIPTION
Returns an array containing the last AQL queries that exceeded the slow 
query threshold in the selected database. 
The maximum amount of queries in the list can be controlled by setting
the query tracking property `maxSlowQueries`. The threshold for treating
a query as *slow* can be adjusted by setting the query tracking property
`slowQueryThreshold`.
<br />
Each query is a JSON object with the following attributes:
<br />
- *id*: the query's id
<br />
- *query*: the query string (potentially truncated)
<br />
- *started*: the date and time when the query was started
<br />
- *runTime*: the query's run time up to the point the list of queries was
  queried
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned when the list of queries can be retrieved successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryHandler.cpp -->
@startDocuBlock DeleteApiQuerySlow

@brief clears the list of slow AQL queries
<br />
@RESTHEADER{DELETE /_api/query/slow, Clears the list of slow AQL queries}
<br />
@RESTDESCRIPTION
Clears the list of slow AQL queries
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
The server will respond with *HTTP 200* when the list of queries was
cleared successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryHandler.cpp -->
@startDocuBlock DeleteApiQueryKill

@brief kills an AQL query
<br />
@RESTHEADER{DELETE /_api/query/{query-id}, Kills a running AQL query}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{query-id,string,required}
The id of the query.
<br />
@RESTDESCRIPTION
Kills a running query. The query will be terminated at the next cancelation
point.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
The server will respond with *HTTP 200* when the query was still running when
the kill request was executed and the query's kill flag was set.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request.
<br />
@RESTRETURNCODE{404}
The server will respond with *HTTP 404* when no query with the specified
id was found.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryHandler.cpp -->
@startDocuBlock PutApiQueryProperties

@brief changes the configuration for the AQL query tracking
<br />
@RESTHEADER{PUT /_api/query/properties, Changes the properties for the AQL query tracking}
<br />
@RESTBODYPARAM{enabled,boolean,required,}
If set to *true*, then queries will be tracked. If set to 
*false*, neither queries nor slow queries will be tracked.
<br />
@RESTBODYPARAM{trackSlowQueries,boolean,required,}
If set to *true*, then slow queries will be tracked
in the list of slow queries if their runtime exceeds the value set in 
*slowQueryThreshold*. In order for slow queries to be tracked, the *enabled*
property must also be set to *true*.
<br />
@RESTBODYPARAM{maxSlowQueries,integer,required,int64}
The maximum number of slow queries to keep in the list
of slow queries. If the list of slow queries is full, the oldest entry in
it will be discarded when additional slow queries occur.
<br />
@RESTBODYPARAM{slowQueryThreshold,integer,required,int64}
The threshold value for treating a query as slow. A
query with a runtime greater or equal to this threshold value will be
put into the list of slow queries when slow query tracking is enabled.
The value for *slowQueryThreshold* is specified in seconds.
<br />
@RESTBODYPARAM{maxQueryStringLength,integer,required,int64}
The maximum query string length to keep in the list of queries.
Query strings can have arbitrary lengths, and this property
can be used to save memory in case very long query strings are used. The
value is specified in bytes.
<br />
@RESTDESCRIPTION
The properties need to be passed in the attribute *properties* in the body
of the HTTP request. *properties* needs to be a JSON object.
<br />
After the properties have been changed, the current set of properties will
be returned in the HTTP response.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the properties were changed successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryHandler.cpp -->
@startDocuBlock PostApiQueryProperties

@brief parse an AQL query and return information about it
<br />
@RESTHEADER{POST /_api/query, Parse an AQL query}
<br />
@RESTBODYPARAM{query,string,required,string}
To validate a query string without executing it, the query string can be
passed to the server via an HTTP POST request.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the query is valid, the server will respond with *HTTP 200* and
return the names of the bind parameters it found in the query (if any) in
the *bindVars* attribute of the response. It will also return an array
of the collections used in the query in the *collections* attribute. 
If a query can be parsed successfully, the *ast* attribute of the returned
JSON will contain the abstract syntax tree representation of the query.
The format of the *ast* is subject to change in future versions of 
ArangoDB, but it can be used to inspect how ArangoDB interprets a given
query. Note that the abstract syntax tree will be returned without any
optimizations applied to it.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
or if the query contains a parse error. The body of the response will
contain the error details embedded in a JSON object.
<br />
@EXAMPLES
<br />
a Valid query
<br />

<div id="RestQueryValid_container">
<div id="RestQueryValid_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/query &lt;&lt;EOF
{ "query" : "FOR p IN products FILTER p.name == @name LIMIT 2 RETURN p.n" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"parsed"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"collections"</span> : [ 
    <span class="hljs-string">"products"</span> 
  ], 
  <span class="hljs-string">"bindVars"</span> : [ 
    <span class="hljs-string">"name"</span> 
  ], 
  <span class="hljs-string">"ast"</span> : [ 
    { 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"root"</span>, 
      <span class="hljs-string">"subNodes"</span> : [ 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"for"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"variable"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"collection"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"filter"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare =="</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span>, 
                  <span class="hljs-string">"subNodes"</span> : [ 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                      <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
                      <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                    } 
                  ] 
                }, 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"parameter"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span> 
                } 
              ] 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"limit"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">0</span> 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">2</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"return"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"n"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
                  <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                } 
              ] 
            } 
          ] 
        } 
      ] 
    } 
  ], 
  <span class="hljs-string">"warnings"</span> : [ ] 
}
</pre>
</div>
<div id="RestQueryValid_short" onclick="$('#RestQueryValid_short').hide(); $('#RestQueryValid_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/query &lt;&lt;EOF
{ "query" : "FOR p IN products FILTER p.name == @name LIMIT 2 RETURN p.n" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
an Invalid query
<br />

<div id="RestQueryInvalid_container">
<div id="RestQueryInvalid_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/query &lt;&lt;EOF
{ "query" : "FOR p IN products FILTER p.name = @name LIMIT 2 RETURN p.n" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"syntax error, unexpected assignment near '= @name LIMIT 2 RETURN p.n' at position 1:33"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1501</span> 
}
</pre>
</div>
<div id="RestQueryInvalid_short" onclick="$('#RestQueryInvalid_short').hide(); $('#RestQueryInvalid_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/query &lt;&lt;EOF
{ "query" : "FOR p IN products FILTER p.name = @name LIMIT 2 RETURN p.n" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestEdgesHandler.cpp -->
@startDocuBlock API_EDGE_READINOUTBOUND

@brief get edges
<br />
@RESTHEADER{GET /_api/edges/{collection-id}, Read in- or outbound edges}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-id,string,required}
The id of the collection.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{vertex,string,required}
The id of the start vertex.
<br />
@RESTQUERYPARAM{direction,string,optional}
Selects *in* or *out* direction for edges. If not set, any edges are
returned.
<br />
@RESTDESCRIPTION
Returns an array of edges starting or ending in the vertex identified by
*vertex-handle*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the edge collection was found and edges were retrieved.
<br />
@RESTRETURNCODE{400}
is returned if the request contains invalid parameters.
<br />
@RESTRETURNCODE{404}
is returned if the edge collection was not found.
<br />
@EXAMPLES
<br />
Any direction
<br />

<div id="RestEdgesReadEdgesAny_container">
<div id="RestEdgesReadEdgesAny_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/edges/edges?vertex=vertices/1

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"edges"</span> : [ 
    { 
      <span class="hljs-string">"$label"</span> : <span class="hljs-string">"v2 -&gt; v1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/6"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"744900737"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"6"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertices/2"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertices/1"</span> 
    }, 
    { 
      <span class="hljs-string">"$label"</span> : <span class="hljs-string">"v4 -&gt; v1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/7"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"745425025"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"7"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertices/4"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertices/1"</span> 
    }, 
    { 
      <span class="hljs-string">"$label"</span> : <span class="hljs-string">"v1 -&gt; v3"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/5"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"744376449"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"5"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertices/1"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertices/3"</span> 
    } 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span> 
  } 
}
</pre>
</div>
<div id="RestEdgesReadEdgesAny_short" onclick="$('#RestEdgesReadEdgesAny_short').hide(); $('#RestEdgesReadEdgesAny_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/edges/edges?vertex=vertices/1

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
In edges
<br />

<div id="RestEdgesReadEdgesIn_container">
<div id="RestEdgesReadEdgesIn_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/edges/edges?vertex=vertices/1&direction=in

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"edges"</span> : [ 
    { 
      <span class="hljs-string">"$label"</span> : <span class="hljs-string">"v2 -&gt; v1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/6"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"749619329"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"6"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertices/2"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertices/1"</span> 
    }, 
    { 
      <span class="hljs-string">"$label"</span> : <span class="hljs-string">"v4 -&gt; v1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/7"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"750143617"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"7"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertices/4"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertices/1"</span> 
    } 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span> 
  } 
}
</pre>
</div>
<div id="RestEdgesReadEdgesIn_short" onclick="$('#RestEdgesReadEdgesIn_short').hide(); $('#RestEdgesReadEdgesIn_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/edges/edges?vertex=vertices/1&direction=in

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Out edges
<br />

<div id="RestEdgesReadEdgesOut_container">
<div id="RestEdgesReadEdgesOut_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/edges/edges?vertex=vertices/1&direction=out

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"edges"</span> : [ 
    { 
      <span class="hljs-string">"$label"</span> : <span class="hljs-string">"v1 -&gt; v3"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/5"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"753813633"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"5"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"vertices/1"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"vertices/3"</span> 
    } 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span> 
  } 
}
</pre>
</div>
<div id="RestEdgesReadEdgesOut_short" onclick="$('#RestEdgesReadEdgesOut_short').hide(); $('#RestEdgesReadEdgesOut_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/edges/edges?vertex=vertices/1&direction=out

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestImportHandler.cpp -->
@startDocuBlock JSF_import_json

@brief imports documents from JSON
<br />
@RESTHEADER{POST /_api/import#json,imports documents from JSON}
<br />
@RESTALLBODYPARAM{documents,string,required}
The body must either be a JSON-encoded array of objects or a string with
multiple JSON objects separated by newlines.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{type,string,required}
Determines how the body of the request will be interpreted. `type` can have
the following values:
- `documents`: when this type is used, each line in the request body is
  expected to be an individual JSON-encoded document. Multiple JSON objects
  in the request body need to be separated by newlines.
- `list`: when this type is used, the request body must contain a single
  JSON-encoded array of individual objects to import.
- `auto`: if set, this will automatically determine the body type (either
  `documents` or `list`).
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
@RESTQUERYPARAM{createCollection,boolean,optional}
If this parameter has a value of `true` or `yes`, then the collection is
created if it does not yet exist. Other values will be ignored so the
collection must be present for the operation to succeed.
<br />
@RESTQUERYPARAM{createCollectionType,string,optional}
If this parameter has a value of `document` or `edge`, it will determine
the type of collection that is going to be created when the `createCollection`
option is set to `true`. The default value is `document`.
<br />
@RESTQUERYPARAM{fromPrefix,string,optional}
An optional prefix for the values in `_from` attributes. If specified, the
value is automatically prepended to each `_from` input value. This allows
specifying just the keys for `_from`.
<br />
@RESTQUERYPARAM{toPrefix,string,optional}
An optional prefix for the values in `_to` attributes. If specified, the
value is automatically prepended to each `_to` input value. This allows
specifying just the keys for `_to`.
<br />
@RESTQUERYPARAM{overwrite,boolean,optional}
If this parameter has a value of `true` or `yes`, then all data in the
collection will be removed prior to the import. Note that any existing
index definitions will be preseved.
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until documents have been synced to disk before returning.
<br />
@RESTQUERYPARAM{onDuplicate,string,optional}
Controls what action is carried out in case of a unique key constraint
violation. Possible values are:
<br />
- *error*: this will not import the current document because of the unique
  key constraint violation. This is the default setting.
<br />
- *update*: this will update an existing document in the database with the 
  data specified in the request. Attributes of the existing document that
  are not present in the request will be preseved.
<br />
- *replace*: this will replace an existing document in the database with the
  data specified in the request. 
<br />
- *ignore*: this will not update an existing document and simply ignore the
  error caused by a unique key constraint violation.
<br />
Note that that *update*, *replace* and *ignore* will only work when the
import document in the request contains the *_key* attribute. *update* and
*replace* may also fail because of secondary unique key constraint violations.
<br />
@RESTQUERYPARAM{complete,boolean,optional}
If set to `true` or `yes`, it will make the whole import fail if any error
occurs. Otherwise the import will continue even if some documents cannot
be imported.
<br />
@RESTQUERYPARAM{details,boolean,optional}
If set to `true` or `yes`, the result will include an attribute `details`
with details about documents that could not be imported.
<br />
@RESTDESCRIPTION
**NOTE** Swagger examples won't work due to the anchor.
<br />
<br />
Creates documents in the collection identified by `collection-name`.
The JSON representations of the documents must be passed as the body of the
POST request. The request body can either consist of multiple lines, with
each line being a single stand-alone JSON object, or a singe JSON array with
sub-objects.
<br />
The response is a JSON object with the following attributes:
<br />
- `created`: number of documents imported.
<br />
- `errors`: number of documents that were not imported due to an error.
<br />
- `empty`: number of empty lines found in the input (will only contain a
  value greater zero for types `documents` or `auto`).
<br />
- `updated`: number of updated/replaced documents (in case `onDuplicate`
  was set to either `update` or `replace`).
<br />
- `ignored`: number of failed but ignored insert operations (in case
  `onDuplicate` was set to `ignore`).
<br />
- `details`: if query parameter `details` is set to true, the result will
  contain a `details` attribute which is an array with more detailed
  information about which documents could not be inserted.
<br />
Note: this API is currently not supported on cluster coordinators.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if all documents could be imported successfully.
<br />
@RESTRETURNCODE{400}
is returned if `type` contains an invalid value, no `collection` is
specified, the documents are incorrectly encoded, or the request
is malformed.
<br />
@RESTRETURNCODE{404}
is returned if `collection` or the `_from` or `_to` attributes of an
imported edge refer to an unknown collection.
<br />
@RESTRETURNCODE{409}
is returned if the import would trigger a unique key violation and
`complete` is set to `true`.
<br />
@RESTRETURNCODE{500}
is returned if the server cannot auto-generate a document key (out of keys
error) for a document with no user-defined key.
<br />
@RESTRETURNCODE{501}
The server will respond with *HTTP 501* if this API is called on a cluster
coordinator.
<br />
@EXAMPLES
<br />
Importing documents with heterogenous attributes from a JSON array
<br />

<div id="RestImportJsonList_container">
<div id="RestImportJsonList_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=list &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"abc"</span>, 
    <span class="hljs-string">"value1"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"value2"</span> : <span class="hljs-string">"test"</span>, 
    <span class="hljs-string">"allowed"</span> : <span class="hljs-literal">true</span> 
  }, 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"baz"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : { 
      <span class="hljs-string">"detailed"</span> : <span class="hljs-string">"detailed name"</span>, 
      <span class="hljs-string">"short"</span> : <span class="hljs-string">"short name"</span> 
    } 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportJsonList_short" onclick="$('#RestImportJsonList_short').hide(); $('#RestImportJsonList_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=list &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"abc"</span>, 
    <span class="hljs-string">"value1"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"value2"</span> : <span class="hljs-string">"test"</span>, 
    <span class="hljs-string">"allowed"</span> : <span class="hljs-literal">true</span> 
  }, 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"baz"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : { 
      <span class="hljs-string">"detailed"</span> : <span class="hljs-string">"detailed name"</span>, 
      <span class="hljs-string">"short"</span> : <span class="hljs-string">"short name"</span> 
    } 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Importing documents from individual JSON lines
<br />

<div id="RestImportJsonLines_container">
<div id="RestImportJsonLines_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents &lt;&lt;EOF
{ "_key": "abc", "value1": 25, "value2": "test", "allowed": true }
{ "_key": "foo", "name": "baz" }

{ "name": { "detailed": "detailed name", "short": "short name" } }

EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportJsonLines_short" onclick="$('#RestImportJsonLines_short').hide(); $('#RestImportJsonLines_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents &lt;&lt;EOF
{ "_key": "abc", "value1": 25, "value2": "test", "allowed": true }
{ "_key": "foo", "name": "baz" }

{ "name": { "detailed": "detailed name", "short": "short name" } }

EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using the auto type detection
<br />

<div id="RestImportJsonType_container">
<div id="RestImportJsonType_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=auto &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"abc"</span>, 
    <span class="hljs-string">"value1"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"value2"</span> : <span class="hljs-string">"test"</span>, 
    <span class="hljs-string">"allowed"</span> : <span class="hljs-literal">true</span> 
  }, 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"baz"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : { 
      <span class="hljs-string">"detailed"</span> : <span class="hljs-string">"detailed name"</span>, 
      <span class="hljs-string">"short"</span> : <span class="hljs-string">"short name"</span> 
    } 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportJsonType_short" onclick="$('#RestImportJsonType_short').hide(); $('#RestImportJsonType_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=auto &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"abc"</span>, 
    <span class="hljs-string">"value1"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"value2"</span> : <span class="hljs-string">"test"</span>, 
    <span class="hljs-string">"allowed"</span> : <span class="hljs-literal">true</span> 
  }, 
  { 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"baz"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : { 
      <span class="hljs-string">"detailed"</span> : <span class="hljs-string">"detailed name"</span>, 
      <span class="hljs-string">"short"</span> : <span class="hljs-string">"short name"</span> 
    } 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Importing documents into a new collection from a JSON array
<br />

<div id="RestImportJsonCreate_container">
<div id="RestImportJsonCreate_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&createCollection=true&type=list &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"12553"</span>, 
    <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"4433"</span>, 
    <span class="hljs-string">"active"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"55932"</span>, 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">4334</span> 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportJsonCreate_short" onclick="$('#RestImportJsonCreate_short').hide(); $('#RestImportJsonCreate_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&createCollection=true&type=list &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"12553"</span>, 
    <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"4433"</span>, 
    <span class="hljs-string">"active"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"55932"</span>, 
    <span class="hljs-string">"count"</span> : <span class="hljs-number">4334</span> 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Importing into an edge collection, with attributes `_from`, `_to` and `name`
<br />

<div id="RestImportJsonEdge_container">
<div id="RestImportJsonEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links&type=documents &lt;&lt;EOF
{ "_from": "products/123", "_to": "products/234" }
{ "_from": "products/332", "_to": "products/abc", "name": "other name" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportJsonEdge_short" onclick="$('#RestImportJsonEdge_short').hide(); $('#RestImportJsonEdge_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links&type=documents &lt;&lt;EOF
{ "_from": "products/123", "_to": "products/234" }
{ "_from": "products/332", "_to": "products/abc", "name": "other name" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Importing into an edge collection, omitting `_from` or `_to`
<br />

<div id="RestImportJsonEdgeInvalid_container">
<div id="RestImportJsonEdgeInvalid_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links&type=list&details=true &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"some name"</span> 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"details"</span> : [ 
    <span class="hljs-string">"at position 1: missing '_from' or '_to' attribute, offending document: {\"name\":\"some name\"}"</span> 
  ] 
}
</pre>
</div>
<div id="RestImportJsonEdgeInvalid_short" onclick="$('#RestImportJsonEdgeInvalid_short').hide(); $('#RestImportJsonEdgeInvalid_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links&type=list&details=true &lt;&lt;EOF
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"some name"</span> 
  } 
]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Violating a unique constraint, but allow partial imports
<br />

<div id="RestImportJsonUniqueContinue_container">
<div id="RestImportJsonUniqueContinue_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents&details=true &lt;&lt;EOF
{ "_key": "abc", "value1": 25, "value2": "test" }
{ "_key": "abc", "value1": "bar", "value2": "baz" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"details"</span> : [ 
    <span class="hljs-string">"at position 2: creating document failed with error 'unique constraint violated', offending document: {\"_key\":\"abc\",\"value1\":\"bar\",\"value2\":\"baz\"}"</span> 
  ] 
}
</pre>
</div>
<div id="RestImportJsonUniqueContinue_short" onclick="$('#RestImportJsonUniqueContinue_short').hide(); $('#RestImportJsonUniqueContinue_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents&details=true &lt;&lt;EOF
{ "_key": "abc", "value1": 25, "value2": "test" }
{ "_key": "abc", "value1": "bar", "value2": "baz" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Violating a unique constraint, not allowing partial imports
<br />

<div id="RestImportJsonUniqueFail_container">
<div id="RestImportJsonUniqueFail_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents&complete=true &lt;&lt;EOF
{ "_key": "abc", "value1": 25, "value2": "test" }
{ "_key": "abc", "value1": "bar", "value2": "baz" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">409</span> Conflict
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"cannot create document, unique constraint violated"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">409</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1210</span> 
}
</pre>
</div>
<div id="RestImportJsonUniqueFail_short" onclick="$('#RestImportJsonUniqueFail_short').hide(); $('#RestImportJsonUniqueFail_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents&complete=true &lt;&lt;EOF
{ "_key": "abc", "value1": 25, "value2": "test" }
{ "_key": "abc", "value1": "bar", "value2": "baz" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">409</span> Conflict
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a non-existing collection
<br />

<div id="RestImportJsonInvalidCollection_container">
<div id="RestImportJsonInvalidCollection_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents &lt;&lt;EOF
{ "name": "test" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'products' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestImportJsonInvalidCollection_short" onclick="$('#RestImportJsonInvalidCollection_short').hide(); $('#RestImportJsonInvalidCollection_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=documents &lt;&lt;EOF
{ "name": "test" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a malformed body
<br />

<div id="RestImportJsonInvalidBody_container">
<div id="RestImportJsonInvalidBody_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=list &lt;&lt;EOF
{ }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"expecting a JSON array in the request"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">400</span> 
}
</pre>
</div>
<div id="RestImportJsonInvalidBody_short" onclick="$('#RestImportJsonInvalidBody_short').hide(); $('#RestImportJsonInvalidBody_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&type=list &lt;&lt;EOF
{ }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestImportHandler.cpp -->
@startDocuBlock JSF_import_document

@brief imports documents from JSON-encoded lists
<br />
@RESTHEADER{POST /_api/import#document,imports document values}
<br />
@RESTALLBODYPARAM{documents,string,required}
The body must consist of JSON-encoded arrays of attribute values, with one
line per document. The first row of the request must be a JSON-encoded
array of attribute names. These attribute names are used for the data in the
subsequent lines.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
@RESTQUERYPARAM{createCollection,boolean,optional}
If this parameter has a value of `true` or `yes`, then the collection is
created if it does not yet exist. Other values will be ignored so the
collection must be present for the operation to succeed.
<br />
@RESTQUERYPARAM{createCollectionType,string,optional}
If this parameter has a value of `document` or `edge`, it will determine
the type of collection that is going to be created when the `createCollection`
option is set to `true`. The default value is `document`.
<br />
@RESTQUERYPARAM{overwrite,boolean,optional}
If this parameter has a value of `true` or `yes`, then all data in the
collection will be removed prior to the import. Note that any existing
index definitions will be preseved.
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Wait until documents have been synced to disk before returning.
<br />
@RESTQUERYPARAM{onDuplicate,string,optional}
Controls what action is carried out in case of a unique key constraint
violation. Possible values are:
<br />
- *error*: this will not import the current document because of the unique
  key constraint violation. This is the default setting.
<br />
- *update*: this will update an existing document in the database with the 
  data specified in the request. Attributes of the existing document that
  are not present in the request will be preseved.
<br />
- *replace*: this will replace an existing document in the database with the
  data specified in the request. 
<br />
- *ignore*: this will not update an existing document and simply ignore the
  error caused by the unique key constraint violation.
<br />
Note that *update*, *replace* and *ignore* will only work when the
import document in the request contains the *_key* attribute. *update* and
*replace* may also fail because of secondary unique key constraint violations.
<br />
@RESTQUERYPARAM{complete,boolean,optional}
If set to `true` or `yes`, it will make the whole import fail if any error
occurs. Otherwise the import will continue even if some documents cannot
be imported.
<br />
@RESTQUERYPARAM{details,boolean,optional}
If set to `true` or `yes`, the result will include an attribute `details`
with details about documents that could not be imported.
<br />
@RESTDESCRIPTION
**NOTE** Swagger examples won't work due to the anchor.
<br />
<br />
Creates documents in the collection identified by `collection-name`.
The first line of the request body must contain a JSON-encoded array of
attribute names. All following lines in the request body must contain
JSON-encoded arrays of attribute values. Each line is interpreted as a
separate document, and the values specified will be mapped to the array
of attribute names specified in the first header line.
<br />
The response is a JSON object with the following attributes:
<br />
- `created`: number of documents imported.
<br />
- `errors`: number of documents that were not imported due to an error.
<br />
- `empty`: number of empty lines found in the input (will only contain a
  value greater zero for types `documents` or `auto`).
<br />
- `updated`: number of updated/replaced documents (in case `onDuplicate`
  was set to either `update` or `replace`).
<br />
- `ignored`: number of failed but ignored insert operations (in case
  `onDuplicate` was set to `ignore`).
<br />
- `details`: if query parameter `details` is set to true, the result will
  contain a `details` attribute which is an array with more detailed
  information about which documents could not be inserted.
<br />
Note: this API is currently not supported on cluster coordinators.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if all documents could be imported successfully.
<br />
@RESTRETURNCODE{400}
is returned if `type` contains an invalid value, no `collection` is
specified, the documents are incorrectly encoded, or the request
is malformed.
<br />
@RESTRETURNCODE{404}
is returned if `collection` or the `_from` or `_to` attributes of an
imported edge refer to an unknown collection.
<br />
@RESTRETURNCODE{409}
is returned if the import would trigger a unique key violation and
`complete` is set to `true`.
<br />
@RESTRETURNCODE{500}
is returned if the server cannot auto-generate a document key (out of keys
error) for a document with no user-defined key.
<br />
@RESTRETURNCODE{501}
The server will respond with *HTTP 501* if this API is called on a cluster
coordinator.
<br />
@EXAMPLES
<br />
Importing two documents, with attributes `_key`, `value1` and `value2` each. One
line in the import data is empty
<br />

<div id="RestImportCsvExample_container">
<div id="RestImportCsvExample_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]

[ "foo", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportCsvExample_short" onclick="$('#RestImportCsvExample_short').hide(); $('#RestImportCsvExample_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]

[ "foo", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Importing two documents into a new collection
<br />

<div id="RestImportCsvCreate_container">
<div id="RestImportCsvCreate_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&createCollection=true &lt;&lt;EOF
[ "value1", "value2" ]
[ 1234, null ]
[ "foo", "bar" ]
[ 534.55, true ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportCsvCreate_short" onclick="$('#RestImportCsvCreate_short').hide(); $('#RestImportCsvCreate_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&createCollection=true &lt;&lt;EOF
[ "value1", "value2" ]
[ 1234, null ]
[ "foo", "bar" ]
[ 534.55, true ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Importing into an edge collection, with attributes `_from`, `_to` and `name`
<br />

<div id="RestImportCsvEdge_container">
<div id="RestImportCsvEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links &lt;&lt;EOF
[ "_from", "_to", "name" ]
[ "products/123", "products/234", "some name" ]
[ "products/332", "products/abc", "other name" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="RestImportCsvEdge_short" onclick="$('#RestImportCsvEdge_short').hide(); $('#RestImportCsvEdge_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links &lt;&lt;EOF
[ "_from", "_to", "name" ]
[ "products/123", "products/234", "some name" ]
[ "products/332", "products/abc", "other name" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Importing into an edge collection, omitting `_from` or `_to`
<br />

<div id="RestImportCsvEdgeInvalid_container">
<div id="RestImportCsvEdgeInvalid_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links&details=true &lt;&lt;EOF
[ "name" ]
[ "some name" ]
[ "other name" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"details"</span> : [ 
    <span class="hljs-string">"at position 1: missing '_from' or '_to' attribute, offending document: {\"name\":\"some name\"}"</span>, 
    <span class="hljs-string">"at position 2: missing '_from' or '_to' attribute, offending document: {\"name\":\"other name\"}"</span> 
  ] 
}
</pre>
</div>
<div id="RestImportCsvEdgeInvalid_short" onclick="$('#RestImportCsvEdgeInvalid_short').hide(); $('#RestImportCsvEdgeInvalid_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=links&details=true &lt;&lt;EOF
[ "name" ]
[ "some name" ]
[ "other name" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Violating a unique constraint, but allow partial imports
<br />

<div id="RestImportCsvUniqueContinue_container">
<div id="RestImportCsvUniqueContinue_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&details=true &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]
[ "abc", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"errors"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"empty"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"details"</span> : [ 
    <span class="hljs-string">"at position 2: creating document failed with error 'unique constraint violated', offending document: {\"_key\":\"abc\",\"value1\":\"bar\",\"value2\":\"baz\"}"</span> 
  ] 
}
</pre>
</div>
<div id="RestImportCsvUniqueContinue_short" onclick="$('#RestImportCsvUniqueContinue_short').hide(); $('#RestImportCsvUniqueContinue_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&details=true &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]
[ "abc", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Violating a unique constraint, not allowing partial imports
<br />

<div id="RestImportCsvUniqueFail_container">
<div id="RestImportCsvUniqueFail_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&complete=true &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]
[ "abc", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">409</span> Conflict
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"cannot create document, unique constraint violated"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">409</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1210</span> 
}
</pre>
</div>
<div id="RestImportCsvUniqueFail_short" onclick="$('#RestImportCsvUniqueFail_short').hide(); $('#RestImportCsvUniqueFail_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products&complete=true &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]
[ "abc", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">409</span> Conflict
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a non-existing collection
<br />

<div id="RestImportCsvInvalidCollection_container">
<div id="RestImportCsvInvalidCollection_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]
[ "foo", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection 'products' not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestImportCsvInvalidCollection_short" onclick="$('#RestImportCsvInvalidCollection_short').hide(); $('#RestImportCsvInvalidCollection_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products &lt;&lt;EOF
[ "_key", "value1", "value2" ]
[ "abc", 25, "test" ]
[ "foo", "bar", "baz" ]
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a malformed body
<br />

<div id="RestImportCsvInvalidBody_container">
<div id="RestImportCsvInvalidBody_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products &lt;&lt;EOF
{ "_key": "foo", "value1": "bar" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"no JSON array found in second line"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">400</span> 
}
</pre>
</div>
<div id="RestImportCsvInvalidBody_short" onclick="$('#RestImportCsvInvalidBody_short').hide(); $('#RestImportCsvInvalidBody_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/import?collection=products &lt;&lt;EOF
{ "_key": "foo", "value1": "bar" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestCursorHandler.cpp -->
@startDocuBlock JSF_post_api_cursor

@brief create a cursor and return the first results
<br />
@RESTHEADER{POST /_api/cursor, Create cursor}
<br />
A JSON object describing the query and query parameters.
<br />
@RESTBODYPARAM{query,string,required,string}
contains the query string to be executed
<br />
@RESTBODYPARAM{count,boolean,optional,}
indicates whether the number of documents in the result set should be returned in
the "count" attribute of the result.
Calculating the "count" attribute might in the future have a performance
impact for some queries so this option is turned off by default, and "count"
is only returned when requested.
<br />
@RESTBODYPARAM{batchSize,integer,optional,int64}
maximum number of result documents to be transferred from
the server to the client in one roundtrip. If this attribute is
not set, a server-controlled default value will be used. A *batchSize* value of
*0* is disallowed.
<br />
@RESTBODYPARAM{ttl,integer,optional,int64}
The time-to-live for the cursor (in seconds). The cursor will be
removed on the server automatically after the specified amount of time. This
is useful to ensure garbage collection of cursors that are not fully fetched
by clients. If not set, a server-defined value will be used.
<br />
@RESTBODYPARAM{cache,boolean,optional,}
flag to determine whether the AQL query cache
shall be used. If set to *false*, then any query cache lookup will be skipped
for the query. If set to *true*, it will lead to the query cache being checked
for the query if the query cache mode is either *on* or *demand*.
<br />
@RESTBODYPARAM{bindVars,array,optional,object}
list of bind parameter objects.
<br />
@RESTBODYPARAM{options,object,optional,JSF_post_api_cursor_opts}
key/value object with extra options for the query.
<br />
@RESTSTRUCT{fullCount,JSF_post_api_cursor_opts,boolean,optional,}
if set to *true* and the query contains a *LIMIT* clause, then the
result will contain an extra attribute *extra* with a sub-attribute *fullCount*.
This sub-attribute will contain the number of documents in the result before the
last LIMIT in the query was applied. It can be used to count the number of documents that
match certain filter criteria, but only return a subset of them, in one go.
It is thus similar to MySQL's *SQL_CALC_FOUND_ROWS* hint. Note that setting the option
will disable a few LIMIT optimizations and may lead to more documents being processed,
and thus make queries run longer. Note that the *fullCount* sub-attribute will only
be present in the result if the query has a LIMIT clause and the LIMIT clause is
actually used in the query.
<br />
@RESTSTRUCT{maxPlans,JSF_post_api_cursor_opts,integer,optional,int64}
limits the maximum number of plans that are created by the AQL query optimizer.
<br />
@RESTSTRUCT{optimizer.rules,JSF_post_api_cursor_opts,array,optional,string}
a list of to-be-included or to-be-excluded optimizer rules
can be put into this attribute, telling the optimizer to include or exclude
specific rules. To disable a rule, prefix its name with a `-`, to enable a rule, prefix it
with a `+`. There is also a pseudo-rule `all`, which will match all optimizer rules.
<br />
@RESTSTRUCT{profile,JSF_post_api_cursor_opts,boolean,optional,}
if set to *true*, then the additional query profiling information
will be returned in the *extra.stats* return attribute if the query result is not
served from the query cache.
<br />
@RESTDESCRIPTION
The query details include the query string plus optional query options and
bind parameters. These values need to be passed in a JSON representation in
the body of the POST request.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the result set can be created by the server.
<br />
@RESTREPLYBODY{error,boolean,required,}
A flag to indicate that an error occurred (*false* in this case)
<br />
@RESTREPLYBODY{code,integer,required,integer}
the HTTP status code
<br />
@RESTREPLYBODY{result,array,optional,}
an array of result documents (might be empty if query has no results)
<br />
@RESTREPLYBODY{hasMore,boolean,required,}
A boolean indicator whether there are more results
available for the cursor on the server
<br />
@RESTREPLYBODY{count,integer,optional,int64}
the total number of result documents available (only
available if the query was executed with the *count* attribute set)
<br />
@RESTREPLYBODY{id,string,required,string}
id of temporary cursor created on the server (optional, see above)
<br />
@RESTREPLYBODY{extra,object,optional,}
an optional JSON object with extra information about the query result
contained in its *stats* sub-attribute. For data-modification queries, the 
*extra.stats* sub-attribute will contain the number of modified documents and 
the number of documents that could not be modified
due to an error (if *ignoreErrors* query option is specified)
<br />
@RESTREPLYBODY{cached,boolean,required,}
a boolean flag indicating whether the query result was served 
from the query cache or not. If the query result is served from the query
cache, the *extra* return attribute will not contain any *stats* sub-attribute
and no *profile* sub-attribute.
<br />
@RESTRETURNCODE{400}
is returned if the JSON representation is malformed or the query specification is
missing from the request.
<br />
If the JSON representation is malformed or the query specification is
missing from the request, the server will respond with *HTTP 400*.
<br />
The body of the response will contain a JSON object with additional error
details. The object has the following attributes:
<br />
@RESTREPLYBODY{error,boolean,required,}
boolean flag to indicate that an error occurred (*true* in this case)
<br />
@RESTREPLYBODY{code,integer,required,int64}
the HTTP status code
<br />
@RESTREPLYBODY{errorNum,integer,required,int64}
the server error number
<br />
@RESTREPLYBODY{errorMessage,string,required,string}
a descriptive error message
<br />
If the query specification is complete, the server will process the query. If an
error occurs during query processing, the server will respond with *HTTP 400*.
Again, the body of the response will contain details about the error.
<br />
A [list of query errors can be found here](../ErrorCodes/README.md).
<br />
<br />
@RESTRETURNCODE{404}
The server will respond with *HTTP 404* in case a non-existing collection is
accessed in the query.
<br />
@RESTRETURNCODE{405}
The server will respond with *HTTP 405* if an unsupported HTTP method is used.
<br />
@EXAMPLES
<br />
Execute a query and extract the result in a single go
<br />

<div id="RestCursorCreateCursorForLimitReturnSingle_container">
<div id="RestCursorCreateCursorForLimitReturnSingle_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 2 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"hello1"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/671828097"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"671828097"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"671828097"</span> 
    }, 
    { 
      <span class="hljs-string">"hello2"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/672155777"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"672155777"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"672155777"</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">2</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.00010013580322265625</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestCursorCreateCursorForLimitReturnSingle_short" onclick="$('#RestCursorCreateCursorForLimitReturnSingle_short').hide(); $('#RestCursorCreateCursorForLimitReturnSingle_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 2 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Execute a query and extract a part of the result
<br />

<div id="RestCursorCreateCursorForLimitReturn_container">
<div id="RestCursorCreateCursorForLimitReturn_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 5 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"hello2"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/670189697"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"670189697"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"670189697"</span> 
    }, 
    { 
      <span class="hljs-string">"hello3"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/670517377"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"670517377"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"670517377"</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"671369345"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">5</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">5</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.0001430511474609375</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestCursorCreateCursorForLimitReturn_short" onclick="$('#RestCursorCreateCursorForLimitReturn_short').hide(); $('#RestCursorCreateCursorForLimitReturn_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 5 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using the query option "fullCount"
<br />

<div id="RestCursorCreateCursorOption_container">
<div id="RestCursorCreateCursorOption_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..1000 FILTER i &gt; 500 LIMIT 10 RETURN i"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"fullCount"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    <span class="hljs-number">501</span>, 
    <span class="hljs-number">502</span>, 
    <span class="hljs-number">503</span>, 
    <span class="hljs-number">504</span>, 
    <span class="hljs-number">505</span>, 
    <span class="hljs-number">506</span>, 
    <span class="hljs-number">507</span>, 
    <span class="hljs-number">508</span>, 
    <span class="hljs-number">509</span>, 
    <span class="hljs-number">510</span> 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">500</span>, 
      <span class="hljs-string">"fullCount"</span> : <span class="hljs-number">500</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.0014190673828125</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestCursorCreateCursorOption_short" onclick="$('#RestCursorCreateCursorOption_short').hide(); $('#RestCursorCreateCursorOption_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..1000 FILTER i &gt; 500 LIMIT 10 RETURN i"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"fullCount"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Enabling and disabling optimizer rules
<br />

<div id="RestCursorOptimizerRules_container">
<div id="RestCursorOptimizerRules_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..10 LET a = 1 LET b = 2 FILTER a + b == 3 RETURN i"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"maxPlans"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"optimizer"</span> : { 
      <span class="hljs-string">"rules"</span> : [ 
        <span class="hljs-string">"-all"</span>, 
        <span class="hljs-string">"+remove-unnecessary-filters"</span> 
      ] 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">2</span>, 
    <span class="hljs-number">3</span>, 
    <span class="hljs-number">4</span>, 
    <span class="hljs-number">5</span>, 
    <span class="hljs-number">6</span>, 
    <span class="hljs-number">7</span>, 
    <span class="hljs-number">8</span>, 
    <span class="hljs-number">9</span>, 
    <span class="hljs-number">10</span> 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.0005660057067871094</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestCursorOptimizerRules_short" onclick="$('#RestCursorOptimizerRules_short').hide(); $('#RestCursorOptimizerRules_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..10 LET a = 1 LET b = 2 FILTER a + b == 3 RETURN i"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"maxPlans"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"optimizer"</span> : { 
      <span class="hljs-string">"rules"</span> : [ 
        <span class="hljs-string">"-all"</span>, 
        <span class="hljs-string">"+remove-unnecessary-filters"</span> 
      ] 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Execute a data-modification query and retrieve the number of
modified documents
<br />

<div id="RestCursorDeleteQuery_container">
<div id="RestCursorDeleteQuery_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products REMOVE p IN products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">2</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">2</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.00011110305786132812</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestCursorDeleteQuery_short" onclick="$('#RestCursorDeleteQuery_short').hide(); $('#RestCursorDeleteQuery_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products REMOVE p IN products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Execute a data-modification query with option *ignoreErrors*
<br />

<div id="RestCursorDeleteIgnore_container">
<div id="RestCursorDeleteIgnore_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"REMOVE 'bar' IN products OPTIONS { ignoreErrors: true }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.00012803077697753906</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestCursorDeleteIgnore_short" onclick="$('#RestCursorDeleteIgnore_short').hide(); $('#RestCursorDeleteIgnore_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"REMOVE 'bar' IN products OPTIONS { ignoreErrors: true }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Bad query - Missing body
<br />

<div id="RestCursorCreateCursorMissingBody_container">
<div id="RestCursorCreateCursorMissingBody_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --dump - http://localhost:8529/_api/cursor

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"expecting atom, got end-of-file"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">600</span> 
}
</pre>
</div>
<div id="RestCursorCreateCursorMissingBody_short" onclick="$('#RestCursorCreateCursorMissingBody_short').hide(); $('#RestCursorCreateCursorMissingBody_long').show();">
<pre>
shell> curl -X POST --dump - http://localhost:8529/_api/cursor

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Bad query - Unknown collection
<br />

<div id="RestCursorCreateCursorUnknownCollection_container">
<div id="RestCursorCreateCursorUnknownCollection_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR u IN unknowncoll LIMIT 2 RETURN u"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection not found (unknowncoll)"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span> 
}
</pre>
</div>
<div id="RestCursorCreateCursorUnknownCollection_short" onclick="$('#RestCursorCreateCursorUnknownCollection_short').hide(); $('#RestCursorCreateCursorUnknownCollection_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR u IN unknowncoll LIMIT 2 RETURN u"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Bad query - Execute a data-modification query that attempts to remove a non-existing
document
<br />

<div id="RestCursorDeleteQueryFail_container">
<div id="RestCursorDeleteQueryFail_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"REMOVE 'foo' IN products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"document not found (while executing)"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1202</span> 
}
</pre>
</div>
<div id="RestCursorDeleteQueryFail_short" onclick="$('#RestCursorDeleteQueryFail_short').hide(); $('#RestCursorDeleteQueryFail_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"REMOVE 'foo' IN products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestCursorHandler.cpp -->
@startDocuBlock JSF_post_api_cursor_identifier

@brief return the next results from an existing cursor
<br />
@RESTHEADER{PUT /_api/cursor/{cursor-identifier}, Read next batch from cursor}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{cursor-identifier,string,required}
The name of the cursor
<br />
@RESTDESCRIPTION
<br />
If the cursor is still alive, returns an object with the following
attributes:
<br />
- *id*: the *cursor-identifier*
- *result*: a list of documents for the current batch
- *hasMore*: *false* if this was the last batch
- *count*: if present the total number of elements
<br />
Note that even if *hasMore* returns *true*, the next call might
still return no documents. If, however, *hasMore* is *false*, then
the cursor is exhausted.  Once the *hasMore* attribute has a value of
*false*, the client can stop.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
The server will respond with *HTTP 200* in case of success.
<br />
@RESTRETURNCODE{400}
If the cursor identifier is omitted, the server will respond with *HTTP 404*.
<br />
@RESTRETURNCODE{404}
If no cursor with the specified identifier can be found, the server will respond
with *HTTP 404*.
<br />
@EXAMPLES
<br />
Valid request for next batch
<br />

<div id="RestCursorForLimitReturnCont_container">
<div id="RestCursorForLimitReturnCont_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 5 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

shell> curl -X PUT --dump - http://localhost:8529/_api/cursor/678774913

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"hello3"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/677922945"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"677922945"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"677922945"</span> 
    }, 
    { 
      <span class="hljs-string">"hello1"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/677267585"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"677267585"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"677267585"</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"678774913"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">5</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">5</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.00011706352233886719</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCursorForLimitReturnCont_short" onclick="$('#RestCursorForLimitReturnCont_short').hide(); $('#RestCursorForLimitReturnCont_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 5 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

shell> curl -X PUT --dump - http://localhost:8529/_api/cursor/678774913

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Missing identifier
<br />

<div id="RestCursorMissingCursorIdentifier_container">
<div id="RestCursorMissingCursorIdentifier_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/cursor

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"expecting PUT /_api/cursor/&lt;cursor-id&gt;"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">400</span> 
}
</pre>
</div>
<div id="RestCursorMissingCursorIdentifier_short" onclick="$('#RestCursorMissingCursorIdentifier_short').hide(); $('#RestCursorMissingCursorIdentifier_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/cursor

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Unknown identifier
<br />

<div id="RestCursorInvalidCursorIdentifier_container">
<div id="RestCursorInvalidCursorIdentifier_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/cursor/123123

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"cursor not found"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1600</span> 
}
</pre>
</div>
<div id="RestCursorInvalidCursorIdentifier_short" onclick="$('#RestCursorInvalidCursorIdentifier_short').hide(); $('#RestCursorInvalidCursorIdentifier_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/cursor/123123

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestCursorHandler.cpp -->
@startDocuBlock JSF_post_api_cursor_delete

@brief dispose an existing cursor
<br />
@RESTHEADER{DELETE /_api/cursor/{cursor-identifier}, Delete cursor}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{cursor-identifier,string,required}
The id of the cursor
<br />
@RESTDESCRIPTION
Deletes the cursor and frees the resources associated with it.
<br />
The cursor will automatically be destroyed on the server when the client has
retrieved all documents from it. The client can also explicitly destroy the
cursor at any earlier time using an HTTP DELETE request. The cursor id must
be included as part of the URL.
<br />
Note: the server will also destroy abandoned cursors automatically after a
certain server-controlled timeout to avoid resource leakage.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{202}
is returned if the server is aware of the cursor.
<br />
@RESTRETURNCODE{404}
is returned if the server is not aware of the cursor. It is also
returned if a cursor is used after it has been destroyed.
<br />
@EXAMPLES
<br />

<div id="RestCursorDelete_container">
<div id="RestCursorDelete_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 5 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"hello5"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/674121857"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"674121857"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"674121857"</span> 
    }, 
    { 
      <span class="hljs-string">"hello3"</span> : <span class="hljs-string">"world1"</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/673466497"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"673466497"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"673466497"</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"674318465"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">5</span>, 
  <span class="hljs-string">"extra"</span> : { 
    <span class="hljs-string">"stats"</span> : { 
      <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">5</span>, 
      <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.00011110305786132812</span> 
    }, 
    <span class="hljs-string">"warnings"</span> : [ ] 
  }, 
  <span class="hljs-string">"cached"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
shell> curl -X DELETE --dump - http://localhost:8529/_api/cursor/674318465

</pre>
</div>
<div id="RestCursorDelete_short" onclick="$('#RestCursorDelete_short').hide(); $('#RestCursorDelete_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/cursor &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LIMIT 5 RETURN p"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"batchSize"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_get_api_replication_logger_return_state

@brief returns the state of the replication logger
<br />
@RESTHEADER{GET /_api/replication/logger-state, Return replication logger state}
<br />
@RESTDESCRIPTION
Returns the current state of the server's replication logger. The state will
include information about whether the logger is running and about the last
logged tick value. This tick value is important for incremental fetching of
data.
<br />
The body of the response contains a JSON object with the following
attributes:
<br />
- *state*: the current logger state as a JSON object with the following
  sub-attributes:
<br />
  - *running*: whether or not the logger is running
<br />
  - *lastLogTick*: the tick value of the latest tick the logger has logged.
    This value can be used for incremental fetching of log data.
<br />
  - *totalEvents*: total number of events logged since the server was started.
    The value is not reset between multiple stops and re-starts of the logger.
<br />
  - *time*: the current date and time on the logger server
<br />
- *server*: a JSON object with the following sub-attributes:
<br />
  - *version*: the logger server's version
<br />
  - *serverId*: the logger server's id
<br />
- *clients*: returns the last fetch status by replication clients connected to
  the logger. Each client is returned as a JSON object with the following attributes:
<br />
  - *serverId*: server id of client
<br />
  - *lastServedTick*: last tick value served to this client via the *logger-follow* API
<br />
  - *time*: date and time when this client last called the *logger-follow* API
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the logger state could be determined successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if the logger state could not be determined.
<br />
@EXAMPLES
<br />
Returns the state of the replication logger.
<br />

<div id="RestReplicationLoggerStateActive_container">
<div id="RestReplicationLoggerStateActive_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/logger-state

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"state"</span> : { 
    <span class="hljs-string">"running"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"lastLogTick"</span> : <span class="hljs-string">"794183809"</span>, 
    <span class="hljs-string">"totalEvents"</span> : <span class="hljs-number">4949</span>, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:52Z"</span> 
  }, 
  <span class="hljs-string">"server"</span> : { 
    <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span>, 
    <span class="hljs-string">"serverId"</span> : <span class="hljs-string">"160423210519972"</span> 
  }, 
  <span class="hljs-string">"clients"</span> : [ ] 
}
</pre>
</div>
<div id="RestReplicationLoggerStateActive_short" onclick="$('#RestReplicationLoggerStateActive_short').hide(); $('#RestReplicationLoggerStateActive_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/logger-state

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_get_api_replication_logger_tick_ranges

@brief returns the tick value ranges available in the logfiles
<br />
@RESTHEADER{GET /_api/replication/logger-tick-ranges, Return the tick ranges available in the WAL logfiles}
<br />
@RESTDESCRIPTION
Returns the currently available ranges of tick values for all currently
available WAL logfiles. The tick values can be used to determine if certain
data (identified by tick value) are still available for replication.
<br />
The body of the response contains a JSON array. Each array member is an object
that describes a single logfile. Each object has the following attributes:
<br />
* *datafile*: name of the logfile
<br />
* *status*: status of the datafile, in textual form (e.g. "sealed", "open")
<br />
* *tickMin*: minimum tick value contained in logfile
<br />
* *tickMax*: maximum tick value contained in logfile
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the tick ranges could be determined successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if the logger state could not be determined.
<br />
@RESTRETURNCODE{501}
is returned when this operation is called on a coordinator in a cluster.
<br />
@EXAMPLES
<br />
Returns the available tick ranges.
<br />

<div id="RestReplicationLoggerTickRanges_container">
<div id="RestReplicationLoggerTickRanges_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/logger-tick-ranges

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  { 
    <span class="hljs-string">"datafile"</span> : <span class="hljs-string">"/tmp/vocdir.22090/journals/logfile-149633.db"</span>, 
    <span class="hljs-string">"status"</span> : <span class="hljs-string">"collected"</span>, 
    <span class="hljs-string">"tickMin"</span> : <span class="hljs-string">"346241"</span>, 
    <span class="hljs-string">"tickMax"</span> : <span class="hljs-string">"666126465"</span> 
  }, 
  { 
    <span class="hljs-string">"datafile"</span> : <span class="hljs-string">"/tmp/vocdir.22090/journals/logfile-666257537.db"</span>, 
    <span class="hljs-string">"status"</span> : <span class="hljs-string">"collected"</span>, 
    <span class="hljs-string">"tickMin"</span> : <span class="hljs-string">"666519681"</span>, 
    <span class="hljs-string">"tickMax"</span> : <span class="hljs-string">"668944513"</span> 
  }, 
  { 
    <span class="hljs-string">"datafile"</span> : <span class="hljs-string">"/tmp/vocdir.22090/journals/logfile-669075585.db"</span>, 
    <span class="hljs-string">"status"</span> : <span class="hljs-string">"collected"</span>, 
    <span class="hljs-string">"tickMin"</span> : <span class="hljs-string">"669272193"</span>, 
    <span class="hljs-string">"tickMax"</span> : <span class="hljs-string">"785795201"</span> 
  }, 
  { 
    <span class="hljs-string">"datafile"</span> : <span class="hljs-string">"/tmp/vocdir.22090/journals/logfile-785926273.db"</span>, 
    <span class="hljs-string">"status"</span> : <span class="hljs-string">"collected"</span>, 
    <span class="hljs-string">"tickMin"</span> : <span class="hljs-string">"786057345"</span>, 
    <span class="hljs-string">"tickMax"</span> : <span class="hljs-string">"786188417"</span> 
  }, 
  { 
    <span class="hljs-string">"datafile"</span> : <span class="hljs-string">"/tmp/vocdir.22090/journals/logfile-786319489.db"</span>, 
    <span class="hljs-string">"status"</span> : <span class="hljs-string">"open"</span>, 
    <span class="hljs-string">"tickMin"</span> : <span class="hljs-string">"786450561"</span>, 
    <span class="hljs-string">"tickMax"</span> : <span class="hljs-string">"794183809"</span> 
  } 
]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_get_api_replication_logger_first_tick

@brief Return the first available tick value from the server
<br />
@RESTHEADER{GET /_api/replication/logger-first-tick, Returns the first available tick value}
<br />
@RESTDESCRIPTION
Returns the first available tick value that can be served from the server's
replication log. This method can be called by replication clients after to
determine if certain data (identified by a tick value) is still available
for replication.
<br />
The result is a JSON object containing the attribute *firstTick*. This
attribute contains the minimum tick value available in the server's replication
log. 
<br />
**Note**: this method is not supported on a coordinator in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@RESTRETURNCODE{501}
is returned when this operation is called on a coordinator in a cluster.
<br />
@EXAMPLES
<br />
Returning the first available tick
<br />

<div id="RestReplicationLoggerFirstTick_container">
<div id="RestReplicationLoggerFirstTick_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/logger-first-tick

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

"{\"firstTick\":\"346241\"}"
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_post_batch_replication

@brief handle a dump batch command
<br />
@RESTHEADER{POST /_api/replication/batch, Create new dump batch}
<br />
**Note**: These calls are uninteresting to users.
<br />
@RESTBODYPARAM{ttl,integer,required,int64}
the time-to-live for the new batch (in seconds)
<br />
A JSON object with the batch configuration.
<br />
@RESTDESCRIPTION
Creates a new dump batch and returns the batch's id.
<br />
The response is a JSON object with the following attributes:
<br />
- *id*: the id of the batch
<br />
**Note**: on a coordinator, this request must have the query parameter
*DBserver* which must be an ID of a DBserver.
The very same request is forwarded synchronously to that DBserver.
It is an error if this attribute is not bound in the coordinator case.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{204}
is returned if the batch was created successfully.
<br />
@RESTRETURNCODE{400}
is returned if the ttl value is invalid or if *DBserver* attribute
is not specified or illegal on a coordinator.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_batch_replication

@brief handle a dump batch command
<br />
@RESTHEADER{PUT /_api/replication/batch/{id}, Prolong existing dump batch}
<br />
**Note**: These calls are uninteresting to users.
<br />
@RESTBODYPARAM{ttl,integer,required,int64}
the time-to-live for the new batch (in seconds)
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{id,string,required}
The id of the batch.
<br />
@RESTDESCRIPTION
Extends the ttl of an existing dump batch, using the batch's id and
the provided ttl value.
<br />
If the batch's ttl can be extended successfully, the response is empty.
<br />
**Note**: on a coordinator, this request must have the query parameter
*DBserver* which must be an ID of a DBserver.
The very same request is forwarded synchronously to that DBserver.
It is an error if this attribute is not bound in the coordinator case.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{204}
is returned if the batch's ttl was extended successfully.
<br />
@RESTRETURNCODE{400}
is returned if the ttl value is invalid or the batch was not found.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_delete_batch_replication

@brief handle a dump batch command
<br />
@RESTHEADER{DELETE /_api/replication/batch/{id}, Deletes an existing dump batch}
<br />
**Note**: These calls are uninteresting to users.
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{id,string,required}
The id of the batch.
<br />
@RESTDESCRIPTION
Deletes the existing dump batch, allowing compaction and cleanup to resume.
<br />
**Note**: on a coordinator, this request must have the query parameter
*DBserver* which must be an ID of a DBserver.
The very same request is forwarded synchronously to that DBserver.
It is an error if this attribute is not bound in the coordinator case.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{204}
is returned if the batch was deleted successfully.
<br />
@RESTRETURNCODE{400}
is returned if the batch was not found.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_get_api_replication_logger_returns

@brief Fetch log lines from the server
<br />
@RESTHEADER{GET /_api/replication/logger-follow, Returns log entries}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{from,number,optional}
Lower bound tick value for results.
<br />
@RESTQUERYPARAM{to,number,optional}
Upper bound tick value for results.
<br />
@RESTQUERYPARAM{chunkSize,number,optional}
Approximate maximum size of the returned result.
<br />
@RESTQUERYPARAM{includeSystem,boolean,optional}
Include system collections in the result. The default value is *true*.
<br />
@RESTDESCRIPTION
Returns data from the server's replication log. This method can be called
by replication clients after an initial synchronization of data. The method
will return all "recent" log entries from the logger server, and the clients
can replay and apply these entries locally so they get to the same data
state as the logger server.
<br />
Clients can call this method repeatedly to incrementally fetch all changes
from the logger server. In this case, they should provide the *from* value so
they will only get returned the log events since their last fetch.
<br />
When the *from* query parameter is not used, the logger server will return log
entries starting at the beginning of its replication log. When the *from*
parameter is used, the logger server will only return log entries which have
higher tick values than the specified *from* value (note: the log entry with a
tick value equal to *from* will be excluded). Use the *from* value when
incrementally fetching log data.
<br />
The *to* query parameter can be used to optionally restrict the upper bound of
the result to a certain tick value. If used, the result will contain only log events
with tick values up to (including) *to*. In incremental fetching, there is no
need to use the *to* parameter. It only makes sense in special situations,
when only parts of the change log are required.
<br />
The *chunkSize* query parameter can be used to control the size of the result.
It must be specified in bytes. The *chunkSize* value will only be honored
approximately. Otherwise a too low *chunkSize* value could cause the server
to not be able to put just one log entry into the result and return it.
Therefore, the *chunkSize* value will only be consulted after a log entry has
been written into the result. If the result size is then bigger than
*chunkSize*, the server will respond with as many log entries as there are
in the response already. If the result size is still smaller than *chunkSize*,
the server will try to return more data if there's more data left to return.
<br />
If *chunkSize* is not specified, some server-side default value will be used.
<br />
The *Content-Type* of the result is *application/x-arango-dump*. This is an
easy-to-process format, with all log events going onto separate lines in the
response body. Each log event itself is a JSON object, with at least the
following attributes:
<br />
- *tick*: the log event tick value
<br />
- *type*: the log event type
<br />
Individual log events will also have additional attributes, depending on the
event type. A few common attributes which are used for multiple events types
are:
<br />
- *cid*: id of the collection the event was for
<br />
- *tid*: id of the transaction the event was contained in
<br />
- *key*: document key
<br />
- *rev*: document revision id
<br />
- *data*: the original document data
<br />
A more detailed description of the individual replication event types and their
data structures can be found in @ref RefManualReplicationEventTypes.
<br />
The response will also contain the following HTTP headers:
<br />
- *x-arango-replication-active*: whether or not the logger is active. Clients
  can use this flag as an indication for their polling frequency. If the
  logger is not active and there are no more replication events available, it
  might be sensible for a client to abort, or to go to sleep for a long time
  and try again later to check whether the logger has been activated.
<br />
- *x-arango-replication-lastincluded*: the tick value of the last included
  value in the result. In incremental log fetching, this value can be used
  as the *from* value for the following request. **Note** that if the result is
  empty, the value will be *0*. This value should not be used as *from* value
  by clients in the next request (otherwise the server would return the log
  events from the start of the log again).
<br />
- *x-arango-replication-lasttick*: the last tick value the logger server has
  logged (not necessarily included in the result). By comparing the the last
  tick and last included tick values, clients have an approximate indication of
  how many events there are still left to fetch.
<br />
- *x-arango-replication-checkmore*: whether or not there already exists more
  log data which the client could fetch immediately. If there is more log data
  available, the client could call *logger-follow* again with an adjusted *from*
  value to fetch remaining log entries until there are no more.
<br />
  If there isn't any more log data to fetch, the client might decide to go
  to sleep for a while before calling the logger again.
<br />
**Note**: this method is not supported on a coordinator in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully, and there are log
events available for the requested range. The response body will not be empty
in this case.
<br />
@RESTRETURNCODE{204}
is returned if the request was executed successfully, but there are no log
events available for the requested range. The response body will be empty
in this case.
<br />
@RESTRETURNCODE{400}
is returned if either the *from* or *to* values are invalid.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@RESTRETURNCODE{501}
is returned when this operation is called on a coordinator in a cluster.
<br />
@EXAMPLES
<br />
No log events available
<br />

<div id="RestReplicationLoggerFollowEmpty_container">
<div id="RestReplicationLoggerFollowEmpty_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/logger-follow?from=792938625

HTTP/1.1 204 No Content
content-type: application/x-arango-dump; charset=utf-8
x-arango-replication-active: true
x-arango-replication-checkmore: false
x-arango-replication-frompresent: true
x-arango-replication-lastincluded: 0
x-arango-replication-lasttick: 792938625

</pre>
</div>
</div>

<br />
A few log events
<br />

<div id="RestReplicationLoggerFollowSome_container">
<div id="RestReplicationLoggerFollowSome_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/logger-follow?from=792938625

HTTP/1.1 200 OK
content-type: application/x-arango-dump; charset=utf-8
x-arango-replication-active: true
x-arango-replication-checkmore: false
x-arango-replication-frompresent: true
x-arango-replication-lastincluded: 794183809
x-arango-replication-lasttick: 794183809

"{\"tick\":\"793069697\",\"type\":2000,\"database\":\"84097\",\"cid\":\"793004161\",\"collection\":{\"version\":5,\"type\":2,\"cid\":\"793004161\",\"indexBuckets\":8,\"deleted\":false,\"doCompact\":true,\"maximalSize\":1048576,\"name\":\"products\",\"isVolatile\":false,\"waitForSync\":false}}\n{\"tick\":\"793397377\",\"type\":2300,\"database\":\"84097\",\"cid\":\"793004161\",\"tid\":\"0\",\"key\":\"p1\",\"rev\":\"793331841\",\"data\":{\"_key\":\"p1\",\"_rev\":\"793331841\",\"name\":\"flux compensator\"}}\n{\"tick\":\"793725057\",\"type\":2300,\"database\":\"84097\",\"cid\":\"793004161\",\"tid\":\"0\",\"key\":\"p2\",\"rev\":\"793659521\",\"data\":{\"_key\":\"p2\",\"_rev\":\"793659521\",\"hp\":5100,\"name\":\"hybrid hovercraft\"}}\n{\"tick\":\"793921665\",\"type\":2302,\"database\":\"84097\",\"cid\":\"793004161\",\"tid\":\"0\",\"key\":\"p1\",\"rev\":\"793856129\"}\n{\"tick\":\"794118273\",\"type\":2300,\"database\":\"84097\",\"cid\":\"793004161\",\"tid\":\"0\",\"key\":\"p2\",\"rev\":\"794052737\",\"data\":{\"_key\":\"p2\",\"_rev\":\"794052737\"}}\n{\"tick\":\"794183809\",\"type\":2001,\"database\":\"84097\",\"cid\":\"793004161\"}\n"
</pre>
</div>
</div>

<br />
More events than would fit into the response
<br />

<div id="RestReplicationLoggerFollowBufferLimit_container">
<div id="RestReplicationLoggerFollowBufferLimit_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/logger-follow?from=788351105&chunkSize=400

HTTP/1.1 200 OK
content-type: application/x-arango-dump; charset=utf-8
x-arango-replication-active: true
x-arango-replication-checkmore: true
x-arango-replication-frompresent: true
x-arango-replication-lastincluded: 788940929
x-arango-replication-lasttick: 789989505

"{\"tick\":\"788416641\",\"type\":2001,\"database\":\"84097\",\"cid\":\"786516097\"}\n{\"tick\":\"788482177\",\"type\":2001,\"database\":\"84097\",\"cid\":\"787499137\"}\n{\"tick\":\"788613249\",\"type\":2000,\"database\":\"84097\",\"cid\":\"788547713\",\"collection\":{\"version\":5,\"type\":2,\"cid\":\"788547713\",\"indexBuckets\":8,\"deleted\":false,\"doCompact\":true,\"maximalSize\":1048576,\"name\":\"products\",\"isVolatile\":false,\"waitForSync\":false}}\n{\"tick\":\"788940929\",\"type\":2300,\"database\":\"84097\",\"cid\":\"788547713\",\"tid\":\"0\",\"key\":\"p1\",\"rev\":\"788875393\",\"data\":{\"_key\":\"p1\",\"_rev\":\"788875393\",\"name\":\"flux compensator\"}}\n"
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_inventory

@brief Returns an overview of collections and their indexes
<br />
@RESTHEADER{GET /_api/replication/inventory, Return inventory of collections and indexes}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{includeSystem,boolean,optional}
Include system collections in the result. The default value is *true*.
<br />
@RESTDESCRIPTION
Returns the array of collections and indexes available on the server. This
array can be used by replication clients to initiate an initial sync with the
server.
<br />
The response will contain a JSON object with the *collection* and *state* and
*tick* attributes.
<br />
*collections* is a array of collections with the following sub-attributes:
<br />
- *parameters*: the collection properties
<br />
- *indexes*: a array of the indexes of a the collection. Primary indexes and edges indexes
   are not included in this array.
<br />
The *state* attribute contains the current state of the replication logger. It
contains the following sub-attributes:
<br />
- *running*: whether or not the replication logger is currently active. Note:
  since ArangoDB 2.2, the value will always be *true*
<br />
- *lastLogTick*: the value of the last tick the replication logger has written
<br />
- *time*: the current time on the server
<br />
Replication clients should note the *lastLogTick* value returned. They can then
fetch collections' data using the dump method up to the value of lastLogTick, and
query the continuous replication log for log events after this tick value.
<br />
To create a full copy of the collections on the server, a replication client
can execute these steps:
<br />
- call the */inventory* API method. This returns the *lastLogTick* value and the
  array of collections and indexes from the server.
<br />
- for each collection returned by */inventory*, create the collection locally and
  call */dump* to stream the collection data to the client, up to the value of
  *lastLogTick*.
  After that, the client can create the indexes on the collections as they were
  reported by */inventory*.
<br />
If the clients wants to continuously stream replication log events from the logger
server, the following additional steps need to be carried out:
<br />
- the client should call */logger-follow* initially to fetch the first batch of
  replication events that were logged after the client's call to */inventory*.
<br />
  The call to */logger-follow* should use a *from* parameter with the value of the
  *lastLogTick* as reported by */inventory*. The call to */logger-follow* will return the
  *x-arango-replication-lastincluded* which will contain the last tick value included
  in the response.
<br />
- the client can then continuously call */logger-follow* to incrementally fetch new
  replication events that occurred after the last transfer.
<br />
  Calls should use a *from* parameter with the value of the *x-arango-replication-lastincluded*
  header of the previous response. If there are no more replication events, the
  response will be empty and clients can go to sleep for a while and try again
  later.
<br />
**Note**: on a coordinator, this request must have the query parameter
*DBserver* which must be an ID of a DBserver.
The very same request is forwarded synchronously to that DBserver.
It is an error if this attribute is not bound in the coordinator case.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />

<div id="RestReplicationInventory_container">
<div id="RestReplicationInventory_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/inventory

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"collections"</span> : [ 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"3950721"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">4194304</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_aqlfunctions"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"2050177"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_graphs"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"2181249"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_modules"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"2312321"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">33554432</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_routing"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"13387905"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_system_users_users"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"215169"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">4194304</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"542849"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
          <span class="hljs-string">"fields"</span> : [ 
            <span class="hljs-string">"user"</span> 
          ], 
          <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
          <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span> 
        } 
      ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"17320065"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"animals"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"16468097"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"demo"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    } 
  ], 
  <span class="hljs-string">"state"</span> : { 
    <span class="hljs-string">"running"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"lastLogTick"</span> : <span class="hljs-string">"786450561"</span>, 
    <span class="hljs-string">"totalEvents"</span> : <span class="hljs-number">4870</span>, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:49Z"</span> 
  }, 
  <span class="hljs-string">"tick"</span> : <span class="hljs-string">"786450561"</span> 
}
</pre>
</div>
<div id="RestReplicationInventory_short" onclick="$('#RestReplicationInventory_short').hide(); $('#RestReplicationInventory_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/inventory

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
With some additional indexes:
<br />

<div id="RestReplicationInventoryIndexes_container">
<div id="RestReplicationInventoryIndexes_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/inventory

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"collections"</span> : [ 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"3950721"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">4194304</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_aqlfunctions"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"2050177"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_graphs"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"2181249"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_modules"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"2312321"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">33554432</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_routing"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"13387905"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_system_users_users"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"215169"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">4194304</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"542849"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
          <span class="hljs-string">"fields"</span> : [ 
            <span class="hljs-string">"user"</span> 
          ], 
          <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
          <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span> 
        } 
      ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"17320065"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"animals"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"16468097"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"demo"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"786516097"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"IndexedCollection1"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"786778241"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
          <span class="hljs-string">"fields"</span> : [ 
            <span class="hljs-string">"name"</span> 
          ], 
          <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"787105921"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
          <span class="hljs-string">"fields"</span> : [ 
            <span class="hljs-string">"a"</span>, 
            <span class="hljs-string">"b"</span> 
          ], 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
          <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"787302529"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"cap"</span>, 
          <span class="hljs-string">"size"</span> : <span class="hljs-number">500</span>, 
          <span class="hljs-string">"byteSize"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span> 
        } 
      ] 
    }, 
    { 
      <span class="hljs-string">"parameters"</span> : { 
        <span class="hljs-string">"version"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"cid"</span> : <span class="hljs-string">"787499137"</span>, 
        <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"deleted"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"maximalSize"</span> : <span class="hljs-number">1048576</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"IndexedCollection2"</span>, 
        <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span> 
      }, 
      <span class="hljs-string">"indexes"</span> : [ 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"787695745"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"fulltext"</span>, 
          <span class="hljs-string">"fields"</span> : [ 
            <span class="hljs-string">"text"</span> 
          ], 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
          <span class="hljs-string">"minLength"</span> : <span class="hljs-number">10</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"788023425"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
          <span class="hljs-string">"fields"</span> : [ 
            <span class="hljs-string">"a"</span> 
          ], 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-string">"788220033"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"cap"</span>, 
          <span class="hljs-string">"size"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"byteSize"</span> : <span class="hljs-number">1048576</span>, 
          <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span> 
        } 
      ] 
    } 
  ], 
  <span class="hljs-string">"state"</span> : { 
    <span class="hljs-string">"running"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"lastLogTick"</span> : <span class="hljs-string">"786450561"</span>, 
    <span class="hljs-string">"totalEvents"</span> : <span class="hljs-number">4883</span>, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:49Z"</span> 
  }, 
  <span class="hljs-string">"tick"</span> : <span class="hljs-string">"788351105"</span> 
}
</pre>
</div>
<div id="RestReplicationInventoryIndexes_short" onclick="$('#RestReplicationInventoryIndexes_short').hide(); $('#RestReplicationInventoryIndexes_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/inventory

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_get_api_replication_cluster_inventory

@brief returs an overview of collections and indexes in a cluster
<br />
@RESTHEADER{GET /_api/replication/clusterInventory, Return cluster inventory of collections and indexes}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{includeSystem,boolean,optional}
Include system collections in the result. The default value is *true*.
<br />
@RESTDESCRIPTION
Returns the array of collections and indexes available on the cluster.
<br />
The response will be an array of JSON objects, one for each collection.
Each collection containscontains exactly two keys "parameters" and "indexes". This
information comes from Plan/Collections/{DB-Name}/* in the agency,
just that the *indexes* attribute there is relocated to adjust it to
the data format of arangodump.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_get_api_replication_dump

@brief returns the whole content of one collection
<br />
@RESTHEADER{GET /_api/replication/dump, Return data of a collection}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The name or id of the collection to dump.
<br />
@RESTQUERYPARAM{from,number,optional}
Lower bound tick value for results.
<br />
@RESTQUERYPARAM{to,number,optional}
Upper bound tick value for results.
<br />
@RESTQUERYPARAM{chunkSize,number,optional}
Approximate maximum size of the returned result.
<br />
@RESTQUERYPARAM{includeSystem,boolean,optional}
Include system collections in the result. The default value is *true*.
<br />
@RESTQUERYPARAM{failOnUnknown,boolean,optional}
Produce an error when dumped edges refer to now-unknown collections.
<br />
@RESTQUERYPARAM{ticks,boolean,optional}
Whether or not to include tick values in the dump. The default value is *true*.
<br />
@RESTQUERYPARAM{flush,boolean,optional}
Whether or not to flush the WAL before dumping. The default value is *true*.
<br />
@RESTDESCRIPTION
Returns the data from the collection for the requested range.
<br />
When the *from* query parameter is not used, collection events are returned from
the beginning. When the *from* parameter is used, the result will only contain
collection entries which have higher tick values than the specified *from* value
(note: the log entry with a tick value equal to *from* will be excluded).
<br />
The *to* query parameter can be used to optionally restrict the upper bound of
the result to a certain tick value. If used, the result will only contain
collection entries with tick values up to (including) *to*.
<br />
The *chunkSize* query parameter can be used to control the size of the result.
It must be specified in bytes. The *chunkSize* value will only be honored
approximately. Otherwise a too low *chunkSize* value could cause the server
to not be able to put just one entry into the result and return it.
Therefore, the *chunkSize* value will only be consulted after an entry has
been written into the result. If the result size is then bigger than
*chunkSize*, the server will respond with as many entries as there are
in the response already. If the result size is still smaller than *chunkSize*,
the server will try to return more data if there's more data left to return.
<br />
If *chunkSize* is not specified, some server-side default value will be used.
<br />
The *Content-Type* of the result is *application/x-arango-dump*. This is an
easy-to-process format, with all entries going onto separate lines in the
response body.
<br />
Each line itself is a JSON object, with at least the following attributes:
<br />
- *tick*: the operation's tick attribute
<br />
- *key*: the key of the document/edge or the key used in the deletion operation
<br />
- *rev*: the revision id of the document/edge or the deletion operation
<br />
- *data*: the actual document/edge data for types 2300 and 2301. The full
  document/edge data will be returned even for updates.
<br />
- *type*: the type of entry. Possible values for *type* are:
<br />
  - 2300: document insertion/update
<br />
  - 2301: edge insertion/update
<br />
  - 2302: document/edge deletion
<br />
**Note**: there will be no distinction between inserts and updates when calling this method.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully and data was returned. The header
`x-arango-replication-lastincluded` is set to the tick of the last document returned.
<br />
@RESTRETURNCODE{204}
is returned if the request was executed successfully, but there was no content available.
The header `x-arango-replication-lastincluded` is `0` in this case.
<br />
@RESTRETURNCODE{400}
is returned if either the *from* or *to* values are invalid.
<br />
@RESTRETURNCODE{404}
is returned when the collection could not be found.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />
Empty collection:
<br />

<div id="RestReplicationDumpEmpty_container">
<div id="RestReplicationDumpEmpty_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/dump?collection=testCollection

HTTP/1.1 204 No Content
content-type: application/x-arango-dump; charset=utf-8
x-arango-replication-checkmore: false
x-arango-replication-lastincluded: 0

</pre>
</div>
</div>

<br />
Non-empty collection:
<br />

<div id="RestReplicationDump_container">
<div id="RestReplicationDump_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/dump?collection=testCollection

HTTP/1.1 200 OK
content-type: application/x-arango-dump; charset=utf-8
x-arango-replication-checkmore: false
x-arango-replication-lastincluded: 785795201

"{\"tick\":\"785139841\",\"type\":2300,\"key\":\"123456\",\"rev\":\"785074305\",\"data\":{\"_key\":\"123456\",\"_rev\":\"785074305\",\"c\":false,\"b\":1,\"d\":\"additional value\"}}\n{\"tick\":\"785598593\",\"type\":2302,\"key\":\"foobar\",\"rev\":\"785533057\"}\n{\"tick\":\"785795201\",\"type\":2302,\"key\":\"abcdef\",\"rev\":\"785729665\"}\n"
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_makeSlave

@brief Changes role to slave
<br />
@RESTHEADER{PUT /_api/replication/make-slave, Turn the server into a slave of another}
<br />
@RESTBODYPARAM{endpoint,string,required,string}
the master endpoint to connect to (e.g. "tcp://192.168.173.13:8529").
<br />
@RESTBODYPARAM{database,string,required,string}
the database name on the master (if not specified, defaults to the
name of the local current database).
<br />
@RESTBODYPARAM{username,string,optional,string}
an optional ArangoDB username to use when connecting to the master.
<br />
@RESTBODYPARAM{password,string,required,string}
the password to use when connecting to the master.
<br />
@RESTBODYPARAM{includeSystem,boolean,required,}
whether or not system collection operations will be applied
<br />
@RESTBODYPARAM{restrictType,string,optional,string}
an optional string value for collection filtering. When
specified, the allowed values are *include* or *exclude*.
<br />
@RESTBODYPARAM{restrictCollections,array,optional,string}
an optional array of collections for use with *restrictType*. 
If *restrictType* is *include*, only the specified collections
will be sychronised. If *restrictType* is *exclude*, all but the specified
collections will be synchronized.
<br />
@RESTBODYPARAM{maxConnectRetries,integer,optional,int64}
the maximum number of connection attempts the applier
will make in a row. If the applier cannot establish a connection to the
endpoint in this number of attempts, it will stop itself.
<br />
@RESTBODYPARAM{connectTimeout,integer,optional,int64}
the timeout (in seconds) when attempting to connect to the
endpoint. This value is used for each connection attempt.
<br />
@RESTBODYPARAM{requestTimeout,integer,optional,int64}
the timeout (in seconds) for individual requests to the endpoint.
<br />
@RESTBODYPARAM{chunkSize,integer,optional,int64}
the requested maximum size for log transfer packets that
is used when the endpoint is contacted.
<br />
@RESTBODYPARAM{adaptivePolling,boolean,optional,}
whether or not the replication applier will use adaptive polling.
<br />
@RESTBODYPARAM{autoResync,boolean,optional,}
whether or not the slave should perform an automatic resynchronization with
the master in case the master cannot serve log data requested by the slave,
or when the replication is started and no tick value can be found.
<br />
@RESTBODYPARAM{autoResyncRetries,integer,optional,int64}
number of resynchronization retries that will be performed in a row when
automatic resynchronization is enabled and kicks in. Setting this to *0* will
effectively disable *autoResync*. Setting it to some other value will limit
the number of retries that are performed. This helps preventing endless retries
in case resynchronizations always fail.
<br />
@RESTBODYPARAM{initialSyncMaxWaitTime,integer,optional,int64}
the maximum wait time (in seconds) that the initial synchronization will
wait for a response from the master when fetching initial collection data.
This wait time can be used to control after what time the initial synchronization
will give up waiting for a response and fail. This value is relevant even
for continuous replication when *autoResync* is set to *true* because this
may re-start the initial synchronization when the master cannot provide
log data the slave requires.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{connectionRetryWaitTime,integer,optional,int64}
the time (in seconds) that the applier will intentionally idle before
it retries connecting to the master in case of connection problems.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{idleMinWaitTime,integer,optional,int64}
the minimum wait time (in seconds) that the applier will intentionally idle 
before fetching more log data from the master in case the master has 
already sent all its log data. This wait time can be used to control the
frequency with which the replication applier sends HTTP log fetch requests 
to the master in case there is no write activity on the master.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{idleMaxWaitTime,integer,optional,int64}
the maximum wait time (in seconds) that the applier will intentionally idle 
before fetching more log data from the master in case the master has 
already sent all its log data and there have been previous log fetch attempts
that resulted in no more log data. This wait time can be used to control the
maximum frequency with which the replication applier sends HTTP log fetch 
requests to the master in case there is no write activity on the master for
longer periods. This configuration value will only be used if the option 
*adaptivePolling* is set to *true*.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{requireFromPresent,boolean,optional,}
if set to *true*, then the replication applier will check
at start of its continuous replication if the start tick from the dump phase
is still present on the master. If not, then there would be data loss. If 
*requireFromPresent* is *true*, the replication applier will abort with an
appropriate error message. If set to *false*, then the replication applier will
still start, and ignore the data loss.
<br />
@RESTBODYPARAM{verbose,boolean,optional,}
if set to *true*, then a log line will be emitted for all operations 
performed by the replication applier. This should be used for debugging replication
problems only.
<br />
@RESTDESCRIPTION
Starts a full data synchronization from a remote endpoint into the local ArangoDB
database and afterwards starts the continuous replication.
The operation works on a per-database level.
<br />
All local database data will be removed prior to the synchronization.
<br />
In case of success, the body of the response is a JSON object with the following
attributes:
<br />
- *state*: a JSON object with the following sub-attributes:
<br />
  - *running*: whether or not the applier is active and running
<br />
  - *lastAppliedContinuousTick*: the last tick value from the continuous
    replication log the applier has applied.
<br />
  - *lastProcessedContinuousTick*: the last tick value from the continuous
    replication log the applier has processed.
<br />
    Regularly, the last applied and last processed tick values should be
    identical. For transactional operations, the replication applier will first
    process incoming log events before applying them, so the processed tick
    value might be higher than the applied tick value. This will be the case
    until the applier encounters the *transaction commit* log event for the
    transaction.
<br />
  - *lastAvailableContinuousTick*: the last tick value the logger server can
    provide.
<br />
  - *time*: the time on the applier server.
<br />
  - *totalRequests*: the total number of requests the applier has made to the
    endpoint.
<br />
  - *totalFailedConnects*: the total number of failed connection attempts the
    applier has made.
<br />
  - *totalEvents*: the total number of log events the applier has processed.
<br />
  - *totalOperationsExcluded*: the total number of log events excluded because
    of *restrictCollections*.
<br />
  - *progress*: a JSON object with details about the replication applier progress.
    It contains the following sub-attributes if there is progress to report:
<br />
  - *message*: a textual description of the progress
<br />
  - *time*: the date and time the progress was logged
<br />
  - *failedConnects*: the current number of failed connection attempts
<br />
  - *lastError*: a JSON object with details about the last error that happened on
    the applier. It contains the following sub-attributes if there was an error:
<br />
  - *errorNum*: a numerical error code
<br />
  - *errorMessage*: a textual error description
<br />
  - *time*: the date and time the error occurred
<br />
    In case no error has occurred, *lastError* will be empty.
<br />
- *server*: a JSON object with the following sub-attributes:
<br />
  - *version*: the applier server's version
<br />
  - *serverId*: the applier server's id
<br />
- *endpoint*: the endpoint the applier is connected to (if applier is
  active) or will connect to (if applier is currently inactive)
<br />
- *database*: the name of the database the applier is connected to (if applier is
  active) or will connect to (if applier is currently inactive)
<br />
WARNING: calling this method will sychronize data from the collections found
on the remote master to the local ArangoDB database. All data in the local
collections will be purged and replaced with data from the master.
<br />
Use with caution!
<br />
Please also keep in mind that this command may take a long time to complete
and return. This is because it will first do a full data synchronization with
the master, which will take time roughly proportional to the amount of data.
<br />
**Note**: this method is not supported on a coordinator in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the configuration is incomplete or malformed.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred during sychronization or when starting the
continuous replication.
<br />
@RESTRETURNCODE{501}
is returned when this operation is called on a coordinator in a cluster.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_synchronize

@brief start a replication
<br />
@RESTHEADER{PUT /_api/replication/sync, Synchronize data from a remote endpoint}
<br />
@RESTBODYPARAM{endpoint,string,required,string}
the master endpoint to connect to (e.g. "tcp://192.168.173.13:8529").
<br />
@RESTBODYPARAM{database,string,optional,string}
the database name on the master (if not specified, defaults to the
name of the local current database).
<br />
@RESTBODYPARAM{username,string,optional,string}
an optional ArangoDB username to use when connecting to the endpoint.
<br />
@RESTBODYPARAM{password,string,required,string}
the password to use when connecting to the endpoint.
<br />
@RESTBODYPARAM{includeSystem,boolean,optional,}
whether or not system collection operations will be applied
<br />
@RESTBODYPARAM{incremental,boolean,optional,}
if set to *true*, then an incremental synchronization method will be used
for synchronizing data in collections. This method is useful when 
collections already exist locally, and only the remaining differences need
to be transferred from the remote endpoint. In this case, the incremental
synchronization can be faster than a full synchronization. 
The default value is *false*, meaning that the complete data from the remote 
collection will be transferred.
<br />
@RESTBODYPARAM{restrictType,string,optional,string}
an optional string value for collection filtering. When
specified, the allowed values are *include* or *exclude*.
<br />
@RESTBODYPARAM{restrictCollections,array,optional,string}
an optional array of collections for use with
*restrictType*. If *restrictType* is *include*, only the specified collections
will be sychronised. If *restrictType* is *exclude*, all but the specified
collections will be synchronized.
<br />
@RESTBODYPARAM{initialSyncMaxWaitTime,integer,optional,int64}
the maximum wait time (in seconds) that the initial synchronization will
wait for a response from the master when fetching initial collection data.
This wait time can be used to control after what time the initial synchronization
will give up waiting for a response and fail. 
This value will be ignored if set to *0*.
<br />
@RESTDESCRIPTION
Starts a full data synchronization from a remote endpoint into the local
ArangoDB database.
<br />
The *sync* method can be used by replication clients to connect an ArangoDB database
to a remote endpoint, fetch the remote list of collections and indexes, and collection
data. It will thus create a local backup of the state of data at the remote ArangoDB
database. *sync* works on a per-database level.
<br />
*sync* will first fetch the list of collections and indexes from the remote endpoint.
It does so by calling the *inventory* API of the remote database. It will then purge
data in the local ArangoDB database, and after start will transfer collection data
from the remote database to the local ArangoDB database. It will extract data from the
remote database by calling the remote database's *dump* API until all data are fetched.
<br />
In case of success, the body of the response is a JSON object with the following
attributes:
<br />
- *collections*: an array of collections that were transferred from the endpoint
<br />
- *lastLogTick*: the last log tick on the endpoint at the time the transfer
  was started. Use this value as the *from* value when starting the continuous
  synchronization later.
<br />
WARNING: calling this method will sychronize data from the collections found
on the remote endpoint to the local ArangoDB database. All data in the local
collections will be purged and replaced with data from the endpoint.
<br />
Use with caution!
<br />
**Note**: this method is not supported on a coordinator in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the configuration is incomplete or malformed.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred during sychronization.
<br />
@RESTRETURNCODE{501}
is returned when this operation is called on a coordinator in a cluster.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_serverID

@brief fetch this servers uniq identifier
<br />
@RESTHEADER{GET /_api/replication/server-id, Return server id}
<br />
@RESTDESCRIPTION
Returns the servers id. The id is also returned by other replication API
methods, and this method is an easy means of determining a server's id.
<br />
The body of the response is a JSON object with the attribute *serverId*. The
server id is returned as a string.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />

<div id="RestReplicationServerId_container">
<div id="RestReplicationServerId_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/server-id

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"serverId"</span> : <span class="hljs-string">"160423210519972"</span> 
}
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_applier

@brief fetch the current replication configuration
<br />
@RESTHEADER{GET /_api/replication/applier-config, Return configuration of replication applier}
<br />
@RESTDESCRIPTION
Returns the configuration of the replication applier.
<br />
The body of the response is a JSON object with the configuration. The
following attributes may be present in the configuration:
<br />
- *endpoint*: the logger server to connect to (e.g. "tcp://192.168.173.13:8529").
<br />
- *database*: the name of the database to connect to (e.g. "_system").
<br />
- *username*: an optional ArangoDB username to use when connecting to the endpoint.
<br />
- *password*: the password to use when connecting to the endpoint.
<br />
- *maxConnectRetries*: the maximum number of connection attempts the applier
  will make in a row. If the applier cannot establish a connection to the
  endpoint in this number of attempts, it will stop itself.
<br />
- *connectTimeout*: the timeout (in seconds) when attempting to connect to the
  endpoint. This value is used for each connection attempt.
<br />
- *requestTimeout*: the timeout (in seconds) for individual requests to the endpoint.
<br />
- *chunkSize*: the requested maximum size for log transfer packets that
  is used when the endpoint is contacted.
<br />
- *autoStart*: whether or not to auto-start the replication applier on
  (next and following) server starts
<br />
- *adaptivePolling*: whether or not the replication applier will use
  adaptive polling.
<br />
- *includeSystem*: whether or not system collection operations will be applied
<br />
- *autoResync*: whether or not the slave should perform a full automatic 
  resynchronization with the master in case the master cannot serve log data 
  requested by the slave, or when the replication is started and no tick value
  can be found.
<br />
- *autoResyncRetries*: number of resynchronization retries that will be performed 
  in a row when automatic resynchronization is enabled and kicks in. Setting this 
  to *0* will effectively disable *autoResync*. Setting it to some other value 
  will limit the number of retries that are performed. This helps preventing endless 
  retries in case resynchronizations always fail.
<br />
- *initialSyncMaxWaitTime*: the maximum wait time (in seconds) that the initial 
  synchronization will wait for a response from the master when fetching initial 
  collection data.
  This wait time can be used to control after what time the initial synchronization
  will give up waiting for a response and fail. This value is relevant even
  for continuous replication when *autoResync* is set to *true* because this
  may re-start the initial synchronization when the master cannot provide
  log data the slave requires.
  This value will be ignored if set to *0*.
<br />
- *connectionRetryWaitTime*: the time (in seconds) that the applier will 
  intentionally idle before it retries connecting to the master in case of 
  connection problems.
  This value will be ignored if set to *0*.
<br />
- *idleMinWaitTime*: the minimum wait time (in seconds) that the applier will 
  intentionally idle before fetching more log data from the master in case 
  the master has already sent all its log data. This wait time can be used 
  to control the frequency with which the replication applier sends HTTP log 
  fetch requests to the master in case there is no write activity on the master.
  This value will be ignored if set to *0*.
<br />
- *idleMaxWaitTime*: the maximum wait time (in seconds) that the applier will 
  intentionally idle before fetching more log data from the master in case the 
  master has already sent all its log data and there have been previous log 
  fetch attempts that resulted in no more log data. This wait time can be used 
  to control the maximum frequency with which the replication applier sends HTTP 
  log fetch requests to the master in case there is no write activity on the 
  master for longer periods. This configuration value will only be used if the 
  option *adaptivePolling* is set to *true*.
  This value will be ignored if set to *0*.
<br />
- *requireFromPresent*: if set to *true*, then the replication applier will check
  at start whether the start tick from which it starts or resumes replication is
  still present on the master. If not, then there would be data loss. If 
  *requireFromPresent* is *true*, the replication applier will abort with an
  appropriate error message. If set to *false*, then the replication applier will
  still start, and ignore the data loss.
<br />
- *verbose*: if set to *true*, then a log line will be emitted for all operations 
  performed by the replication applier. This should be used for debugging replication
  problems only.
<br />
- *restrictType*: the configuration for *restrictCollections*
<br />
- *restrictCollections*: the optional array of collections to include or exclude,
  based on the setting of *restrictType*
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />

<div id="RestReplicationApplierGetConfig_container">
<div id="RestReplicationApplierGetConfig_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/applier-config

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"requestTimeout"</span> : <span class="hljs-number">600</span>, 
  <span class="hljs-string">"connectTimeout"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"ignoreErrors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"maxConnectRetries"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"sslProtocol"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"chunkSize"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"autoStart"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"adaptivePolling"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"autoResync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"includeSystem"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"requireFromPresent"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"verbose"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"incremental"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"restrictType"</span> : <span class="hljs-string">""</span>, 
  <span class="hljs-string">"restrictCollections"</span> : [ ], 
  <span class="hljs-string">"connectionRetryWaitTime"</span> : <span class="hljs-number">15</span>, 
  <span class="hljs-string">"initialSyncMaxWaitTime"</span> : <span class="hljs-number">300</span>, 
  <span class="hljs-string">"idleMinWaitTime"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"idleMaxWaitTime"</span> : <span class="hljs-number">2.5</span>, 
  <span class="hljs-string">"autoResyncRetries"</span> : <span class="hljs-number">2</span> 
}
</pre>
</div>
<div id="RestReplicationApplierGetConfig_short" onclick="$('#RestReplicationApplierGetConfig_short').hide(); $('#RestReplicationApplierGetConfig_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/applier-config

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_applier_adjust

@brief set configuration values of an applier
<br />
@RESTHEADER{PUT /_api/replication/applier-config, Adjust configuration of replication applier}
<br />
@RESTBODYPARAM{endpoint,string,required,string}
the logger server to connect to (e.g. "tcp://192.168.173.13:8529"). The endpoint must be specified.
<br />
@RESTBODYPARAM{database,string,required,string}
the name of the database on the endpoint. If not specified, defaults to the current local database name.
<br />
@RESTBODYPARAM{username,string,optional,string}
an optional ArangoDB username to use when connecting to the endpoint.
<br />
@RESTBODYPARAM{password,string,required,string}
the password to use when connecting to the endpoint.
<br />
@RESTBODYPARAM{maxConnectRetries,integer,required,int64}
the maximum number of connection attempts the applier
will make in a row. If the applier cannot establish a connection to the
endpoint in this number of attempts, it will stop itself.
<br />
@RESTBODYPARAM{connectTimeout,integer,required,int64}
the timeout (in seconds) when attempting to connect to the
endpoint. This value is used for each connection attempt.
<br />
@RESTBODYPARAM{requestTimeout,integer,required,int64}
the timeout (in seconds) for individual requests to the endpoint.
<br />
@RESTBODYPARAM{chunkSize,integer,required,int64}
the requested maximum size for log transfer packets that
is used when the endpoint is contacted.
<br />
@RESTBODYPARAM{autoStart,boolean,required,}
whether or not to auto-start the replication applier on
(next and following) server starts
<br />
@RESTBODYPARAM{adaptivePolling,boolean,required,}
if set to *true*, the replication applier will fall
to sleep for an increasingly long period in case the logger server at the
endpoint does not have any more replication events to apply. Using
adaptive polling is thus useful to reduce the amount of work for both the
applier and the logger server for cases when there are only infrequent
changes. The downside is that when using adaptive polling, it might take
longer for the replication applier to detect that there are new replication
events on the logger server.
<br />
Setting *adaptivePolling* to false will make the replication applier
contact the logger server in a constant interval, regardless of whether
the logger server provides updates frequently or seldom.
<br />
@RESTBODYPARAM{includeSystem,boolean,required,}
whether or not system collection operations will be applied
<br />
@RESTBODYPARAM{autoResync,boolean,optional,}
whether or not the slave should perform a full automatic resynchronization 
with the master in case the master cannot serve log data requested by the slave,
or when the replication is started and no tick value can be found.
<br />
@RESTBODYPARAM{autoResyncRetries,integer,optional,int64}
number of resynchronization retries that will be performed in a row when
automatic resynchronization is enabled and kicks in. Setting this to *0* will
effectively disable *autoResync*. Setting it to some other value will limit
the number of retries that are performed. This helps preventing endless retries
in case resynchronizations always fail.
<br />
@RESTBODYPARAM{initialSyncMaxWaitTime,integer,optional,int64}
the maximum wait time (in seconds) that the initial synchronization will
wait for a response from the master when fetching initial collection data.
This wait time can be used to control after what time the initial synchronization
will give up waiting for a response and fail. This value is relevant even
for continuous replication when *autoResync* is set to *true* because this
may re-start the initial synchronization when the master cannot provide
log data the slave requires.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{connectionRetryWaitTime,integer,optional,int64}
the time (in seconds) that the applier will intentionally idle before
it retries connecting to the master in case of connection problems.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{idleMinWaitTime,integer,optional,int64}
the minimum wait time (in seconds) that the applier will intentionally idle 
before fetching more log data from the master in case the master has 
already sent all its log data. This wait time can be used to control the
frequency with which the replication applier sends HTTP log fetch requests 
to the master in case there is no write activity on the master.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{idleMaxWaitTime,integer,optional,int64}
the maximum wait time (in seconds) that the applier will intentionally idle 
before fetching more log data from the master in case the master has 
already sent all its log data and there have been previous log fetch attempts
that resulted in no more log data. This wait time can be used to control the
maximum frequency with which the replication applier sends HTTP log fetch 
requests to the master in case there is no write activity on the master for
longer periods. This configuration value will only be used if the option 
*adaptivePolling* is set to *true*.
This value will be ignored if set to *0*.
<br />
@RESTBODYPARAM{requireFromPresent,boolean,required,}
if set to *true*, then the replication applier will check
at start whether the start tick from which it starts or resumes replication is
still present on the master. If not, then there would be data loss. If 
*requireFromPresent* is *true*, the replication applier will abort with an
appropriate error message. If set to *false*, then the replication applier will
still start, and ignore the data loss.
<br />
@RESTBODYPARAM{verbose,boolean,required,}
if set to *true*, then a log line will be emitted for all operations 
performed by the replication applier. This should be used for debugging replication
problems only.
<br />
@RESTBODYPARAM{restrictType,string,required,string}
the configuration for *restrictCollections*; Has to be either *include* or *exclude*
<br />
@RESTBODYPARAM{restrictCollections,array,optional,string}
the array of collections to include or exclude,
based on the setting of *restrictType*
<br />
@RESTDESCRIPTION
Sets the configuration of the replication applier. The configuration can
only be changed while the applier is not running. The updated configuration
will be saved immediately but only become active with the next start of the
applier.
<br />
In case of success, the body of the response is a JSON object with the updated
configuration.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the configuration is incomplete or malformed, or if the
replication applier is currently running.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />

<div id="RestReplicationApplierSetConfig_container">
<div id="RestReplicationApplierSetConfig_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/replication/applier-config &lt;&lt;EOF
{ 
  <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:8529"</span>, 
  <span class="hljs-string">"username"</span> : <span class="hljs-string">"replicationApplier"</span>, 
  <span class="hljs-string">"password"</span> : <span class="hljs-string">"applier1234@foxx"</span>, 
  <span class="hljs-string">"chunkSize"</span> : <span class="hljs-number">4194304</span>, 
  <span class="hljs-string">"autoStart"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"adaptivePolling"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:8529"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
  <span class="hljs-string">"username"</span> : <span class="hljs-string">"replicationApplier"</span>, 
  <span class="hljs-string">"requestTimeout"</span> : <span class="hljs-number">600</span>, 
  <span class="hljs-string">"connectTimeout"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"ignoreErrors"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"maxConnectRetries"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"sslProtocol"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"chunkSize"</span> : <span class="hljs-number">4194304</span>, 
  <span class="hljs-string">"autoStart"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"adaptivePolling"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"autoResync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"includeSystem"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"requireFromPresent"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"verbose"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"incremental"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"restrictType"</span> : <span class="hljs-string">""</span>, 
  <span class="hljs-string">"restrictCollections"</span> : [ ], 
  <span class="hljs-string">"connectionRetryWaitTime"</span> : <span class="hljs-number">15</span>, 
  <span class="hljs-string">"initialSyncMaxWaitTime"</span> : <span class="hljs-number">300</span>, 
  <span class="hljs-string">"idleMinWaitTime"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"idleMaxWaitTime"</span> : <span class="hljs-number">2.5</span>, 
  <span class="hljs-string">"autoResyncRetries"</span> : <span class="hljs-number">2</span> 
}
</pre>
</div>
<div id="RestReplicationApplierSetConfig_short" onclick="$('#RestReplicationApplierSetConfig_short').hide(); $('#RestReplicationApplierSetConfig_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/replication/applier-config &lt;&lt;EOF
{ 
  <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:8529"</span>, 
  <span class="hljs-string">"username"</span> : <span class="hljs-string">"replicationApplier"</span>, 
  <span class="hljs-string">"password"</span> : <span class="hljs-string">"applier1234@foxx"</span>, 
  <span class="hljs-string">"chunkSize"</span> : <span class="hljs-number">4194304</span>, 
  <span class="hljs-string">"autoStart"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"adaptivePolling"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_applier_start

@brief start the replication applier
<br />
@RESTHEADER{PUT /_api/replication/applier-start, Start replication applier}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{from,string,optional}
The remote *lastLogTick* value from which to start applying. If not specified,
the last saved tick from the previous applier run is used. If there is no
previous applier state saved, the applier will start at the beginning of the
logger server's log.
<br />
@RESTDESCRIPTION
Starts the replication applier. This will return immediately if the
replication applier is already running.
<br />
If the replication applier is not already running, the applier configuration
will be checked, and if it is complete, the applier will be started in a
background thread. This means that even if the applier will encounter any
errors while running, they will not be reported in the response to this
method.
<br />
To detect replication applier errors after the applier was started, use the
*/_api/replication/applier-state* API instead.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the replication applier is not fully configured or the
configuration is invalid.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />

<div id="RestReplicationApplierStart_container">
<div id="RestReplicationApplierStart_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/replication/applier-start

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"state"</span> : { 
    <span class="hljs-string">"running"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"lastAppliedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastProcessedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastAvailableContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"safeResumeTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"progress"</span> : { 
      <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:34Z"</span>, 
      <span class="hljs-string">"message"</span> : <span class="hljs-string">"applier initially created"</span>, 
      <span class="hljs-string">"failedConnects"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"totalRequests"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalFailedConnects"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalEvents"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalOperationsExcluded"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"lastError"</span> : { 
      <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span> 
  }, 
  <span class="hljs-string">"server"</span> : { 
    <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span>, 
    <span class="hljs-string">"serverId"</span> : <span class="hljs-string">"160423210519972"</span> 
  }, 
  <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:8529"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
}
</pre>
</div>
<div id="RestReplicationApplierStart_short" onclick="$('#RestReplicationApplierStart_short').hide(); $('#RestReplicationApplierStart_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/replication/applier-start

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_put_api_replication_applier_stop

@brief stop the replication
<br />
@RESTHEADER{PUT /_api/replication/applier-stop, Stop replication applier}
<br />
@RESTDESCRIPTION
Stops the replication applier. This will return immediately if the
replication applier is not running.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />

<div id="RestReplicationApplierStop_container">
<div id="RestReplicationApplierStop_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/replication/applier-stop

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"state"</span> : { 
    <span class="hljs-string">"running"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"lastAppliedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastProcessedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastAvailableContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"safeResumeTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"progress"</span> : { 
      <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span>, 
      <span class="hljs-string">"message"</span> : <span class="hljs-string">"applier shut down"</span>, 
      <span class="hljs-string">"failedConnects"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"totalRequests"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalFailedConnects"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalEvents"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalOperationsExcluded"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"lastError"</span> : { 
      <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span>, 
      <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"got invalid response from master at tcp://127.0.0.1:8529: HTTP 401: Unauthorized"</span>, 
      <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1402</span> 
    }, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span> 
  }, 
  <span class="hljs-string">"server"</span> : { 
    <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span>, 
    <span class="hljs-string">"serverId"</span> : <span class="hljs-string">"160423210519972"</span> 
  }, 
  <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:8529"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
}
</pre>
</div>
<div id="RestReplicationApplierStop_short" onclick="$('#RestReplicationApplierStop_short').hide(); $('#RestReplicationApplierStop_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/replication/applier-stop

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestReplicationHandler.cpp -->
@startDocuBlock JSF_get_api_replication_applier_state

@brief output the current status of the replication
<br />
@RESTHEADER{GET /_api/replication/applier-state, State of the replication applier}
<br />
@RESTDESCRIPTION
Returns the state of the replication applier, regardless of whether the
applier is currently running or not.
<br />
The response is a JSON object with the following attributes:
<br />
- *state*: a JSON object with the following sub-attributes:
<br />
  - *running*: whether or not the applier is active and running
<br />
  - *lastAppliedContinuousTick*: the last tick value from the continuous
    replication log the applier has applied.
<br />
  - *lastProcessedContinuousTick*: the last tick value from the continuous
    replication log the applier has processed.
<br />
    Regularly, the last applied and last processed tick values should be
    identical. For transactional operations, the replication applier will first
    process incoming log events before applying them, so the processed tick
    value might be higher than the applied tick value. This will be the case
    until the applier encounters the *transaction commit* log event for the
    transaction.
<br />
  - *lastAvailableContinuousTick*: the last tick value the logger server can
    provide.
<br />
  - *time*: the time on the applier server.
<br />
  - *totalRequests*: the total number of requests the applier has made to the
    endpoint.
<br />
  - *totalFailedConnects*: the total number of failed connection attempts the
    applier has made.
<br />
  - *totalEvents*: the total number of log events the applier has processed.
<br />
  - *totalOperationsExcluded*: the total number of log events excluded because
    of *restrictCollections*.
<br />
  - *progress*: a JSON object with details about the replication applier progress.
    It contains the following sub-attributes if there is progress to report:
<br />
  - *message*: a textual description of the progress
<br />
  - *time*: the date and time the progress was logged
<br />
  - *failedConnects*: the current number of failed connection attempts
<br />
  - *lastError*: a JSON object with details about the last error that happened on
    the applier. It contains the following sub-attributes if there was an error:
<br />
  - *errorNum*: a numerical error code
<br />
  - *errorMessage*: a textual error description
<br />
  - *time*: the date and time the error occurred
<br />
    In case no error has occurred, *lastError* will be empty.
<br />
- *server*: a JSON object with the following sub-attributes:
<br />
  - *version*: the applier server's version
<br />
  - *serverId*: the applier server's id
<br />
- *endpoint*: the endpoint the applier is connected to (if applier is
  active) or will connect to (if applier is currently inactive)
<br />
- *database*: the name of the database the applier is connected to (if applier is
  active) or will connect to (if applier is currently inactive)
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the request was executed successfully.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
<br />
@RESTRETURNCODE{500}
is returned if an error occurred while assembling the response.
<br />
@EXAMPLES
<br />
Fetching the state of an inactive applier:
<br />

<div id="RestReplicationApplierStateNotRunning_container">
<div id="RestReplicationApplierStateNotRunning_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/applier-state

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"state"</span> : { 
    <span class="hljs-string">"running"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"lastAppliedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastProcessedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastAvailableContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"safeResumeTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"progress"</span> : { 
      <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span>, 
      <span class="hljs-string">"message"</span> : <span class="hljs-string">"applier shut down"</span>, 
      <span class="hljs-string">"failedConnects"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"totalRequests"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalFailedConnects"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalEvents"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalOperationsExcluded"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"lastError"</span> : { 
      <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span>, 
      <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"got invalid response from master at tcp://127.0.0.1:8529: HTTP 401: Unauthorized"</span>, 
      <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1402</span> 
    }, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span> 
  }, 
  <span class="hljs-string">"server"</span> : { 
    <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span>, 
    <span class="hljs-string">"serverId"</span> : <span class="hljs-string">"160423210519972"</span> 
  }, 
  <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:8529"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
}
</pre>
</div>
<div id="RestReplicationApplierStateNotRunning_short" onclick="$('#RestReplicationApplierStateNotRunning_short').hide(); $('#RestReplicationApplierStateNotRunning_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/applier-state

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Fetching the state of an active applier:
<br />

<div id="RestReplicationApplierStateRunning_container">
<div id="RestReplicationApplierStateRunning_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/applier-state

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"state"</span> : { 
    <span class="hljs-string">"running"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"lastAppliedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastProcessedContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"lastAvailableContinuousTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"safeResumeTick"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"progress"</span> : { 
      <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span>, 
      <span class="hljs-string">"message"</span> : <span class="hljs-string">"applier shut down"</span>, 
      <span class="hljs-string">"failedConnects"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"totalRequests"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalFailedConnects"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalEvents"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"totalOperationsExcluded"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"lastError"</span> : { 
      <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:48Z"</span> 
  }, 
  <span class="hljs-string">"server"</span> : { 
    <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span>, 
    <span class="hljs-string">"serverId"</span> : <span class="hljs-string">"160423210519972"</span> 
  }, 
  <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:8529"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
}
</pre>
</div>
<div id="RestReplicationApplierStateRunning_short" onclick="$('#RestReplicationApplierStateRunning_short').hide(); $('#RestReplicationApplierStateRunning_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/replication/applier-state

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestVersionHandler.cpp -->
@startDocuBlock JSF_get_api_return

@brief returns the server version number
<br />
@RESTHEADER{GET /_api/version, Return server version}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{details,boolean,optional}
If set to *true*, the response will contain a *details* attribute with
additional information about included components and their versions. The
attribute names and internals of the *details* object may vary depending on
platform and ArangoDB version.
<br />
@RESTDESCRIPTION
Returns the server name and version number. The response is a JSON object
with the following attributes:
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned in all cases.
<br />
@RESTREPLYBODY{server,string,required,string}
will always contain *arango*
<br />
@RESTREPLYBODY{version,string,required,string}
the server version string. The string has the format
"*major*.*minor*.*sub*". *major* and *minor* will be numeric, and *sub*
may contain a number or a textual version.
<br />
@RESTREPLYBODY{details,object,optional,}
an optional JSON object with additional details. This is
returned only if the *details* query parameter is set to *true* in the
request.
<br />
@EXAMPLES
<br />
Return the version information
<br />

<div id="RestVersion_container">
<div id="RestVersion_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/version

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"server"</span> : <span class="hljs-string">"arango"</span>, 
  <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span> 
}
</pre>
</div>
</div>

<br />
Return the version information with details
<br />

<div id="RestVersionDetails_container">
<div id="RestVersionDetails_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/version?details=true

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"server"</span> : <span class="hljs-string">"arango"</span>, 
  <span class="hljs-string">"version"</span> : <span class="hljs-string">"2.8.11"</span>, 
  <span class="hljs-string">"details"</span> : { 
    <span class="hljs-string">"architecture"</span> : <span class="hljs-string">"64bit"</span>, 
    <span class="hljs-string">"build-date"</span> : <span class="hljs-string">"2016-07-13 10:22:28"</span>, 
    <span class="hljs-string">"configure"</span> : <span class="hljs-string">"'./configure' '--enable-maintainer-mode' 'CPPFLAGS=-I/usr/local/include -I/usr/local/opt/openssl/include' 'LDFLAGS=-L/usr/local/opt/openssl/lib -L/usr/local/Cellar/boost/1.58.0/lib'"</span>, 
    <span class="hljs-string">"env"</span> : <span class="hljs-string">"CPPFLAGS='-I/usr/local/include -I/usr/local/opt/openssl/include' LDFLAGS='-L/usr/local/opt/openssl/lib -L/usr/local/Cellar/boost/1.58.0/lib'"</span>, 
    <span class="hljs-string">"fd-client-event-handler"</span> : <span class="hljs-string">"poll"</span>, 
    <span class="hljs-string">"fd-setsize"</span> : <span class="hljs-string">"1024"</span>, 
    <span class="hljs-string">"icu-version"</span> : <span class="hljs-string">"54.1"</span>, 
    <span class="hljs-string">"libev-version"</span> : <span class="hljs-string">"4.11"</span>, 
    <span class="hljs-string">"maintainer-mode"</span> : <span class="hljs-string">"true"</span>, 
    <span class="hljs-string">"openssl-version"</span> : <span class="hljs-string">"OpenSSL 1.0.2h  3 May 2016"</span>, 
    <span class="hljs-string">"repository-version"</span> : <span class="hljs-string">"heads/2.8-0-g9bebae02767c461023f04ee2e125a2130a7330ce-dirty"</span>, 
    <span class="hljs-string">"server-version"</span> : <span class="hljs-string">"2.8.11"</span>, 
    <span class="hljs-string">"sizeof int"</span> : <span class="hljs-string">"4"</span>, 
    <span class="hljs-string">"sizeof void*"</span> : <span class="hljs-string">"8"</span>, 
    <span class="hljs-string">"tcmalloc"</span> : <span class="hljs-string">"false"</span>, 
    <span class="hljs-string">"v8-version"</span> : <span class="hljs-string">"4.3.61"</span>, 
    <span class="hljs-string">"mode"</span> : <span class="hljs-string">"standalone"</span> 
  } 
}
</pre>
</div>
<div id="RestVersionDetails_short" onclick="$('#RestVersionDetails_short').hide(); $('#RestVersionDetails_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/version?details=true

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryCacheHandler.cpp -->
@startDocuBlock DeleteApiQueryCache

@brief clears the AQL query cache
<br />
@RESTHEADER{DELETE /_api/query-cache, Clears any results in the AQL query cache}
<br />
@RESTDESCRIPTION
clears the query cache
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
The server will respond with *HTTP 200* when the cache was cleared
successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryCacheHandler.cpp -->
@startDocuBlock GetApiQueryCacheProperties

@brief returns the global configuration for the AQL query cache
<br />
@RESTHEADER{GET /_api/query-cache/properties, Returns the global properties for the AQL query cache}
<br />
@RESTDESCRIPTION
Returns the global AQL query cache configuration. The configuration is a
JSON object with the following properties:
<br />
- *mode*: the mode the AQL query cache operates in. The mode is one of the following
  values: *off*, *on* or *demand*.
<br />
- *maxResults*: the maximum number of query results that will be stored per database-specific
  cache.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the properties can be retrieved successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestQueryCacheHandler.cpp -->
@startDocuBlock PutApiQueryCacheProperties

@brief changes the configuration for the AQL query cache
<br />
@RESTHEADER{PUT /_api/query-cache/properties, Globally adjusts the AQL query result cache properties}
<br />
@RESTDESCRIPTION
After the properties have been changed, the current set of properties will
be returned in the HTTP response.
<br />
Note: changing the properties may invalidate all results in the cache.
The global properties for AQL query cache.
The properties need to be passed in the attribute *properties* in the body
of the HTTP request. *properties* needs to be a JSON object with the following
properties:
<br />
@RESTBODYPARAM{mode,string,required,string}
 the mode the AQL query cache should operate in. Possible values are *off*, *on* or *demand*.
<br />
@RESTBODYPARAM{maxResults,integer,required,int64}
the maximum number of query results that will be stored per database-specific cache.
<br />
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the properties were changed successfully.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestSimpleHandler.cpp -->
@startDocuBlock RestRemoveByKeys

@brief removes multiple documents by their keys
<br />
@RESTHEADER{PUT /_api/simple/remove-by-keys, Remove documents by their keys}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to look in for the documents to remove
<br />
@RESTBODYPARAM{keys,array,required,string}
array with the _keys of documents to remove.
<br />
@RESTBODYPARAM{options,object,optional,put_api_simple_remove_by_keys_opts}
a json object which can contains following attributes:
<br />
@RESTSTRUCT{waitForSync,put_api_simple_remove_by_keys_opts,string,optional,string}
if set to true, then all removal operations will
instantly be synchronized to disk. If this is not specified, then the
collection's default sync behavior will be applied.
<br />
@RESTDESCRIPTION
Looks up the documents in the specified collection using the array of keys
provided, and removes all documents from the collection whose keys are
contained in the *keys* array. Keys for which no document can be found in
the underlying collection are ignored, and no exception will be thrown for 
them.
<br />
The body of the response contains a JSON object with information how many 
documents were removed (and how many were not). The *removed* attribute will
contain the number of actually removed documents. The *ignored* attribute 
will contain the number of keys in the request for which no matching document
could be found.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the operation was carried out successfully. The number of removed
documents may still be 0 in this case if none of the specified document keys
were found in the collection.
<br />
@RESTRETURNCODE{404}
is returned if the collection was not found.
The response body contains an error document in this case.
<br />
@RESTRETURNCODE{405}
is returned if the operation was called with a different HTTP METHOD than PUT.
<br />
@EXAMPLES
<br />

<div id="RestSimpleRemove_container">
<div id="RestSimpleRemove_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"test0"</span>, 
    <span class="hljs-string">"test1"</span>, 
    <span class="hljs-string">"test2"</span>, 
    <span class="hljs-string">"test3"</span>, 
    <span class="hljs-string">"test4"</span>, 
    <span class="hljs-string">"test5"</span>, 
    <span class="hljs-string">"test6"</span>, 
    <span class="hljs-string">"test7"</span>, 
    <span class="hljs-string">"test8"</span>, 
    <span class="hljs-string">"test9"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"removed"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleRemove_short" onclick="$('#RestSimpleRemove_short').hide(); $('#RestSimpleRemove_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"test0"</span>, 
    <span class="hljs-string">"test1"</span>, 
    <span class="hljs-string">"test2"</span>, 
    <span class="hljs-string">"test3"</span>, 
    <span class="hljs-string">"test4"</span>, 
    <span class="hljs-string">"test5"</span>, 
    <span class="hljs-string">"test6"</span>, 
    <span class="hljs-string">"test7"</span>, 
    <span class="hljs-string">"test8"</span>, 
    <span class="hljs-string">"test9"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />

<div id="RestSimpleRemoveNotFound_container">
<div id="RestSimpleRemoveNotFound_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"baz"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"removed"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"ignored"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleRemoveNotFound_short" onclick="$('#RestSimpleRemoveNotFound_short').hide(); $('#RestSimpleRemoveNotFound_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"baz"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/arangod/RestHandler/RestSimpleHandler.cpp -->
@startDocuBlock RestLookupByKeys

@brief fetches multiple documents by their keys
<br />
@RESTHEADER{PUT /_api/simple/lookup-by-keys, Find documents by their keys}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to look in for the documents
<br />
@RESTBODYPARAM{keys,array,required,string}
array with the _keys of documents to remove.
<br />
@RESTDESCRIPTION
Looks up the documents in the specified collection using the array of keys
provided. All documents for which a matching key was specified in the *keys*
array and that exist in the collection will be returned. 
Keys for which no document can be found in the underlying collection are ignored, 
and no exception will be thrown for them.
<br />
The body of the response contains a JSON object with a *documents* attribute. The
*documents* attribute is an array containing the matching documents. The order in
which matching documents are present in the result array is unspecified.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the operation was carried out successfully. 
<br />
@RESTRETURNCODE{404}
is returned if the collection was not found.
The response body contains an error document in this case.
<br />
@RESTRETURNCODE{405}
is returned if the operation was called with a different HTTP METHOD than PUT.
<br />
@EXAMPLES
<br />
Looking up existing documents
<br />

<div id="RestSimpleLookup_container">
<div id="RestSimpleLookup_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/lookup-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"test0"</span>, 
    <span class="hljs-string">"test1"</span>, 
    <span class="hljs-string">"test2"</span>, 
    <span class="hljs-string">"test3"</span>, 
    <span class="hljs-string">"test4"</span>, 
    <span class="hljs-string">"test5"</span>, 
    <span class="hljs-string">"test6"</span>, 
    <span class="hljs-string">"test7"</span>, 
    <span class="hljs-string">"test8"</span>, 
    <span class="hljs-string">"test9"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"documents"</span> : [ 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test0"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"817907841"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test0"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test1"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"818104449"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test1"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">2</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test2"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"818301057"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test2"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test3"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"818497665"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test3"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">4</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test4"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"818694273"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test4"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">5</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test5"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"818890881"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test5"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">6</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test6"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"819087489"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test6"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">7</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test7"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"819284097"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test7"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">8</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test8"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"819480705"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test8"</span> 
    }, 
    { 
      <span class="hljs-string">"value"</span> : <span class="hljs-number">9</span>, 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/test9"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"819677313"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"test9"</span> 
    } 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleLookup_short" onclick="$('#RestSimpleLookup_short').hide(); $('#RestSimpleLookup_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/lookup-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"test0"</span>, 
    <span class="hljs-string">"test1"</span>, 
    <span class="hljs-string">"test2"</span>, 
    <span class="hljs-string">"test3"</span>, 
    <span class="hljs-string">"test4"</span>, 
    <span class="hljs-string">"test5"</span>, 
    <span class="hljs-string">"test6"</span>, 
    <span class="hljs-string">"test7"</span>, 
    <span class="hljs-string">"test8"</span>, 
    <span class="hljs-string">"test9"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Looking up non-existing documents
<br />

<div id="RestSimpleLookupNotFound_container">
<div id="RestSimpleLookupNotFound_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/lookup-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"baz"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"documents"</span> : [ ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleLookupNotFound_short" onclick="$('#RestSimpleLookupNotFound_short').hide(); $('#RestSimpleLookupNotFound_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/lookup-by-keys &lt;&lt;EOF
{ 
  <span class="hljs-string">"keys"</span> : [ 
    <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"baz"</span> 
  ], 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Exists

`fs.exists(path)`
<br />
Returns true if a file (of any type) or a directory exists at a given
path. If the file is a broken symbolic link, returns false.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Chmod

`fs.exists(path)`
<br />
Returns true on success.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Size

`fs.size(path)`
<br />
Returns the size of the file specified by *path*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_GetTempPath

`fs.getTempPath()`
<br />
Returns the absolute path of the temporary directory
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_GetTempFile

`fs.getTempFile(directory, createFile)`
<br />
Returns the name for a new temporary file in directory *directory*.
If *createFile* is *true*, an empty file will be created so no other
process can create a file of the same name.
<br />
**Note**: The directory *directory* must exist.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_IsDirectory

`fs.isDirectory(path)`
<br />
Returns true if the *path* points to a directory.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_IsFile

`fs.isFile(path)`
<br />
Returns true if the *path* points to a file.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_MakeAbsolute

`fs.makeAbsolute(path)`
<br />
Returns the given string if it is an absolute path, otherwise an
absolute path to the same location is returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_List

`fs.list(path)`
<br />
The functions returns the names of all the files in a directory, in
lexically sorted order. Throws an exception if the directory cannot be
traversed (or path is not a directory).
<br />
**Note**: this means that list("x") of a directory containing "a" and "b" would
return ["a", "b"], not ["x/a", "x/b"].
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_ListTree

`fs.listTree(path)`
<br />
The function returns an array that starts with the given path, and all of
the paths relative to the given path, discovered by a depth first traversal
of every directory in any visited directory, reporting but not traversing
symbolic links to directories. The first path is always *""*, the path
relative to itself.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_MakeDirectory

`fs.makeDirectory(path)`
<br />
Creates the directory specified by *path*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_MakeDirectoryRecursive

`fs.makeDirectoryRecursive(path)`
<br />
Creates the directory hierarchy specified by *path*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Unzip

`fs.unzipFile(filename, outpath, skipPaths, overwrite, password)`
<br />
Unzips the zip file specified by *filename* into the path specified by
*outpath*. Overwrites any existing target files if *overwrite* is set
to *true*.
<br />
Returns *true* if the file was unzipped successfully.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Zip

`fs.zipFile(filename, chdir, files, password)`
<br />
Stores the files specified by *files* in the zip file *filename*. If 
the file *filename* already exists, an error is thrown. The list of input
files *files* must be given as a list of absolute filenames. If *chdir* is
not empty, the *chdir* prefix will be stripped from the filename in the
zip file, so when it is unzipped filenames will be relative. 
Specifying a password is optional. 
<br />
Returns *true* if the file was zipped successfully.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_MTime

`fs.mtime(filename)`
<br />
Returns the last modification date of the specified file. The date is
returned as a Unix timestamp (number of seconds elapsed since January 1 1970).
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_MoveFile

`fs.move(source, destination)`
<br />
Moves *source* to destination. Failure to move the file, or
specifying a directory for destination when source is a file will throw an
exception. Likewise, specifying a directory as source and destination will
fail.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_CopyDirectoryRecursive

`fs.copyRecursive(source, destination)`
<br />
Copies *source* to *destination*. 
Exceptions will be thrown on:
  - Failure to copy the file
  - specifying a directory for destination when source is a file
  - specifying a directory as source and destination
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_CopyFile

`fs.copyFile(source, destination)`
<br />
Copies *source* to destination. If Destination is a directory, a file 
of the same name will be created in that directory, else the copy will get the
specified filename.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Read

`fs.read(filename)`
<br />
Reads in a file and returns the content as string. Please note that the
file content must be encoded in UTF-8.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_ReadBuffer

`fs.readBuffer(filename)`
<br />
Reads in a file and returns its content in a Buffer object.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Read64

`fs.read64(filename)`
<br />
Reads in a file and returns the content as string. The file content is
Base64 encoded.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Save

`fs.write(filename, content)`
<br />
Writes the content into a file. Content can be a string or a Buffer object.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_Remove

`fs.remove(filename)`
<br />
Removes the file *filename* at the given path. Throws an exception if the
path corresponds to anything that is not a file or a symbolic link. If
"path" refers to a symbolic link, removes the symbolic link.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_RemoveDirectory

`fs.removeDirectory(path)`
<br />
Removes a directory if it is empty. Throws an exception if the path is not
an empty directory.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/V8/v8-utils.cpp -->
@startDocuBlock JS_RemoveDirectoryRecursive

`fs.removeDirectoryRecursive(path)`
<br />
Removes a directory with all subelements. Throws an exception if the path
is not a directory.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/lib/Rest/HttpResponse.h -->
@startDocuBlock serverHideProductHeader

`--server.hide-product-header`
<br />
If *true*, the server will exclude the HTTP header "Server: ArangoDB" in
HTTP responses. If set to *false*, the server will send the header in
responses.
<br />
The default is *false*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-aqlfunction.js -->
@startDocuBlock JSF_get_api_aqlfunction

@brief gets all reqistered AQL user functions
<br />
@RESTHEADER{GET /_api/aqlfunction, Return registered AQL user functions}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{namespace,string,optional}
Returns all registered AQL user functions from namespace *namespace*.
<br />
@RESTDESCRIPTION
Returns all registered AQL user functions.
<br />
The call will return a JSON array with all user functions found. Each user
function will at least have the following attributes:
<br />
- *name*: The fully qualified name of the user function
<br />
- *code*: A string representation of the function body
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
if success *HTTP 200* is returned.
<br />
@EXAMPLES
<br />

<div id="RestAqlfunctionsGetAll_container">
<div id="RestAqlfunctionsGetAll_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/aqlfunction

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"myfunctions::temperature::celsiustofahrenheit"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"function (celsius) { return celsius * 1.8 + 32; }"</span> 
  } 
]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-aqlfunction.js -->
@startDocuBlock JSF_post_api_aqlfunction

@brief create a new AQL user function
<br />
@RESTHEADER{POST /_api/aqlfunction, Create AQL user function}
<br />
@RESTBODYPARAM{name,string,required,string}
the fully qualified name of the user functions.
<br />
@RESTBODYPARAM{code,string,required,string}
a string representation of the function body.
<br />
@RESTBODYPARAM{isDeterministic,boolean,optional,}
an optional boolean value to indicate that the function
results are fully deterministic (function return value solely depends on
the input value and return value is the same for repeated calls with same
input). The *isDeterministic* attribute is currently not used but may be
used later for optimisations.
<br />
@RESTDESCRIPTION
<br />
In case of success, the returned JSON object has the following properties:
<br />
- *error*: boolean flag to indicate that an error occurred (*false*
  in this case)
<br />
- *code*: the HTTP status code
<br />
The body of the response will contain a JSON object with additional error
details. The object has the following attributes:
<br />
- *error*: boolean flag to indicate that an error occurred (*true* in this case)
<br />
- *code*: the HTTP status code
<br />
- *errorNum*: the server error number
<br />
- *errorMessage*: a descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the function already existed and was replaced by the
call, the server will respond with *HTTP 200*.
<br />
@RESTRETURNCODE{201}
If the function can be registered by the server, the server will respond with
*HTTP 201*.
<br />
@RESTRETURNCODE{400}
If the JSON representation is malformed or mandatory data is missing from the
request, the server will respond with *HTTP 400*.
<br />
@EXAMPLES
<br />

<div id="RestAqlfunctionCreate_container">
<div id="RestAqlfunctionCreate_long">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/aqlfunction &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"myfunctions::temperature::celsiustofahrenheit"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-string">"function (celsius) { return celsius * 1.8 + 32; }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-aqlfunction.js -->
@startDocuBlock JSF_delete_api_aqlfunction

@brief remove an existing AQL user function
<br />
@RESTHEADER{DELETE /_api/aqlfunction/{name}, Remove existing AQL user function}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{name,string,required}
the name of the AQL user function.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{group,string,optional}
If set to *true*, then the function name provided in *name* is treated as
a namespace prefix, and all functions in the specified namespace will be deleted.
If set to *false*, the function name provided in *name* must be fully
qualified, including any namespaces.
<br />
@RESTDESCRIPTION
<br />
Removes an existing AQL user function, identified by *name*.
<br />
In case of success, the returned JSON object has the following properties:
<br />
- *error*: boolean flag to indicate that an error occurred (*false*
  in this case)
<br />
- *code*: the HTTP status code
<br />
The body of the response will contain a JSON object with additional error
details. The object has the following attributes:
<br />
- *error*: boolean flag to indicate that an error occurred (*true* in this case)
<br />
- *code*: the HTTP status code
<br />
- *errorNum*: the server error number
<br />
- *errorMessage*: a descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the function can be removed by the server, the server will respond with
*HTTP 200*.
<br />
@RESTRETURNCODE{400}
If the user function name is malformed, the server will respond with *HTTP 400*.
<br />
@RESTRETURNCODE{404}
If the specified user user function does not exist, the server will respond with *HTTP 404*.
<br />
@EXAMPLES
<br />
deletes a function:
<br />

<div id="RestAqlfunctionDelete_container">
<div id="RestAqlfunctionDelete_long">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/aqlfunction/square::x::y

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
</div>

<br />
function not found:
<br />

<div id="RestAqlfunctionDeleteFails_container">
<div id="RestAqlfunctionDeleteFails_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/aqlfunction/myfunction::x::y

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1582</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"user function '%s()' not found"</span> 
}
</pre>
</div>
<div id="RestAqlfunctionDeleteFails_short" onclick="$('#RestAqlfunctionDeleteFails_short').hide(); $('#RestAqlfunctionDeleteFails_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/aqlfunction/myfunction::x::y

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-explain.js -->
@startDocuBlock JSF_post_api_explain

@brief explain an AQL query and return information about it
<br />
@RESTHEADER{POST /_api/explain, Explain an AQL query}
<br />
A JSON object describing the query and query parameters.
<br />
@RESTBODYPARAM{query,string,required,string}
the query which you want explained; If the query references any bind variables,
these must also be passed in the attribute *bindVars*. Additional
options for the query can be passed in the *options* attribute.
<br />
@RESTBODYPARAM{bindVars,array,optional,object}
key/value pairs representing the bind values
<br />
@RESTBODYPARAM{options,object,optional,explain_options}
Options for the query
<br />
@RESTSTRUCT{allPlans,explain_options,boolean,optional,}
if set to *true*, all possible execution plans will be returned.
The default is *false*, meaning only the optimal plan will be returned.
<br />
@RESTSTRUCT{maxNumberOfPlans,explain_options,integer,optional,int64}
an optional maximum number of plans that the optimizer is 
allowed to generate. Setting this attribute to a low value allows to put a
cap on the amount of work the optimizer does.
<br />
@RESTSTRUCT{optimizer.rules,explain_options,array,optional,string}
an array of to-be-included or to-be-excluded optimizer rules
can be put into this attribute, telling the optimizer to include or exclude
specific rules. To disable a rule, prefix its name with a `-`, to enable a rule, prefix it
with a `+`. There is also a pseudo-rule `all`, which will match all optimizer rules.
<br />
@RESTDESCRIPTION
<br />
To explain how an AQL query would be executed on the server, the query string
can be sent to the server via an HTTP POST request. The server will then validate
the query and create an execution plan for it. The execution plan will be
returned, but the query will not be executed.
<br />
The execution plan that is returned by the server can be used to estimate the
probable performance of the query. Though the actual performance will depend
on many different factors, the execution plan normally can provide some rough
estimates on the amount of work the server needs to do in order to actually run 
the query.
<br />
By default, the explain operation will return the optimal plan as chosen by
the query optimizer The optimal plan is the plan with the lowest total estimated
cost. The plan will be returned in the attribute *plan* of the response object.
If the option *allPlans* is specified in the request, the result will contain 
all plans created by the optimizer. The plans will then be returned in the 
attribute *plans*.
<br />
The result will also contain an attribute *warnings*, which is an array of 
warnings that occurred during optimization or execution plan creation. Additionally,
a *stats* attribute is contained in the result with some optimizer statistics.
<br />
Each plan in the result is a JSON object with the following attributes:
- *nodes*: the array of execution nodes of the plan. The array of available node types
  can be found [here](../Aql/Optimizer.md)
<br />
- *estimatedCost*: the total estimated cost for the plan. If there are multiple
  plans, the optimizer will choose the plan with the lowest total cost.
<br />
- *collections*: an array of collections used in the query
<br />
- *rules*: an array of rules the optimizer applied. An overview of the
  available rules can be found [here](../Aql/Optimizer.md)
<br />
- *variables*: array of variables used in the query (note: this may contain
  internal variables created by the optimizer)
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the query is valid, the server will respond with *HTTP 200* and
return the optimal execution plan in the *plan* attribute of the response.
If option *allPlans* was set in the request, an array of plans will be returned
in the *allPlans* attribute instead.
<br />
@RESTRETURNCODE{400}
The server will respond with *HTTP 400* in case of a malformed request,
or if the query contains a parse error. The body of the response will
contain the error details embedded in a JSON object.
Omitting bind variables if the query references any will also result
in an *HTTP 400* error.
<br />
@RESTRETURNCODE{404}
The server will respond with *HTTP 404* in case a non-existing collection is
accessed in the query.
<br />
@EXAMPLES
<br />
Valid query
<br />

<div id="RestExplainValid_container">
<div id="RestExplainValid_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products RETURN p"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateCollectionNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">11</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
        }, 
        <span class="hljs-string">"random"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">21</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">21</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestExplainValid_short" onclick="$('#RestExplainValid_short').hide(); $('#RestExplainValid_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products RETURN p"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
A plan with some optimizer rules applied
<br />

<div id="RestExplainOptimizerRules_container">
<div id="RestExplainOptimizerRules_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LET a = p.id FILTER a == 4 LET name = p.name SORT p.id LIMIT 1 RETURN name"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"IndexNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">11</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">11</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
        }, 
        <span class="hljs-string">"indexes"</span> : [ 
          { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
            <span class="hljs-string">"id"</span> : <span class="hljs-string">"756697217"</span>, 
            <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"fields"</span> : [ 
              <span class="hljs-string">"id"</span> 
            ] 
          } 
        ], 
        <span class="hljs-string">"condition"</span> : { 
        }, 
        <span class="hljs-string">"reverse"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">11</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">21</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"id"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"a"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">3</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">31</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare =="</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"a"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span> 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">4</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"simple"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"FilterNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">4</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">41</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        } 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"LimitNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">5</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">9</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">42</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"offset"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"limit"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"fullCount"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">9</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">43</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">6</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">44</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ 
      <span class="hljs-string">"move-calculations-up"</span>, 
      <span class="hljs-string">"remove-redundant-calculations"</span>, 
      <span class="hljs-string">"remove-unnecessary-calculations"</span>, 
      <span class="hljs-string">"move-calculations-up-2"</span>, 
      <span class="hljs-string">"use-index-for-sort"</span>, 
      <span class="hljs-string">"move-calculations-down"</span> 
    ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"a"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">44</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">36</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestExplainOptimizerRules_short" onclick="$('#RestExplainOptimizerRules_short').hide(); $('#RestExplainOptimizerRules_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LET a = p.id FILTER a == 4 LET name = p.name SORT p.id LIMIT 1 RETURN name"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using some options
<br />

<div id="RestExplainOptions_container">
<div id="RestExplainOptions_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LET a = p.id FILTER a == 4 LET name = p.name SORT p.id LIMIT 1 RETURN name"</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"maxNumberOfPlans"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"allPlans"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"optimizer"</span> : { 
      <span class="hljs-string">"rules"</span> : [ 
        <span class="hljs-string">"-all"</span>, 
        <span class="hljs-string">"+use-index-for-sort"</span>, 
        <span class="hljs-string">"+use-index-range"</span> 
      ] 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"plans"</span> : [ 
    { 
      <span class="hljs-string">"nodes"</span> : [ 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"IndexNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">1</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">11</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">11</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
          <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
          <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
          }, 
          <span class="hljs-string">"indexes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-string">"759253121"</span>, 
              <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
              <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
              <span class="hljs-string">"fields"</span> : [ 
                <span class="hljs-string">"id"</span> 
              ] 
            } 
          ], 
          <span class="hljs-string">"condition"</span> : { 
          }, 
          <span class="hljs-string">"reverse"</span> : <span class="hljs-literal">false</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">11</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">21</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
          <span class="hljs-string">"expression"</span> : { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"id"</span>, 
            <span class="hljs-string">"subNodes"</span> : [ 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
                <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
              } 
            ] 
          }, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"a"</span> 
          }, 
          <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">3</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">31</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
          <span class="hljs-string">"expression"</span> : { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare =="</span>, 
            <span class="hljs-string">"subNodes"</span> : [ 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                <span class="hljs-string">"name"</span> : <span class="hljs-string">"a"</span>, 
                <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span> 
              }, 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
                <span class="hljs-string">"value"</span> : <span class="hljs-number">4</span> 
              } 
            ] 
          }, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
          }, 
          <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"simple"</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"FilterNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">4</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">41</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
          <span class="hljs-string">"inVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
          } 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">5</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">51</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
          <span class="hljs-string">"expression"</span> : { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span>, 
            <span class="hljs-string">"subNodes"</span> : [ 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
                <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
              } 
            ] 
          }, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span> 
          }, 
          <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">6</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">7</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">61</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
          <span class="hljs-string">"expression"</span> : { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"id"</span>, 
            <span class="hljs-string">"subNodes"</span> : [ 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
                <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
              } 
            ] 
          }, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
          }, 
          <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"LimitNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">7</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">9</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">62</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"offset"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"limit"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"fullCount"</span> : <span class="hljs-literal">false</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">9</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">10</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">63</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"inVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span> 
          } 
        } 
      ], 
      <span class="hljs-string">"rules"</span> : [ 
        <span class="hljs-string">"use-index-for-sort"</span> 
      ], 
      <span class="hljs-string">"collections"</span> : [ 
        { 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
        } 
      ], 
      <span class="hljs-string">"variables"</span> : [ 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"name"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"a"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
        } 
      ], 
      <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">63</span>, 
      <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
    } 
  ], 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">34</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestExplainOptions_short" onclick="$('#RestExplainOptions_short').hide(); $('#RestExplainOptions_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products LET a = p.id FILTER a == 4 LET name = p.name SORT p.id LIMIT 1 RETURN name"</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"maxNumberOfPlans"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"allPlans"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"optimizer"</span> : { 
      <span class="hljs-string">"rules"</span> : [ 
        <span class="hljs-string">"-all"</span>, 
        <span class="hljs-string">"+use-index-for-sort"</span>, 
        <span class="hljs-string">"+use-index-range"</span> 
      ] 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Returning all plans
<br />

<div id="RestExplainAllPlans_container">
<div id="RestExplainAllPlans_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products FILTER p.id == 25 RETURN p"</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"allPlans"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"plans"</span> : [ 
    { 
      <span class="hljs-string">"nodes"</span> : [ 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"IndexNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">1</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1.99</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
          <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
          }, 
          <span class="hljs-string">"indexes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-string">"755714177"</span>, 
              <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
              <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
              <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
              <span class="hljs-string">"fields"</span> : [ 
                <span class="hljs-string">"id"</span> 
              ] 
            } 
          ], 
          <span class="hljs-string">"condition"</span> : { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary or"</span>, 
            <span class="hljs-string">"subNodes"</span> : [ 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary and"</span>, 
                <span class="hljs-string">"subNodes"</span> : [ 
                  { 
                    <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare =="</span>, 
                    <span class="hljs-string">"subNodes"</span> : [ 
                      { 
                        <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
                        <span class="hljs-string">"name"</span> : <span class="hljs-string">"id"</span>, 
                        <span class="hljs-string">"subNodes"</span> : [ 
                          { 
                            <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                            <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span>, 
                            <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                          } 
                        ] 
                      }, 
                      { 
                        <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
                        <span class="hljs-string">"value"</span> : <span class="hljs-number">25</span> 
                      } 
                    ] 
                  } 
                ] 
              } 
            ] 
          }, 
          <span class="hljs-string">"reverse"</span> : <span class="hljs-literal">false</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">6</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">2.99</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"inVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
          } 
        } 
      ], 
      <span class="hljs-string">"rules"</span> : [ 
        <span class="hljs-string">"use-indexes"</span>, 
        <span class="hljs-string">"remove-filter-covered-by-index"</span> 
      ], 
      <span class="hljs-string">"collections"</span> : [ 
        { 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
        } 
      ], 
      <span class="hljs-string">"variables"</span> : [ 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"p"</span> 
        } 
      ], 
      <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">2.99</span>, 
      <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
    } 
  ], 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestExplainAllPlans_short" onclick="$('#RestExplainAllPlans_short').hide(); $('#RestExplainAllPlans_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products FILTER p.id == 25 RETURN p"</span>, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"allPlans"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
A query that produces a warning
<br />

<div id="RestExplainWarning_container">
<div id="RestExplainWarning_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..10 RETURN 1 / 0"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"range"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">1</span> 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">10</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"simple"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"value"</span> : <span class="hljs-literal">null</span> 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"json"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateListNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">4</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">13</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        } 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">3</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">23</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ 
      <span class="hljs-string">"move-calculations-up"</span>, 
      <span class="hljs-string">"move-calculations-up-2"</span> 
    ], 
    <span class="hljs-string">"collections"</span> : [ ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">23</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">10</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ 
    { 
      <span class="hljs-string">"code"</span> : <span class="hljs-number">1562</span>, 
      <span class="hljs-string">"message"</span> : <span class="hljs-string">"division by zero"</span> 
    } 
  ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestExplainWarning_short" onclick="$('#RestExplainWarning_short').hide(); $('#RestExplainWarning_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR i IN 1..10 RETURN 1 / 0"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Invalid query (missing bind parameter)
<br />

<div id="RestExplainInvalid_container">
<div id="RestExplainInvalid_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products FILTER p.id == @id LIMIT 2 RETURN p.n"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1551</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"no value specified for declared bind parameter 'id' (while parsing)"</span> 
}
</pre>
</div>
<div id="RestExplainInvalid_short" onclick="$('#RestExplainInvalid_short').hide(); $('#RestExplainInvalid_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR p IN products FILTER p.id == @id LIMIT 2 RETURN p.n"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
The data returned in the *plan* attribute of the result contains one
element per AQL top-level statement (i.e. *FOR*, *RETURN*,
*FILTER* etc.). If the query optimizer removed some unnecessary statements,
the result might also contain less elements than there were top-level
statements in the AQL query.
The following example shows a query with a non-sensible filter condition that
the optimizer has removed so that there are less top-level statements.
<br />

<div id="RestExplainEmpty_container">
<div id="RestExplainEmpty_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ "query" : "FOR i IN [ 1, 2, 3 ] FILTER 1 == 2 RETURN i" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"array"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">1</span> 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">2</span> 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">3</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"json"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"NoResultsNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">7</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">0.5</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">0</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateListNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">7</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">0.5</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        } 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">3</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">0.5</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ 
      <span class="hljs-string">"move-calculations-up"</span>, 
      <span class="hljs-string">"move-filters-up"</span>, 
      <span class="hljs-string">"remove-unnecessary-filters"</span>, 
      <span class="hljs-string">"remove-unnecessary-calculations"</span> 
    ], 
    <span class="hljs-string">"collections"</span> : [ ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">0.5</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">0</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestExplainEmpty_short" onclick="$('#RestExplainEmpty_short').hide(); $('#RestExplainEmpty_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/explain &lt;&lt;EOF
{ "query" : "FOR i IN [ 1, 2, 3 ] FILTER 1 == 2 RETURN i" }
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_test_GET

@brief executes a cluster roundtrip for sharding
<br />
@RESTHEADER{GET /_admin/cluster-test, Execute cluster roundtrip}
<br />
@RESTDESCRIPTION
<br />
Executes a cluster roundtrip from a coordinator to a DB server and
back. This call only works in a coordinator node in a cluster.
One can and should append an arbitrary path to the URL and the
part after */_admin/cluster-test* is used as the path of the HTTP
request which is sent from the coordinator to a DB node. Likewise,
any form data appended to the URL is forwarded in the request to the
DB node. This handler takes care of all request types (see below)
and uses the same request type in its request to the DB node.
<br />
The following HTTP headers are interpreted in a special way:
<br />
  - *X-Shard-ID*: This specifies the ID of the shard to which the
    cluster request is sent and thus tells the system to which DB server
    to send the cluster request. Note that the mapping from the
    shard ID to the responsible server has to be defined in the
    agency under *Current/ShardLocation/<shardID>*. One has to give
    this header, otherwise the system does not know where to send
    the request.
  - *X-Client-Transaction-ID*: the value of this header is taken
    as the client transaction ID for the request
  - *X-Timeout*: specifies a timeout in seconds for the cluster
    operation. If the answer does not arrive within the specified
    timeout, an corresponding error is returned and any subsequent
    real answer is ignored. The default if not given is 24 hours.
  - *X-Synchronous-Mode*: If set to *true* the test function uses
    synchronous mode, otherwise the default asynchronous operation
    mode is used. This is mainly for debugging purposes.
  - *Host*: This header is ignored and not forwarded to the DB server.
  - *User-Agent*: This header is ignored and not forwarded to the DB
    server.
<br />
All other HTTP headers and the body of the request (if present, see
other HTTP methods below) are forwarded as given in the original request.
<br />
In asynchronous mode the DB server answers with an HTTP request of its
own, in synchronous mode it sends a HTTP response. In both cases the
headers and the body are used to produce the HTTP response of this
API call.
<br />
@RESTRETURNCODES
<br />
The return code can be anything the cluster request returns, as well as:
<br />
@RESTRETURNCODE{200}
is returned when everything went well, or if a timeout occurred. In the
latter case a body of type application/json indicating the timeout
is returned.
<br />
@RESTRETURNCODE{403}
is returned if ArangoDB is not running in cluster mode.
<br />
@RESTRETURNCODE{404}
is returned if ArangoDB was not compiled for cluster operation.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_test_POST

@brief executes a cluster roundtrip for sharding
<br />
@RESTHEADER{POST /_admin/cluster-test, Execute cluster roundtrip}
<br />
@RESTALLBODYPARAM{body,object,required}
The body can be any type and is simply forwarded.
<br />
@RESTDESCRIPTION
See GET method.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_test_PUT

@brief executes a cluster roundtrip for sharding
<br />
@RESTHEADER{PUT /_admin/cluster-test, Execute cluster roundtrip}
<br />
@RESTALLBODYPARAM{body,object,required}
<br />
@RESTDESCRIPTION
See GET method. The body can be any type and is simply forwarded.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_test_DELETE

@brief executes a cluster roundtrip for sharding
<br />
@RESTHEADER{DELETE /_admin/cluster-test, Delete cluster roundtrip}
<br />
@RESTDESCRIPTION
See GET method.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_test_PATCH

@brief executes a cluster roundtrip for sharding
<br />
@RESTHEADER{PATCH /_admin/cluster-test, Update cluster roundtrip}
<br />
@RESTALLBODYPARAM{body,object,required}
<br />
@RESTDESCRIPTION
See GET method. The body can be any type and is simply forwarded.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_test_HEAD

@brief executes a cluster roundtrip for sharding
<br />
@RESTHEADER{HEAD /_admin/cluster-test, Execute cluster roundtrip}
<br />
@RESTDESCRIPTION
See GET method.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_planner_POST

@brief exposes the cluster planning functionality
<br />
@RESTHEADER{POST /_admin/clusterPlanner, Produce cluster startup plan}
<br />
@RESTALLBODYPARAM{clusterPlan,object,required}
A cluster plan object
<br />
@RESTDESCRIPTION Given a description of a cluster, this plans the details
of a cluster and returns a JSON description of a plan to start up this
cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200} is returned when everything went well.
<br />
@RESTRETURNCODE{400} the posted body was not valid JSON.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_dispatcher_POST

@brief exposes the dispatcher functionality to start up, shutdown,
relaunch, upgrade or cleanup a cluster according to a cluster plan
as for example provided by the kickstarter.
<br />
@RESTHEADER{POST /_admin/clusterDispatch,execute startup commands}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTBODYPARAM{clusterPlan,object,required,}
is a cluster plan (see JSF_cluster_planner_POST),
<br />
@RESTBODYPARAM{myname,string,required,string}
is the ID of this dispatcher, this is used to decide
which commands are executed locally and which are forwarded
to other dispatchers
<br />
@RESTBODYPARAM{action,string,required,string}
can be one of the following:
  - "launch": the cluster is launched for the first time, all
      data directories and log files are cleaned and created
  - "shutdown": the cluster is shut down, the additional property
  *runInfo* (see below) must be bound as well
  - "relaunch": the cluster is launched again, all data directories
      and log files are untouched and need to be there already
  - "cleanup": use this after a shutdown to remove all data in the
      data directories and all log files, use with caution
  - "isHealthy": checks whether or not the processes involved
      in the cluster are running or not. The additional property
  *runInfo* (see above) must be bound as well
  - "upgrade": performs an upgrade of a cluster, to this end,
      the agency is started, and then every server is once started
      with the "--upgrade" option, and then normally. Finally,
      the script "verion-check.js" is run on one of the coordinators
      for the cluster.
<br />
@RESTBODYPARAM{runInfo,object,optional,}
this is needed for the "shutdown" and "isHealthy" actions
only and should be the structure that "launch", "relaunch" or
"upgrade" returned. It contains runtime information like process
IDs.
<br />
@RESTDESCRIPTION
The body must be an object with the following properties:
<br />
This call executes the plan by either doing the work personally
or by delegating to other dispatchers.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200} is returned when everything went well.
<br />
@RESTRETURNCODE{400} the posted body was not valid JSON, or something
went wrong with the startup.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_check_port_GET

@brief allows to check whether a given port is usable
<br />
@RESTHEADER{GET /_admin/clusterCheckPort, Check port}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{port,integer,required}
<br />
@RESTDESCRIPTION Checks whether the requested port is usable.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200} is returned when everything went well.
<br />
@RESTRETURNCODE{400} the parameter port was not given or is no integer.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-cluster.js -->
@startDocuBlock JSF_cluster_statistics_GET

@brief allows to query the statistics of a DBserver in the cluster
<br />
@RESTHEADER{GET /_admin/clusterStatistics, Queries statistics of DBserver}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{DBserver,string,required}
<br />
@RESTDESCRIPTION Queries the statistics of the given DBserver
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200} is returned when everything went well.
<br />
@RESTRETURNCODE{400} the parameter DBserver was not given or is not the
ID of a DBserver
<br />
@RESTRETURNCODE{403} server is not a coordinator.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-traversal.js -->
@startDocuBlock JSF_HTTP_API_TRAVERSAL

@brief execute a server-side traversal
<br />
@RESTHEADER{POST /_api/traversal,executes a traversal}
<br />
@RESTDESCRIPTION
Starts a traversal starting from a given vertex and following.
edges contained in a given edgeCollection. The request must
contain the following attributes.
<br />
@RESTBODYPARAM{startVertex,string,required,string}
id of the startVertex, e.g. *"users/foo"*.
<br />
@RESTBODYPARAM{edgeCollection,string,optional, string}
name of the collection that contains the edges.
<br />
@RESTBODYPARAM{graphName,string,optional,string}
name of the graph that contains the edges.
Either *edgeCollection* or *graphName* has to be given.
In case both values are set the *graphName* is prefered.
<br />
@RESTBODYPARAM{filter,string,optional,string}
default is to include all nodes:
body (JavaScript code) of custom filter function
function signature: *(config, vertex, path) -> mixed*
can return four different string values:
- *"exclude"* -> this vertex will not be visited.
- *"prune"* -> the edges of this vertex will not be followed.
- *""* or *undefined* -> visit the vertex and follow it's edges.
- *Array* -> containing any combination of the above.
  If there is at least one *"exclude"* or *"prune"* respectivly
  is contained, it's effect will occur.
<br />
@RESTBODYPARAM{minDepth,string,optional,string}
ANDed with any existing filters):
visits only nodes in at least the given depth
<br />
@RESTBODYPARAM{maxDepth,string,optional,string}
ANDed with any existing filters visits only nodes in at most the given depth
<br />
@RESTBODYPARAM{visitor,string,optional,string}
body (JavaScript) code of custom visitor function
function signature: *(config, result, vertex, path, connected) -> void*
The visitor function can do anything, but its return value is ignored. To
populate a result, use the *result* variable by reference. Note that the
*connected* argument is only populated when the *order* attribute is set
to *"preorder-expander"*.
<br />
@RESTBODYPARAM{direction,string,optional,string}
direction for traversal
- *if set*, must be either *"outbound"*, *"inbound"*, or *"any"*
- *if not set*, the *expander* attribute must be specified
<br />
@RESTBODYPARAM{init,string,optional,string}
body (JavaScript) code of custom result initialization function
function signature: *(config, result) -> void*
initialize any values in result with what is required
<br />
@RESTBODYPARAM{expander,string,optional,string}
body (JavaScript) code of custom expander function
*must* be set if *direction* attribute is **not** set
function signature: *(config, vertex, path) -> array*
expander must return an array of the connections for *vertex*
each connection is an object with the attributes *edge* and *vertex*
<br />
@RESTBODYPARAM{sort,string,optional,string}
body (JavaScript) code of a custom comparison function
for the edges. The signature of this function is
*(l, r) -> integer* (where l and r are edges) and must
return -1 if l is smaller than, +1 if l is greater than,
and 0 if l and r are equal. The reason for this is the
following: The order of edges returned for a certain
vertex is undefined. This is because there is no natural
order of edges for a vertex with multiple connected edges.
To explicitly define the order in which edges on the
vertex are followed, you can specify an edge comparator
function with this attribute. Note that the value here has
to be a string to conform to the JSON standard, which in
turn is parsed as function body on the server side. Furthermore
note that this attribute is only used for the standard
expanders. If you use your custom expander you have to
do the sorting yourself within the expander code.
<br />
@RESTBODYPARAM{strategy,string,optional,string}
traversal strategy can be *"depthfirst"* or *"breadthfirst"*
<br />
@RESTBODYPARAM{order,string,optional,string}
traversal order can be *"preorder"*, *"postorder"* or *"preorder-expander"*
<br />
@RESTBODYPARAM{itemOrder,string,optional,string}
item iteration order can be *"forward"* or *"backward"*
<br />
@RESTBODYPARAM{uniqueness,string,optional,string}
specifies uniqueness for vertices and edges visited
if set, must be an object like this:
<br />
*"uniqueness": {"vertices": "none"|"global"|"path", "edges": "none"|"global"|"path"}*
<br />
@RESTBODYPARAM{maxIterations,string,optional,string}
Maximum number of iterations in each traversal. This number can be
set to prevent endless loops in traversal of cyclic graphs. When a traversal performs
as many iterations as the *maxIterations* value, the traversal will abort with an
error. If *maxIterations* is not set, a server-defined value may be used.
<br />
@RESTDESCRIPTION
<br />
If the Traversal is successfully executed *HTTP 200* will be returned.
Additionally the *result* object will be returned by the traversal.
<br />
For successful traversals, the returned JSON object has the
following properties:
<br />
- *error*: boolean flag to indicate if an error occurred (*false*
  in this case)
<br />
- *code*: the HTTP status code
<br />
- *result*: the return value of the traversal
<br />
If the traversal specification is either missing or malformed, the server
will respond with *HTTP 400*.
<br />
The body of the response will then contain a JSON object with additional error
details. The object has the following attributes:
<br />
- *error*: boolean flag to indicate that an error occurred (*true* in this case)
<br />
- *code*: the HTTP status code
<br />
- *errorNum*: the server error number
<br />
- *errorMessage*: a descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the traversal is fully executed
*HTTP 200* will be returned.
<br />
@RESTRETURNCODE{400}
If the traversal specification is either missing or malformed, the server
will respond with *HTTP 400*.
<br />
@RESTRETURNCODE{404}
The server will responded with *HTTP 404* if the specified edge collection
does not exist, or the specified start vertex cannot be found.
<br />
@RESTRETURNCODE{500}
The server will responded with *HTTP 500* when an error occurs inside the
traversal or if a traversal performs more than *maxIterations* iterations.
<br />
@EXAMPLES
<br />
In the following examples the underlying graph will contain five persons
*Alice*, *Bob*, *Charlie*, *Dave* and *Eve*.
We will have the following directed relations:
  - *Alice* knows *Bob*
  - *Bob* knows *Charlie*
  - *Bob* knows *Dave*
  - *Eve* knows *Alice*
  - *Eve* knows *Bob*
<br />
The starting vertex will always be Alice.
<br />
Follow only outbound edges
<br />

<div id="RestTraversalOutbound_container">
<div id="RestTraversalOutbound_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911689857"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911886465"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"912148609"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"912345217"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911689857"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/912803969"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"912803969"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"912803969"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911689857"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911886465"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/912803969"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"912803969"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"912803969"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/913000577"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"913000577"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"913000577"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911689857"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911886465"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"912148609"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/912803969"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"912803969"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"912803969"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/913197185"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"913197185"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"913197185"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911689857"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"911886465"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"912345217"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalOutbound_short" onclick="$('#RestTraversalOutbound_short').hide(); $('#RestTraversalOutbound_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Follow only inbound edges
<br />

<div id="RestTraversalInbound_container">
<div id="RestTraversalInbound_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"inbound"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"893208705"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"894060673"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"893208705"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/894912641"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"894912641"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"894912641"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"893208705"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"894060673"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalInbound_short" onclick="$('#RestTraversalInbound_short').hide(); $('#RestTraversalInbound_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"inbound"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Follow any direction of edges
<br />

<div id="RestTraversalAny_container">
<div id="RestTraversalAny_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"uniqueness"</span> : { 
    <span class="hljs-string">"vertices"</span> : <span class="hljs-string">"none"</span>, 
    <span class="hljs-string">"edges"</span> : <span class="hljs-string">"global"</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863979649"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863324289"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863586433"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863783041"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864831617"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863979649"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864831617"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/865028225"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863979649"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863324289"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864831617"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/865028225"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864241793"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864241793"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864241793"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863979649"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863324289"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864831617"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/865028225"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864438401"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864438401"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864438401"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863979649"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863324289"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863586433"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864831617"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864831617"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/865028225"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"865028225"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/864635009"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"864635009"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"864635009"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863127681"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863979649"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863324289"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"863783041"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalAny_short" onclick="$('#RestTraversalAny_short').hide(); $('#RestTraversalAny_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"uniqueness"</span> : { 
    <span class="hljs-string">"vertices"</span> : <span class="hljs-string">"none"</span>, 
    <span class="hljs-string">"edges"</span> : <span class="hljs-string">"global"</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Excluding *Charlie* and *Bob*
<br />

<div id="RestTraversalFilterExclude_container">
<div id="RestTraversalFilterExclude_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"filter"</span> : <span class="hljs-string">"if (vertex.name === \"Bob\" ||     vertex.name === \"Charlie\") {  return \"exclude\";}return;"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"885016705"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"885672065"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"885016705"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/886130817"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"886130817"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"886130817"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/886524033"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"886524033"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"886524033"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"885016705"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"885213313"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"885672065"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalFilterExclude_short" onclick="$('#RestTraversalFilterExclude_short').hide(); $('#RestTraversalFilterExclude_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"filter"</span> : <span class="hljs-string">"if (vertex.name === \"Bob\" ||     vertex.name === \"Charlie\") {  return \"exclude\";}return;"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Do not follow edges from *Bob*
<br />

<div id="RestTraversalFilterPrune_container">
<div id="RestTraversalFilterPrune_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"filter"</span> : <span class="hljs-string">"if (vertex.name === \"Bob\") {return \"prune\";}return;"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"889276545"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"889473153"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"889276545"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/890390657"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"890390657"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"890390657"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"889276545"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"889473153"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalFilterPrune_short" onclick="$('#RestTraversalFilterPrune_short').hide(); $('#RestTraversalFilterPrune_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"filter"</span> : <span class="hljs-string">"if (vertex.name === \"Bob\") {return \"prune\";}return;"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Visit only nodes in a depth of at least 2
<br />

<div id="RestTraversalMinDepth_container">
<div id="RestTraversalMinDepth_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"minDepth"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"907888769"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"908085377"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/908544129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"908544129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"908544129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/908740737"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"908740737"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"908740737"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"907430017"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"907626625"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"907888769"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/908544129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"908544129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"908544129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/908937345"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"908937345"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"908937345"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"907430017"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"907626625"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"908085377"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalMinDepth_short" onclick="$('#RestTraversalMinDepth_short').hide(); $('#RestTraversalMinDepth_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"minDepth"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Visit only nodes in a depth of at most 1
<br />

<div id="RestTraversalMaxDepth_container">
<div id="RestTraversalMaxDepth_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"maxDepth"</span> : <span class="hljs-number">1</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"897206401"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"897403009"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"897206401"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/898320513"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"898320513"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"898320513"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"897206401"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"897403009"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalMaxDepth_short" onclick="$('#RestTraversalMaxDepth_short').hide(); $('#RestTraversalMaxDepth_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"maxDepth"</span> : <span class="hljs-number">1</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a visitor function to return vertex ids only
<br />

<div id="RestTraversalVisitorFunc_container">
<div id="RestTraversalVisitorFunc_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"visitor"</span> : <span class="hljs-string">"result.visited.vertices.push(vertex._id);"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"persons/alice"</span>, 
        <span class="hljs-string">"persons/bob"</span>, 
        <span class="hljs-string">"persons/charlie"</span>, 
        <span class="hljs-string">"persons/dave"</span> 
      ], 
      <span class="hljs-string">"paths"</span> : [ ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalVisitorFunc_short" onclick="$('#RestTraversalVisitorFunc_short').hide(); $('#RestTraversalVisitorFunc_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"visitor"</span> : <span class="hljs-string">"result.visited.vertices.push(vertex._id);"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Count all visited nodes and return a list of nodes only
<br />

<div id="RestTraversalVisitorCountAndList_container">
<div id="RestTraversalVisitorCountAndList_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"init"</span> : <span class="hljs-string">"result.visited = 0; result.myVertices = [ ];"</span>, 
  <span class="hljs-string">"visitor"</span> : <span class="hljs-string">"result.visited++; result.myVertices.push(vertex);"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : <span class="hljs-number">4</span>, 
    <span class="hljs-string">"myVertices"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"921913473"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"922110081"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"922372225"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"922568833"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
      } 
    ] 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalVisitorCountAndList_short" onclick="$('#RestTraversalVisitorCountAndList_short').hide(); $('#RestTraversalVisitorCountAndList_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"outbound"</span>, 
  <span class="hljs-string">"init"</span> : <span class="hljs-string">"result.visited = 0; result.myVertices = [ ];"</span>, 
  <span class="hljs-string">"visitor"</span> : <span class="hljs-string">"result.visited++; result.myVertices.push(vertex);"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Expand only inbound edges of *Alice* and outbound edges of *Eve*
<br />

<div id="RestTraversalVisitorExpander_container">
<div id="RestTraversalVisitorExpander_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"expander"</span> : <span class="hljs-string">"var connections = [ ];if (vertex.name === \"Alice\") {config.datasource.getInEdges(vertex).forEach(function (e) {connections.push({ vertex: require(\"internal\").db._document(e._from), edge: e});});}if (vertex.name === \"Eve\") {config.datasource.getOutEdges(vertex).forEach(function (e) {connections.push({vertex: require(\"internal\").db._document(e._to), edge: e});});}return connections;"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"926173313"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"927025281"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"926369921"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"926173313"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/927877249"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"927877249"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"927877249"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"926173313"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"927025281"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/927877249"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"927877249"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"927877249"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/928073857"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"928073857"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"928073857"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"926173313"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"927025281"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"926369921"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalVisitorExpander_short" onclick="$('#RestTraversalVisitorExpander_short').hide(); $('#RestTraversalVisitorExpander_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"expander"</span> : <span class="hljs-string">"var connections = [ ];if (vertex.name === \"Alice\") {config.datasource.getInEdges(vertex).forEach(function (e) {connections.push({ vertex: require(\"internal\").db._document(e._from), edge: e});});}if (vertex.name === \"Eve\") {config.datasource.getOutEdges(vertex).forEach(function (e) {connections.push({vertex: require(\"internal\").db._document(e._to), edge: e});});}return connections;"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Follow the *depthfirst* strategy
<br />

<div id="RestTraversalDepthFirst_container">
<div id="RestTraversalDepthFirst_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"strategy"</span> : <span class="hljs-string">"depthfirst"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874530945"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874727553"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874530945"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874727553"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875776129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875776129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875972737"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875776129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875972737"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875186305"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875776129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875972737"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875382913"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875382913"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875382913"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874530945"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875776129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875972737"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875579521"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875579521"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875579521"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874727553"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875186305"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875186305"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875972737"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875186305"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875972737"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875972737"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875776129"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875776129"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874924161"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875186305"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875382913"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875382913"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875382913"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874530945"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875186305"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875186305"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/875579521"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"875579521"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"875579521"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874072193"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874268801"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"874727553"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalDepthFirst_short" onclick="$('#RestTraversalDepthFirst_short').hide(); $('#RestTraversalDepthFirst_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"strategy"</span> : <span class="hljs-string">"depthfirst"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using *postorder* ordering
<br />

<div id="RestTraversalPostorder_container">
<div id="RestTraversalPostorder_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"order"</span> : <span class="hljs-string">"postorder"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916408449"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916605057"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916408449"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916605057"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917653633"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917850241"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917063809"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917653633"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917850241"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917260417"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917260417"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917260417"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916408449"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917653633"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917850241"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917457025"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917457025"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917457025"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916605057"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917653633"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917850241"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917653633"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917063809"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917850241"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917653633"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917653633"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917063809"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917850241"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917850241"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916801665"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917063809"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917260417"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917260417"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917260417"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916408449"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917063809"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917457025"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917457025"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917457025"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916605057"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/917063809"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"917063809"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"916146305"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"915949697"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalPostorder_short" onclick="$('#RestTraversalPostorder_short').hide(); $('#RestTraversalPostorder_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"order"</span> : <span class="hljs-string">"postorder"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using *backward* item-ordering:
<br />

<div id="RestTraversalBackwardItemOrder_container">
<div id="RestTraversalBackwardItemOrder_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"itemOrder"</span> : <span class="hljs-string">"backward"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868763777"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868567169"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868763777"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868567169"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869222529"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869222529"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869615745"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869615745"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869615745"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868763777"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869222529"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869419137"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869419137"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869419137"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868567169"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869222529"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/870008961"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869222529"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/870008961"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869812353"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869812353"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869812353"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/870008961"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869812353"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/870008961"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869615745"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869615745"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869615745"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868763777"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869812353"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/870008961"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869419137"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869419137"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869419137"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868567169"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869812353"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869812353"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/870008961"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"870008961"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/869222529"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"869222529"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868960385"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868305025"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"868108417"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalBackwardItemOrder_short" onclick="$('#RestTraversalBackwardItemOrder_short').hide(); $('#RestTraversalBackwardItemOrder_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"itemOrder"</span> : <span class="hljs-string">"backward"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Edges should only be included once globally,
but nodes are included every time they are visited
<br />

<div id="RestTraversalEdgeUniqueness_container">
<div id="RestTraversalEdgeUniqueness_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"uniqueness"</span> : { 
    <span class="hljs-string">"vertices"</span> : <span class="hljs-string">"none"</span>, 
    <span class="hljs-string">"edges"</span> : <span class="hljs-string">"global"</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"visited"</span> : { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880887937"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880232577"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880494721"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880691329"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
        } 
      ], 
      <span class="hljs-string">"paths"</span> : [ 
        { 
          <span class="hljs-string">"edges"</span> : [ ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881739905"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880887937"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881739905"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881936513"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880887937"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880232577"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881739905"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881936513"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881150081"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881150081"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881150081"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880887937"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880232577"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881739905"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881936513"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881346689"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881346689"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881346689"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880887937"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880232577"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880494721"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"edges"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881739905"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881739905"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881936513"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881936513"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/881543297"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"881543297"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"881543297"</span>, 
              <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
            } 
          ], 
          <span class="hljs-string">"vertices"</span> : [ 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880035969"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880887937"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880232577"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
            }, 
            { 
              <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
              <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span>, 
              <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"880691329"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span> 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTraversalEdgeUniqueness_short" onclick="$('#RestTraversalEdgeUniqueness_short').hide(); $('#RestTraversalEdgeUniqueness_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"uniqueness"</span> : { 
    <span class="hljs-string">"vertices"</span> : <span class="hljs-string">"none"</span>, 
    <span class="hljs-string">"edges"</span> : <span class="hljs-string">"global"</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
If the underlying graph is cyclic, *maxIterations* should be set
<br />
The underlying graph has two vertices *Alice* and *Bob*.
With the directed edges:
- *Alice* knows *Bob*
_ *Bob* knows *Alice*
<br />
<br />

<div id="RestTraversalMaxIterations_container">
<div id="RestTraversalMaxIterations_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"uniqueness"</span> : { 
    <span class="hljs-string">"vertices"</span> : <span class="hljs-string">"none"</span>, 
    <span class="hljs-string">"edges"</span> : <span class="hljs-string">"none"</span> 
  }, 
  <span class="hljs-string">"maxIterations"</span> : <span class="hljs-number">5</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">500</span> Internal Server <span class="hljs-built_in">Error</span>
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">500</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1909</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"too many iterations - try increasing the value of 'maxIterations'"</span> 
}
</pre>
</div>
<div id="RestTraversalMaxIterations_short" onclick="$('#RestTraversalMaxIterations_short').hide(); $('#RestTraversalMaxIterations_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal &lt;&lt;EOF
{ 
  <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"persons/alice"</span>, 
  <span class="hljs-string">"graphName"</span> : <span class="hljs-string">"knows_graph"</span>, 
  <span class="hljs-string">"direction"</span> : <span class="hljs-string">"any"</span>, 
  <span class="hljs-string">"uniqueness"</span> : { 
    <span class="hljs-string">"vertices"</span> : <span class="hljs-string">"none"</span>, 
    <span class="hljs-string">"edges"</span> : <span class="hljs-string">"none"</span> 
  }, 
  <span class="hljs-string">"maxIterations"</span> : <span class="hljs-number">5</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">500</span> Internal Server <span class="hljs-built_in">Error</span>
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-database.js -->
@startDocuBlock JSF_get_api_database_list

@brief retrieves a list of all existing databases
<br />
@RESTHEADER{GET /_api/database, List of databases}
<br />
@RESTDESCRIPTION
Retrieves the list of all existing databases
<br />
**Note**: retrieving the list of databases is only possible from within the *_system* database.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the list of database was compiled successfully.
<br />
@RESTRETURNCODE{400}
is returned if the request is invalid.
<br />
@RESTRETURNCODE{403}
is returned if the request was not executed in the *_system* database.
<br />
@EXAMPLES
<br />

<div id="RestDatabaseGet_container">
<div id="RestDatabaseGet_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/database

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    <span class="hljs-string">"_system"</span> 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestDatabaseGet_short" onclick="$('#RestDatabaseGet_short').hide(); $('#RestDatabaseGet_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/database

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-database.js -->
@startDocuBlock JSF_get_api_database_user

@brief retrieves a list of all databases the current user can access
<br />
@RESTHEADER{GET /_api/database/user, List of accessible databases }
<br />
@RESTDESCRIPTION
Retrieves the list of all databases the current user can access without
specifying a different username or password.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the list of database was compiled successfully.
<br />
@RESTRETURNCODE{400}
is returned if the request is invalid.
<br />
@EXAMPLES
<br />

<div id="RestDatabaseGetUser_container">
<div id="RestDatabaseGetUser_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/database/user

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    <span class="hljs-string">"_system"</span> 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestDatabaseGetUser_short" onclick="$('#RestDatabaseGetUser_short').hide(); $('#RestDatabaseGetUser_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/database/user

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-database.js -->
@startDocuBlock JSF_get_api_database_current

@brief retrieves information about the current database
<br />
@RESTHEADER{GET /_api/database/current, Information of the database}
<br />
@RESTDESCRIPTION
Retrieves information about the current database
<br />
The response is a JSON object with the following attributes:
<br />
- *name*: the name of the current database
<br />
- *id*: the id of the current database
<br />
- *path*: the filesystem path of the current database
<br />
- *isSystem*: whether or not the current database is the *_system* database
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the information was retrieved successfully.
<br />
@RESTRETURNCODE{400}
is returned if the request is invalid.
<br />
@RESTRETURNCODE{404}
is returned if the database could not be found.
<br />
@EXAMPLES
<br />

<div id="RestDatabaseGetInfo_container">
<div id="RestDatabaseGetInfo_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/database/current

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"84097"</span>, 
    <span class="hljs-string">"path"</span> : <span class="hljs-string">"/tmp/vocdir.22090/databases/database-84097"</span>, 
    <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestDatabaseGetInfo_short" onclick="$('#RestDatabaseGetInfo_short').hide(); $('#RestDatabaseGetInfo_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/database/current

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-database.js -->
@startDocuBlock JSF_get_api_database_new

@brief creates a new database
<br />
@RESTHEADER{POST /_api/database, Create database}
<br />
@RESTBODYPARAM{name,string,required,string}
Has to contain a valid database name.
<br />
@RESTBODYPARAM{username,string,optional,string}
The user name as a string.
If *users* is not specified or does not contain any users, a default user
*root* will be created with an empty string password. This ensures that the
new database will be accessible after it is created.
<br />
@RESTBODYPARAM{passwd,string,optional,string}
The user password as a string. If not specified, it will default to an empty string.
<br />
@RESTBODYPARAM{active,boolean,optional,}
A Flag indicating whether the user account should be activated or not.
The default value is *true*.
<br />
@RESTBODYPARAM{extra,object,optional,}
A JSON object with extra user information. The data contained in *extra*
 will be stored for the user but not be interpreted further by ArangoDB.
<br />
@RESTBODYPARAM{users,array,optional,JSF_get_api_database_new_USERS}
Has to be a list of user objects to initially create for the new database.
Each user object can contain the following attributes:
<br />
@RESTSTRUCT{username,JSF_get_api_database_new_USERS,string,required,string}
Loginname of the user to be created
<br />
@RESTSTRUCT{passwd,JSF_get_api_database_new_USERS,string,required,string}
Password for the user
<br />
@RESTSTRUCT{active,JSF_get_api_database_new_USERS,boolean,required,}
if *False* the user won't be able to log into the database.
<br />
@RESTDESCRIPTION
Creates a new database
<br />
The response is a JSON object with the attribute *result* set to *true*.
<br />
**Note**: creating a new database is only possible from within the *_system* database.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the database was created successfully.
<br />
@RESTRETURNCODE{400}
is returned if the request parameters are invalid or if a database with the
specified name already exists.
<br />
@RESTRETURNCODE{403}
is returned if the request was not executed in the *_system* database.
<br />
@RESTRETURNCODE{409}
is returned if a database with the specified name already exists.
<br />
@EXAMPLES
<br />
Creating a database named *example*.
<br />

<div id="RestDatabaseCreate_container">
<div id="RestDatabaseCreate_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/database &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"example"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestDatabaseCreate_short" onclick="$('#RestDatabaseCreate_short').hide(); $('#RestDatabaseCreate_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/database &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"example"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Creating a database named *mydb* with two users.
<br />

<div id="RestDatabaseCreateUsers_container">
<div id="RestDatabaseCreateUsers_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/database &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"mydb"</span>, 
  <span class="hljs-string">"users"</span> : [ 
    { 
      <span class="hljs-string">"username"</span> : <span class="hljs-string">"admin"</span>, 
      <span class="hljs-string">"passwd"</span> : <span class="hljs-string">"secret"</span>, 
      <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span> 
    }, 
    { 
      <span class="hljs-string">"username"</span> : <span class="hljs-string">"tester"</span>, 
      <span class="hljs-string">"passwd"</span> : <span class="hljs-string">"test001"</span>, 
      <span class="hljs-string">"active"</span> : <span class="hljs-literal">false</span> 
    } 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestDatabaseCreateUsers_short" onclick="$('#RestDatabaseCreateUsers_short').hide(); $('#RestDatabaseCreateUsers_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/database &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"mydb"</span>, 
  <span class="hljs-string">"users"</span> : [ 
    { 
      <span class="hljs-string">"username"</span> : <span class="hljs-string">"admin"</span>, 
      <span class="hljs-string">"passwd"</span> : <span class="hljs-string">"secret"</span>, 
      <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span> 
    }, 
    { 
      <span class="hljs-string">"username"</span> : <span class="hljs-string">"tester"</span>, 
      <span class="hljs-string">"passwd"</span> : <span class="hljs-string">"test001"</span>, 
      <span class="hljs-string">"active"</span> : <span class="hljs-literal">false</span> 
    } 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-database.js -->
@startDocuBlock JSF_get_api_database_delete

@brief drop an existing database
<br />
@RESTHEADER{DELETE /_api/database/{database-name}, Drop database}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{database-name,string,required}
The name of the database
<br />
@RESTDESCRIPTION
Drops the database along with all data stored in it.
<br />
**Note**: dropping a database is only possible from within the *_system* database.
The *_system* database itself cannot be dropped.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the database was dropped successfully.
<br />
@RESTRETURNCODE{400}
is returned if the request is malformed.
<br />
@RESTRETURNCODE{403}
is returned if the request was not executed in the *_system* database.
<br />
@RESTRETURNCODE{404}
is returned if the database could not be found.
<br />
@EXAMPLES
<br />

<div id="RestDatabaseDrop_container">
<div id="RestDatabaseDrop_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/database/example

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestDatabaseDrop_short" onclick="$('#RestDatabaseDrop_short').hide(); $('#RestDatabaseDrop_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/database/example

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_any

@brief returns a random document from a collection
<br />
@RESTHEADER{PUT /_api/simple/any, Return a random document}
<br />
@RESTDESCRIPTION
<br />
Returns a random document from a collection. The call expects a JSON object
as body with the following attributes:
<br />
@RESTBODYPARAM{collection,string,required, string}
The identifier or name of the collection to query.
<br />
Returns a JSON object with the document stored in the attribute
*document* if the collection contains at least one document. If
the collection is empty, the *document* attrbute contains null.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />

<div id="RestSimpleAny_container">
<div id="RestSimpleAny_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/any &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"document"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/799426689"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"799426689"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"799426689"</span>, 
    <span class="hljs-string">"Hello4"</span> : <span class="hljs-string">"World4"</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleAny_short" onclick="$('#RestSimpleAny_short').hide(); $('#RestSimpleAny_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/any &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_near

@brief returns all documents of a collection near a given location
<br />
@RESTHEADER{PUT /_api/simple/near, Returns documents near a coordinate}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to query.
<br />
@RESTBODYPARAM{latitude,string,required,string}
The latitude of the coordinate.
<br />
@RESTBODYPARAM{longitude,string,required,string}
The longitude of the coordinate.
<br />
@RESTBODYPARAM{distance,string,required,string}
If given, the attribute key used to return the distance to
the given coordinate. (optional). If specified, distances are returned in meters.
<br />
@RESTBODYPARAM{skip,string,required,string}
The number of documents to skip in the query. (optional)
<br />
@RESTBODYPARAM{limit,string,required,string}
The maximal amount of documents to return. The *skip* is
applied before the *limit* restriction. The default is 100. (optional)
<br />
@RESTBODYPARAM{geo,string,required,string}
If given, the identifier of the geo-index to use. (optional)
<br />
@RESTDESCRIPTION
<br />
The default will find at most 100 documents near the given coordinate.  The
returned array is sorted according to the distance, with the nearest document
being first in the return array. If there are near documents of equal distance, documents
are chosen randomly from this set until the limit is reached.
<br />
In order to use the *near* operator, a geo index must be defined for the
collection. This index also defines which attribute holds the coordinates
for the document.  If you have more than one geo-spatial index, you can use
the *geo* field to select a particular index.
<br />
<br />
Returns a cursor containing the result, see [Http Cursor](../HttpAqlQueryCursor/README.md) for details.
<br />
Note: the *near* simple query is **deprecated** as of ArangoDB 2.6. 
This API may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection using the near operator is
to issue an [AQL query](../Aql/GeoFunctions.md) using the *NEAR* function as follows: 
<br />
<br />
    FOR doc IN NEAR(@@collection, @latitude, @longitude, @limit)
      RETURN doc`
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Without distance
<br />

<div id="RestSimpleNear_container">
<div id="RestSimpleNear_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/824133761"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"824133761"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"824133761"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/823740545"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"823740545"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"823740545"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        -<span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ] 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleNear_short" onclick="$('#RestSimpleNear_short').hide(); $('#RestSimpleNear_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
With distance
<br />

<div id="RestSimpleNearDistance_container">
<div id="RestSimpleNearDistance_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"distance"</span> : <span class="hljs-string">"distance"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/826755201"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"826755201"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"826755201"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        -<span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">222.38985328911744</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/827148417"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"827148417"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"827148417"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">222.38985328911744</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/826558593"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"826558593"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"826558593"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-0.004/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        -<span class="hljs-number">0.004</span>, 
        <span class="hljs-number">0</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">444.779706578235</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleNearDistance_short" onclick="$('#RestSimpleNearDistance_short').hide(); $('#RestSimpleNearDistance_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"distance"</span> : <span class="hljs-string">"distance"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_within

@brief returns all documents of a collection within a given radius
<br />
@RESTHEADER{PUT /_api/simple/within, Find documents within a radius around a coordinate}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to query.
<br />
@RESTBODYPARAM{latitude,string,required,string}
The latitude of the coordinate.
<br />
@RESTBODYPARAM{longitude,string,required,string}
The longitude of the coordinate.
<br />
@RESTBODYPARAM{radius,string,required,string}
The maximal radius (in meters).
<br />
@RESTBODYPARAM{distance,string,required,string}
If given, the attribute key used to return the distance to
the given coordinate. (optional). If specified, distances are returned in meters.
<br />
@RESTBODYPARAM{skip,string,required,string}
The number of documents to skip in the query. (optional)
<br />
@RESTBODYPARAM{limit,string,required,string}
The maximal amount of documents to return. The *skip* is
applied before the *limit* restriction. The default is 100. (optional)
<br />
@RESTBODYPARAM{geo,string,required,string}
If given, the identifier of the geo-index to use. (optional)
<br />
@RESTDESCRIPTION
<br />
This will find all documents within a given radius around the coordinate
(*latitude*, *longitude*). The returned list is sorted by distance.
<br />
In order to use the *within* operator, a geo index must be defined for
the collection. This index also defines which attribute holds the
coordinates for the document.  If you have more than one geo-spatial index,
you can use the *geo* field to select a particular index.
<br />
<br />
Returns a cursor containing the result, see [Http Cursor](../HttpAqlQueryCursor/README.md) for details.
<br />
Note: the *within* simple query is **deprecated** as of ArangoDB 2.6. 
This API may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection using the near operator is
to issue an [AQL query](../Aql/GeoFunctions.md) using the *WITHIN* function as follows: 
<br />
<br />
    FOR doc IN WITHIN(@@collection, @latitude, @longitude, @radius, @distanceAttributeName)
      RETURN doc
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Without distance
<br />

<div id="RestSimpleWithin_container">
<div id="RestSimpleWithin_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"radius"</span> : <span class="hljs-number">500</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/851462273"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"851462273"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"851462273"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/851069057"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"851069057"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"851069057"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        -<span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ] 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleWithin_short" onclick="$('#RestSimpleWithin_short').hide(); $('#RestSimpleWithin_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"radius"</span> : <span class="hljs-number">500</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
With distance
<br />

<div id="RestSimpleWithinDistance_container">
<div id="RestSimpleWithinDistance_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"distance"</span> : <span class="hljs-string">"distance"</span>, 
  <span class="hljs-string">"radius"</span> : <span class="hljs-number">300</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/854083713"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"854083713"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"854083713"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        -<span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">222.38985328911744</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/854476929"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"854476929"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"854476929"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0.002/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">0.002</span>, 
        <span class="hljs-number">0</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">222.38985328911744</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/853887105"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"853887105"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"853887105"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-0.004/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        -<span class="hljs-number">0.004</span>, 
        <span class="hljs-number">0</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">444.779706578235</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleWithinDistance_short" onclick="$('#RestSimpleWithinDistance_short').hide(); $('#RestSimpleWithinDistance_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/near &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"distance"</span> : <span class="hljs-string">"distance"</span>, 
  <span class="hljs-string">"radius"</span> : <span class="hljs-number">300</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_within_rectangle

@brief returns all documents of a collection within a rectangle
<br />
@RESTHEADER{PUT /_api/simple/within-rectangle, Within rectangle query}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to query.
<br />
@RESTBODYPARAM{latitude1,string,required,string}
The latitude of the first rectangle coordinate.
<br />
@RESTBODYPARAM{longitude1,string,required,string}
The longitude of the first rectangle coordinate.
<br />
@RESTBODYPARAM{latitude2,string,required,string}
The latitude of the second rectangle coordinate.
<br />
@RESTBODYPARAM{longitude2,string,required,string}
The longitude of the second rectangle coordinate.
<br />
@RESTBODYPARAM{skip,string,required,string}
The number of documents to skip in the query. (optional)
<br />
@RESTBODYPARAM{limit,string,required,string}
The maximal amount of documents to return. The *skip* is
applied before the *limit* restriction. The default is 100. (optional)
<br />
@RESTBODYPARAM{geo,string,required,string}
If given, the identifier of the geo-index to use. (optional)
<br />
@RESTDESCRIPTION
<br />
This will find all documents within the specified rectangle (determined by
the given coordinates (*latitude1*, *longitude1*, *latitude2*, *longitude2*). 
<br />
In order to use the *within-rectangle* query, a geo index must be defined for
the collection. This index also defines which attribute holds the
coordinates for the document.  If you have more than one geo-spatial index,
you can use the *geo* field to select a particular index.
<br />
Returns a cursor containing the result, see [Http Cursor](../HttpAqlQueryCursor/README.md) for details.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />

<div id="RestSimpleWithinRectangle_container">
<div id="RestSimpleWithinRectangle_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/within-rectangle &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude1"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude1"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"latitude2"</span> : <span class="hljs-number">0.2</span>, 
  <span class="hljs-string">"longitude2"</span> : <span class="hljs-number">0.2</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/858081409"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"858081409"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"858081409"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0.008/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">0.008</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/857884801"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"857884801"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"857884801"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0.006/"</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">0.006</span>, 
        <span class="hljs-number">0</span> 
      ] 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleWithinRectangle_short" onclick="$('#RestSimpleWithinRectangle_short').hide(); $('#RestSimpleWithinRectangle_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/within-rectangle &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"latitude1"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"longitude1"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"latitude2"</span> : <span class="hljs-number">0.2</span>, 
  <span class="hljs-string">"longitude2"</span> : <span class="hljs-number">0.2</span>, 
  <span class="hljs-string">"skip"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_fulltext

@brief returns documents of a collection as a result of a fulltext query
<br />
@RESTHEADER{PUT /_api/simple/fulltext, Fulltext index query}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to query.
<br />
@RESTBODYPARAM{attribute,string,required,string}
The attribute that contains the texts.
<br />
@RESTBODYPARAM{query,string,required,string}
The fulltext query. Please refer to [Fulltext queries](../SimpleQueries/FulltextQueries.md)
  for details.
<br />
@RESTBODYPARAM{skip,string,required,string}
The number of documents to skip in the query (optional).
<br />
@RESTBODYPARAM{limit,string,required,string}
The maximal amount of documents to return. The *skip*
is applied before the *limit* restriction. (optional)
<br />
@RESTBODYPARAM{index,string,required,string}
The identifier of the fulltext-index to use.
<br />
@RESTDESCRIPTION
<br />
This will find all documents from the collection that match the fulltext
query specified in *query*.
<br />
In order to use the *fulltext* operator, a fulltext index must be defined
for the collection and the specified attribute.
<br />
Returns a cursor containing the result, see [Http Cursor](../HttpAqlQueryCursor/README.md) for details.
<br />
Note: the *fulltext* simple query is **deprecated** as of ArangoDB 2.6. 
This API may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection using the near operator is
to issue an AQL query using the *FULLTEXT* [AQL function](../Aql/FulltextFunctions.md) 
as follows:
<br />
<br />
    FOR doc IN FULLTEXT(@@collection, @attributeName, @queryString, @limit) 
      RETURN doc
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />

<div id="RestSimpleFulltext_container">
<div id="RestSimpleFulltext_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/fulltext &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"attribute"</span> : <span class="hljs-string">"text"</span>, 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"word"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/813516929"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"813516929"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"813516929"</span>, 
      <span class="hljs-string">"text"</span> : <span class="hljs-string">"this text also has a word"</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/813320321"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"813320321"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"813320321"</span>, 
      <span class="hljs-string">"text"</span> : <span class="hljs-string">"this text contains word"</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleFulltext_short" onclick="$('#RestSimpleFulltext_short').hide(); $('#RestSimpleFulltext_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/fulltext &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"attribute"</span> : <span class="hljs-string">"text"</span>, 
  <span class="hljs-string">"query"</span> : <span class="hljs-string">"word"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_by_example

@brief returns all documents of a collection matching a given example
<br />
@RESTHEADER{PUT /_api/simple/by-example, Simple query by-example}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to query.
<br />
@RESTBODYPARAM{example,string,required,string}
The example document.
<br />
@RESTBODYPARAM{skip,string,required,string}
The number of documents to skip in the query (optional).
<br />
@RESTBODYPARAM{limit,string,required,string}
The maximal amount of documents to return. The *skip*
is applied before the *limit* restriction. (optional)
<br />
@RESTDESCRIPTION
<br />
This will find all documents matching a given example.
<br />
Returns a cursor containing the result, see [Http Cursor](../HttpAqlQueryCursor/README.md) for details.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Matching an attribute
<br />

<div id="RestSimpleByExample_container">
<div id="RestSimpleByExample_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/800606337"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"800606337"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"800606337"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"k"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/801392769"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"801392769"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"801392769"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"k"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">2</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/801196161"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"801196161"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"801196161"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/800934017"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"800934017"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"800934017"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
      } 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">4</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleByExample_short" onclick="$('#RestSimpleByExample_short').hide(); $('#RestSimpleByExample_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Matching an attribute which is a sub-document
<br />

<div id="RestSimpleByExample2_container">
<div id="RestSimpleByExample2_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a.j"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/802900097"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"802900097"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"802900097"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/802572417"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"802572417"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"802572417"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"k"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
      } 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleByExample2_short" onclick="$('#RestSimpleByExample2_short').hide(); $('#RestSimpleByExample2_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a.j"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Matching an attribute within a sub-document
<br />

<div id="RestSimpleByExample3_container">
<div id="RestSimpleByExample3_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/804866177"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"804866177"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"804866177"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
      } 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleByExample3_short" onclick="$('#RestSimpleByExample3_short').hide(); $('#RestSimpleByExample3_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_first_example

@brief returns one document of a collection matching a given example
<br />
@RESTHEADER{PUT /_api/simple/first-example, Find documents matching an example}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to query.
<br />
@RESTBODYPARAM{example,string,required,string}
The example document.
<br />
@RESTDESCRIPTION
<br />
This will return the first document matching a given example.
<br />
Returns a result containing the document or *HTTP 404* if no
document matched the example.
<br />
If more than one document in the collection matches the specified example, only
one of these documents will be returned, and it is undefined which of the matching
documents is returned.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned when the query was successfully executed.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
If a matching document was found
<br />

<div id="RestSimpleFirstExample_container">
<div id="RestSimpleFirstExample_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"document"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/808732801"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"808732801"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"808732801"</span>, 
    <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleFirstExample_short" onclick="$('#RestSimpleFirstExample_short').hide(); $('#RestSimpleFirstExample_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
If no document was found
<br />

<div id="RestSimpleFirstExampleNotFound_container">
<div id="RestSimpleFirstExampleNotFound_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"l"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"no match"</span> 
}
</pre>
</div>
<div id="RestSimpleFirstExampleNotFound_short" onclick="$('#RestSimpleFirstExampleNotFound_short').hide(); $('#RestSimpleFirstExampleNotFound_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"l"</span> : <span class="hljs-number">1</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_first

@brief returns the first document(s) of a collection
<br />
@RESTHEADER{PUT /_api/simple/first, First document of a collection}
<br />
@RESTBODYPARAM{collection,string,required,string}
the name of the collection
<br />
@RESTBODYPARAM{count,string,optional,string}
the number of documents to return at most. Specifying count is
optional. If it is not specified, it defaults to 1.
<br />
@RESTDESCRIPTION
<br />
This will return the first document(s) from the collection, in the order of
insertion/update time. When the *count* argument is supplied, the result
will be an array of documents, with the "oldest" document being first in the
result array.
If the *count* argument is not supplied, the result is the "oldest" document
of the collection, or *null* if the collection is empty.
<br />
Note: this method is not supported for sharded collections with more than
one shard.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned when the query was successfully executed.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Retrieving the first n documents
<br />

<div id="RestSimpleFirst_container">
<div id="RestSimpleFirst_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/806504577"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"806504577"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"806504577"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"k"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/806832257"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"806832257"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"806832257"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
      } 
    } 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleFirst_short" onclick="$('#RestSimpleFirst_short').hide(); $('#RestSimpleFirst_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Retrieving the first document
<br />

<div id="RestSimpleFirstSingle_container">
<div id="RestSimpleFirstSingle_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/811944065"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"811944065"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"811944065"</span>, 
    <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"k"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleFirstSingle_short" onclick="$('#RestSimpleFirstSingle_short').hide(); $('#RestSimpleFirstSingle_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/first &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_last

@brief returns the last document(s) of a collection
<br />
@RESTHEADER{PUT /_api/simple/last, Last document of a collection}
<br />
@RESTBODYPARAM{collection,string,required,string}
 the name of the collection
<br />
@RESTBODYPARAM{count,integer,required,int64}
the number of documents to return at most. Specifying count is
optional. If it is not specified, it defaults to 1.
<br />
@RESTDESCRIPTION
<br />
This will return the last documents from the collection, in the order of
insertion/update time. When the *count* argument is supplied, the result
will be an array of documents, with the "latest" document being first in the
result array.
<br />
If the *count* argument is not supplied, the result is the "latest" document
of the collection, or *null* if the collection is empty.
<br />
Note: this method is not supported for sharded collections with more than
one shard.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned when the query was successfully executed.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
Retrieving the last n documents
<br />

<div id="RestSimpleLast_container">
<div id="RestSimpleLast_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/last &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/815679617"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"815679617"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"815679617"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"a"</span> : { 
        <span class="hljs-string">"k"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"j"</span> : <span class="hljs-number">2</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/815483009"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"815483009"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"815483009"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span> 
    } 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleLast_short" onclick="$('#RestSimpleLast_short').hide(); $('#RestSimpleLast_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/last &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Retrieving the first document
<br />

<div id="RestSimpleLastSingle_container">
<div id="RestSimpleLastSingle_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/last &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/817318017"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"817318017"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"817318017"</span>, 
    <span class="hljs-string">"i"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"k"</span> : <span class="hljs-number">2</span>, 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">2</span> 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleLastSingle_short" onclick="$('#RestSimpleLastSingle_short').hide(); $('#RestSimpleLastSingle_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/last &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_range

@brief returns all documents of a collection within a range
<br />
@RESTHEADER{PUT /_api/simple/range, Simple range query}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to query.
<br />
@RESTBODYPARAM{attribute,string,required,string}
The attribute path to check.
<br />
@RESTBODYPARAM{left,string,required,string}
The lower bound.
<br />
@RESTBODYPARAM{right,string,required,string}
The upper bound.
<br />
@RESTBODYPARAM{closed,boolean,required,}
If *true*, use interval including *left* and *right*,
otherwise exclude *right*, but include *left*.
<br />
@RESTBODYPARAM{skip,string,required,string}
The number of documents to skip in the query (optional).
<br />
@RESTBODYPARAM{limit,integer,optional,int64}
The maximal amount of documents to return. The *skip*
is applied before the *limit* restriction. (optional)
<br />
@RESTDESCRIPTION
<br />
This will find all documents within a given range. In order to execute a
range query, a skip-list index on the queried attribute must be present.
<br />
Returns a cursor containing the result, see [Http Cursor](../HttpAqlQueryCursor/README.md) for details.
<br />
Note: the *range* simple query is **deprecated** as of ArangoDB 2.6. 
The function may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection within a specific range
is to use an AQL query as follows: 
<br />
<br />
    FOR doc IN @@collection 
      FILTER doc.value >= @left && doc.value < @right 
      LIMIT @skip, @limit 
      RETURN doc`
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown or no
suitable index for the range query is present.  The response body contains 
an error document in this case.
<br />
@EXAMPLES
<br />

<div id="RestSimpleRange_container">
<div id="RestSimpleRange_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/range &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"attribute"</span> : <span class="hljs-string">"i"</span>, 
  <span class="hljs-string">"left"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"right"</span> : <span class="hljs-number">4</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/829048961"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"829048961"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"829048961"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"products/829245569"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"829245569"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"829245569"</span>, 
      <span class="hljs-string">"i"</span> : <span class="hljs-number">3</span> 
    } 
  ], 
  <span class="hljs-string">"hasMore"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestSimpleRange_short" onclick="$('#RestSimpleRange_short').hide(); $('#RestSimpleRange_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/range &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"attribute"</span> : <span class="hljs-string">"i"</span>, 
  <span class="hljs-string">"left"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"right"</span> : <span class="hljs-number">4</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_remove_by_example

@brief removes all documents of a collection that match an example
<br />
@RESTHEADER{PUT /_api/simple/remove-by-example, Remove documents by example}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to remove from.
<br />
@RESTBODYPARAM{example,string,required,string}
An example document that all collection documents are compared against.
<br />
@RESTBODYPARAM{options,object,optional,put_api_simple_remove_by_example_opts}
a json object which can contains following attributes:
<br />
@RESTSTRUCT{waitForSync,put_api_simple_remove_by_example_opts,string,optional,string}
if set to true, then all removal operations will
instantly be synchronized to disk. If this is not specified, then the
collection's default sync behavior will be applied.
<br />
@RESTSTRUCT{limit,put_api_simple_remove_by_example_opts,string,required,string}
an optional value that determines how many documents to
delete at most. If *limit* is specified but is less than the number
of documents in the collection, it is undefined which of the documents
will be deleted.
<br />
@RESTDESCRIPTION
<br />
This will find all documents in the collection that match the specified
example object.
<br />
Note: the *limit* attribute is not supported on sharded collections.
Using it will result in an error.
<br />
Returns the number of documents that were deleted.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />

<div id="RestSimpleRemoveByExample_container">
<div id="RestSimpleRemoveByExample_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"deleted"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleRemoveByExample_short" onclick="$('#RestSimpleRemoveByExample_short').hide(); $('#RestSimpleRemoveByExample_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using Parameter: waitForSync and limit
<br />

<div id="RestSimpleRemoveByExample_1_container">
<div id="RestSimpleRemoveByExample_1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"deleted"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleRemoveByExample_1_short" onclick="$('#RestSimpleRemoveByExample_1_short').hide(); $('#RestSimpleRemoveByExample_1_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using Parameter: waitForSync and limit with new signature
<br />

<div id="RestSimpleRemoveByExample_2_container">
<div id="RestSimpleRemoveByExample_2_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"deleted"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleRemoveByExample_2_short" onclick="$('#RestSimpleRemoveByExample_2_short').hide(); $('#RestSimpleRemoveByExample_2_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/remove-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"limit"</span> : <span class="hljs-number">2</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_replace_by_example

@brief replaces the body of all documents of a collection that match an
example
<br />
@RESTHEADER{PUT /_api/simple/replace-by-example, Replace documents by example}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to replace within.
<br />
@RESTBODYPARAM{example,string,required,string}
An example document that all collection documents are compared against.
<br />
@RESTBODYPARAM{newValue,string,required,string}
The replacement document that will get inserted in place
of the "old" documents.
<br />
@RESTBODYPARAM{options,object,optional,put_api_simple_replace_by_example_options}
a json object which can contain following attributes
<br />
@RESTSTRUCT{waitForSync,put_api_simple_replace_by_example_options,boolean,optional,}
if set to true, then all removal operations will
 instantly be synchronized to disk. If this is not specified, then the
 collection's default sync behavior will be applied.
<br />
@RESTSTRUCT{limit,put_api_simple_replace_by_example_options,string,optional,string}
an optional value that determines how many documents to
replace at most. If *limit* is specified but is less than the number
of documents in the collection, it is undefined which of the documents
will be replaced.
<br />
<br />
@RESTDESCRIPTION
<br />
This will find all documents in the collection that match the specified
example object, and replace the entire document body with the new value
specified. Note that document meta-attributes such as *_id*, *_key*,
*_from*, *_to* etc. cannot be replaced.
<br />
Note: the *limit* attribute is not supported on sharded collections.
Using it will result in an error.
<br />
Returns the number of documents that were replaced.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the query was executed successfully.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />

<div id="RestSimpleReplaceByExample_container">
<div id="RestSimpleReplaceByExample_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/replace-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span> 
  }, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"replaced"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleReplaceByExample_short" onclick="$('#RestSimpleReplaceByExample_short').hide(); $('#RestSimpleReplaceByExample_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/replace-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span> 
  }, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using new Signature for attributes WaitForSync and limit
<br />

<div id="RestSimpleReplaceByExampleWaitForSync_container">
<div id="RestSimpleReplaceByExampleWaitForSync_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/replace-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span> 
  }, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"replaced"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleReplaceByExampleWaitForSync_short" onclick="$('#RestSimpleReplaceByExampleWaitForSync_short').hide(); $('#RestSimpleReplaceByExampleWaitForSync_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/replace-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span> 
  }, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-simple.js -->
@startDocuBlock JSA_put_api_simple_update_by_example

@brief partially updates the body of all documents of a collection that
match an example
<br />
@RESTHEADER{PUT /_api/simple/update-by-example, Update documents by example}
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the collection to update within.
<br />
@RESTBODYPARAM{example,string,required,string}
An example document that all collection documents are compared against.
<br />
@RESTBODYPARAM{newValue,object,required,}
A document containing all the attributes to update in the found documents.
<br />
@RESTBODYPARAM{options,object,optional,put_api_simple_update_by_example_options}
a json object which can contains following attributes:
<br />
@RESTSTRUCT{keepNull,put_api_simple_update_by_example_options,string,optional,string}
This parameter can be used to modify the behavior when
handling *null* values. Normally, *null* values are stored in the
database. By setting the *keepNull* parameter to *false*, this
behavior can be changed so that all attributes in *data* with *null*
values will be removed from the updated document.
<br />
@RESTSTRUCT{waitForSync,put_api_simple_update_by_example_options,boolean,optional,}
if set to true, then all removal operations will
instantly be synchronized to disk. If this is not specified, then the
collection's default sync behavior will be applied.
<br />
@RESTSTRUCT{limit,put_api_simple_update_by_example_options,integer,optional,int64}
an optional value that determines how many documents to
update at most. If *limit* is specified but is less than the number
of documents in the collection, it is undefined which of the documents
will be updated.
<br />
@RESTSTRUCT{mergeObjectsc,put_api_simple_update_by_example_options,boolean,optional,}
Controls whether objects (not arrays) will be merged if present in both the
existing and the patch document. If set to false, the value in the
patch document will overwrite the existing document's value. If set to
true, objects will be merged. The default is true.
<br />
@RESTDESCRIPTION
<br />
This will find all documents in the collection that match the specified
example object, and partially update the document body with the new value
specified. Note that document meta-attributes such as *_id*, *_key*,
*_from*, *_to* etc. cannot be replaced.
<br />
Note: the *limit* attribute is not supported on sharded collections.
Using it will result in an error.
<br />
Returns the number of documents that were updated.
<br />
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned if the collection was updated successfully and *waitForSync* was
*true*.
<br />
@RESTRETURNCODE{400}
is returned if the body does not contain a valid JSON representation of a
query. The response body contains an error document in this case.
<br />
@RESTRETURNCODE{404}
is returned if the collection specified by *collection* is unknown.  The
response body contains an error document in this case.
<br />
@EXAMPLES
<br />
using old syntax for options
<br />

<div id="RestSimpleUpdateByExample_container">
<div id="RestSimpleUpdateByExample_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/update-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">22</span> 
    } 
  }, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleUpdateByExample_short" onclick="$('#RestSimpleUpdateByExample_short').hide(); $('#RestSimpleUpdateByExample_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/update-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">22</span> 
    } 
  }, 
  <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
using new signature for options
<br />

<div id="RestSimpleUpdateByExample_1_container">
<div id="RestSimpleUpdateByExample_1_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/update-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">22</span> 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"updated"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestSimpleUpdateByExample_1_short" onclick="$('#RestSimpleUpdateByExample_1_short').hide(); $('#RestSimpleUpdateByExample_1_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/simple/update-by-example &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"example"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">1</span> 
    } 
  }, 
  <span class="hljs-string">"newValue"</span> : { 
    <span class="hljs-string">"a"</span> : { 
      <span class="hljs-string">"j"</span> : <span class="hljs-number">22</span> 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"limit"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_get_api_index

@brief returns all indexes of a collection
<br />
@RESTHEADER{GET /_api/index, Read all indexes of a collection}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
@RESTDESCRIPTION
<br />
Returns an object with an attribute *indexes* containing an array of all
index descriptions for the given collection. The same information is also
available in the *identifiers* as an object with the index handles as
keys.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
returns a json object containing a list of indexes on that collection.
<br />
@EXAMPLES
<br />
Return information about all indexes
<br />

<div id="RestIndexAllIndexes_container">
<div id="RestIndexAllIndexes_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/index?collection=products

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"indexes"</span> : [ 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/0"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
      <span class="hljs-string">"fields"</span> : [ 
        <span class="hljs-string">"_key"</span> 
      ], 
      <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/778127489"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
      <span class="hljs-string">"fields"</span> : [ 
        <span class="hljs-string">"name"</span> 
      ], 
      <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/778389633"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
      <span class="hljs-string">"fields"</span> : [ 
        <span class="hljs-string">"price"</span> 
      ], 
      <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span> 
    } 
  ], 
  <span class="hljs-string">"identifiers"</span> : { 
    <span class="hljs-string">"products/0"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/0"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
      <span class="hljs-string">"fields"</span> : [ 
        <span class="hljs-string">"_key"</span> 
      ], 
      <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
    }, 
    <span class="hljs-string">"products/778127489"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/778127489"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
      <span class="hljs-string">"fields"</span> : [ 
        <span class="hljs-string">"name"</span> 
      ], 
      <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
    }, 
    <span class="hljs-string">"products/778389633"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/778389633"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
      <span class="hljs-string">"fields"</span> : [ 
        <span class="hljs-string">"price"</span> 
      ], 
      <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span> 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestIndexAllIndexes_short" onclick="$('#RestIndexAllIndexes_short').hide(); $('#RestIndexAllIndexes_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/index?collection=products

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_get_api_reads_index

@brief returns an index
<br />
@RESTHEADER{GET /_api/index/{index-handle},Read index}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{index-handle,string,required}
The index-handle.
<br />
@RESTDESCRIPTION
<br />
The result is an object describing the index. It has at least the following
attributes:
<br />
- *id*: the identifier of the index
<br />
- *type*: the index type
<br />
All other attributes are type-dependent. For example, some indexes provide
*unique* or *sparse* flags, whereas others don't. Some indexes also provide 
a selectivity estimate in the *selectivityEstimate* attribute of the result.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index exists, then a *HTTP 200* is returned.
<br />
@RESTRETURNCODE{404}
If the index does not exist, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />

<div id="RestIndexPrimaryIndex_container">
<div id="RestIndexPrimaryIndex_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/index/products/0

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/0"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"_key"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestIndexPrimaryIndex_short" onclick="$('#RestIndexPrimaryIndex_short').hide(); $('#RestIndexPrimaryIndex_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/index/products/0

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_post_api_index_cap

@brief creates a cap constraint
<br />
@RESTHEADER{POST /_api/index#CapConstraints, Create cap constraint}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
@RESTBODYPARAM{type,string,required,string}
must be equal to *"cap"*.
<br />
@RESTBODYPARAM{size,integer,optional,int64}
The maximal number of documents for the collection. If specified,
the value must be greater than zero.
<br />
@RESTBODYPARAM{byteSize,integer,optional,int64}
The maximal size of the active document data in the collection
(in bytes). If specified, the value must be at least 16384.
<br />
<br />
@RESTDESCRIPTION
**NOTE** Swagger examples won't work due to the anchor.
<br />
<br />
<br />
Creates a cap constraint for the collection *collection-name*,
if it does not already exist. Expects an object containing the index details.
<br />
**Note**: The cap constraint does not index particular attributes of the
documents in a collection, but limits the number of documents in the
collection to a maximum value. The cap constraint thus does not support
attribute names specified in the *fields* attribute nor uniqueness of
any kind via the *unique* attribute.
<br />
It is allowed to specify either *size* or *byteSize*, or both at
the same time. If both are specified, then the automatic document removal
will be triggered by the first non-met constraint.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index already exists, then an *HTTP 200* is returned.
<br />
@RESTRETURNCODE{201}
If the index does not already exist and could be created, then an *HTTP 201*
is returned.
<br />
@RESTRETURNCODE{400}
If either *size* or *byteSize* contain invalid values, then an *HTTP 400*
is returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
Creating a cap constraint
<br />

<div id="RestIndexCreateNewCapConstraint_container">
<div id="RestIndexCreateNewCapConstraint_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"cap"</span>, 
  <span class="hljs-string">"size"</span> : <span class="hljs-number">10</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/779831425"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"cap"</span>, 
  <span class="hljs-string">"size"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"byteSize"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateNewCapConstraint_short" onclick="$('#RestIndexCreateNewCapConstraint_short').hide(); $('#RestIndexCreateNewCapConstraint_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"cap"</span>, 
  <span class="hljs-string">"size"</span> : <span class="hljs-number">10</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_post_api_index_geo

@brief creates a geo index
<br />
@RESTHEADER{POST /_api/index#geo, Create geo-spatial index}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
<br />
@RESTBODYPARAM{type,string,required,string}
must be equal to *"geo"*.
<br />
@RESTBODYPARAM{fields,array,required,string}
An array with one or two attribute paths.
<br />
If it is an array with one attribute path *location*, then a geo-spatial
index on all documents is created using *location* as path to the
coordinates. The value of the attribute must be an array with at least two
double values. The array must contain the latitude (first value) and the
longitude (second value). All documents, which do not have the attribute
path or with value that are not suitable, are ignored.
<br />
If it is an array with two attribute paths *latitude* and *longitude*,
then a geo-spatial index on all documents is created using *latitude*
and *longitude* as paths the latitude and the longitude. The value of
the attribute *latitude* and of the attribute *longitude* must a
double. All documents, which do not have the attribute paths or which
values are not suitable, are ignored.
<br />
@RESTBODYPARAM{geoJson,string,required,string}
If a geo-spatial index on a *location* is constructed
and *geoJson* is *true*, then the order within the array is longitude
followed by latitude. This corresponds to the format described in
http://geojson.org/geojson-spec.html#positions
<br />
@RESTDESCRIPTION
**NOTE** Swagger examples won't work due to the anchor.
<br />
<br />
Creates a geo-spatial index in the collection *collection-name*, if
it does not already exist. Expects an object containing the index details.
<br />
Geo indexes are always sparse, meaning that documents that do not contain
the index attributes or have non-numeric values in the index attributes
will not be indexed.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index already exists, then a *HTTP 200* is returned.
<br />
@RESTRETURNCODE{201}
If the index does not already exist and could be created, then a *HTTP 201*
is returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
Creating a geo index with a location attribute
<br />

<div id="RestIndexCreateGeoLocation_container">
<div id="RestIndexCreateGeoLocation_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/779438209"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo1"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"geoJson"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateGeoLocation_short" onclick="$('#RestIndexCreateGeoLocation_short').hide(); $('#RestIndexCreateGeoLocation_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Creating a geo index with latitude and longitude attributes
<br />

<div id="RestIndexCreateGeoLatitudeLongitude_container">
<div id="RestIndexCreateGeoLatitudeLongitude_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"e"</span>, 
    <span class="hljs-string">"f"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/778979457"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo2"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"e"</span>, 
    <span class="hljs-string">"f"</span> 
  ], 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateGeoLatitudeLongitude_short" onclick="$('#RestIndexCreateGeoLatitudeLongitude_short').hide(); $('#RestIndexCreateGeoLatitudeLongitude_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"e"</span>, 
    <span class="hljs-string">"f"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_post_api_index_hash

@brief creates a hash index
<br />
@RESTHEADER{POST /_api/index#hash, Create hash index}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection-name,string,required}
The collection name.
<br />
@RESTBODYPARAM{type,string,required,string}
must be equal to *"hash"*.
<br />
@RESTBODYPARAM{fields,array,required,string}
an array of attribute paths.
<br />
@RESTBODYPARAM{unique,boolean,required,}
if *true*, then create a unique index.
<br />
@RESTBODYPARAM{sparse,boolean,required,}
if *true*, then create a sparse index.
<br />
@RESTDESCRIPTION
**NOTE** Swagger examples won't work due to the anchor.
<br />
<br />
Creates a hash index for the collection *collection-name* if it
does not already exist. The call expects an object containing the index
details.
<br />
In a sparse index all documents will be excluded from the index that do not 
contain at least one of the specified index attributes (i.e. *fields*) or that 
have a value of *null* in any of the specified index attributes. Such documents 
will not be indexed, and not be taken into account for uniqueness checks if
the *unique* flag is set.
<br />
In a non-sparse index, these documents will be indexed (for non-present
indexed attributes, a value of *null* will be used) and will be taken into
account for uniqueness checks if the *unique* flag is set.
<br />
**Note**: unique indexes on non-shard keys are not supported in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index already exists, then a *HTTP 200* is returned.
<br />
@RESTRETURNCODE{201}
If the index does not already exist and could be created, then a *HTTP 201*
is returned.
<br />
@RESTRETURNCODE{400}
If the collection already contains documents and you try to create a unique
hash index in such a way that there are documents violating the uniqueness,
then a *HTTP 400* is returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
Creating an unique constraint
<br />

<div id="RestIndexCreateNewUniqueConstraint_container">
<div id="RestIndexCreateNewUniqueConstraint_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/781928577"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateNewUniqueConstraint_short" onclick="$('#RestIndexCreateNewUniqueConstraint_short').hide(); $('#RestIndexCreateNewUniqueConstraint_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Creating a non-unique hash index
<br />

<div id="RestIndexCreateNewHashIndex_container">
<div id="RestIndexCreateNewHashIndex_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/780880001"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateNewHashIndex_short" onclick="$('#RestIndexCreateNewHashIndex_short').hide(); $('#RestIndexCreateNewHashIndex_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Creating a sparse index
<br />

<div id="RestIndexCreateSparseHashIndex_container">
<div id="RestIndexCreateSparseHashIndex_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/782387329"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateSparseHashIndex_short" onclick="$('#RestIndexCreateSparseHashIndex_short').hide(); $('#RestIndexCreateSparseHashIndex_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_post_api_index_skiplist

@brief creates a skip-list
<br />
@RESTHEADER{POST /_api/index, Create skip list}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection-name,string,required}
The collection name.
<br />
<br />
@RESTBODYPARAM{type,string,required,string}
must be equal to *"skiplist"*.
<br />
@RESTBODYPARAM{fields,array,required,string}
an array of attribute paths.
<br />
@RESTBODYPARAM{unique,boolean,required,}
if *true*, then create a unique index.
<br />
@RESTBODYPARAM{sparse,boolean,required,}
if *true*, then create a sparse index.
<br />
@RESTDESCRIPTION
<br />
Creates a skip-list index for the collection *collection-name*, if
it does not already exist. The call expects an object containing the index
details.
<br />
In a sparse index all documents will be excluded from the index that do not 
contain at least one of the specified index attributes (i.e. *fields*) or that 
have a value of *null* in any of the specified index attributes. Such documents 
will not be indexed, and not be taken into account for uniqueness checks if
the *unique* flag is set.
<br />
In a non-sparse index, these documents will be indexed (for non-present
indexed attributes, a value of *null* will be used) and will be taken into
account for uniqueness checks if the *unique* flag is set.
<br />
**Note**: unique indexes on non-shard keys are not supported in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index already exists, then a *HTTP 200* is
returned.
<br />
@RESTRETURNCODE{201}
If the index does not already exist and could be created, then a *HTTP 201*
is returned.
<br />
@RESTRETURNCODE{400}
If the collection already contains documents and you try to create a unique
skip-list index in such a way that there are documents violating the
uniqueness, then a *HTTP 400* is returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
Creating a skiplist index
<br />

<div id="RestIndexCreateNewSkiplist_container">
<div id="RestIndexCreateNewSkiplist_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/781404289"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateNewSkiplist_short" onclick="$('#RestIndexCreateNewSkiplist_short').hide(); $('#RestIndexCreateNewSkiplist_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Creating a sparse skiplist index
<br />

<div id="RestIndexCreateSparseSkiplist_container">
<div id="RestIndexCreateSparseSkiplist_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/782846081"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateSparseSkiplist_short" onclick="$('#RestIndexCreateSparseSkiplist_short').hide(); $('#RestIndexCreateSparseSkiplist_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_post_api_index_fulltext

@brief creates a fulltext index
<br />
@RESTHEADER{POST /_api/index#fulltext, Create fulltext index}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection-name,string,required}
The collection name.
<br />
@RESTBODYPARAM{type,string,required,string}
must be equal to *"fulltext"*.
<br />
@RESTBODYPARAM{fields,array,required,string}
an array of attribute names. Currently, the array is limited
to exactly one attribute.
<br />
@RESTBODYPARAM{minLength,integer,required,int64}
Minimum character length of words to index. Will default
to a server-defined value if unspecified. It is thus recommended to set
this value explicitly when creating the index.
<br />
@RESTDESCRIPTION
**NOTE** Swagger examples won't work due to the anchor.
<br />
<br />
Creates a fulltext index for the collection *collection-name*, if
it does not already exist. The call expects an object containing the index
details.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index already exists, then a *HTTP 200* is
returned.
<br />
@RESTRETURNCODE{201}
If the index does not already exist and could be created, then a *HTTP 201*
is returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
Creating a fulltext index
<br />

<div id="RestIndexCreateNewFulltext_container">
<div id="RestIndexCreateNewFulltext_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"fulltext"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"text"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/780290177"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"fulltext"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"text"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"minLength"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="RestIndexCreateNewFulltext_short" onclick="$('#RestIndexCreateNewFulltext_short').hide(); $('#RestIndexCreateNewFulltext_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"fulltext"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"text"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_post_api_index

@brief creates an index
<br />
@RESTHEADER{POST /_api/index#general, Create index}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{collection,string,required}
The collection name.
<br />
@RESTALLBODYPARAM{index-details,json,required}
<br />
@RESTDESCRIPTION
**NOTE** Swagger examples won't work due to the anchor.
<br />
<br />
Creates a new index in the collection *collection*. Expects
an object containing the index details.
<br />
The type of the index to be created must specified in the *type*
attribute of the index details. Depending on the index type, additional
other attributes may need to specified in the request in order to create
the index.
<br />
Most indexes (a notable exception being the cap constraint) require the
array of attributes to be indexed in the *fields* attribute of the index
details. Depending on the index type, a single attribute or multiple
attributes can be indexed.
<br />
Indexing system attributes such as *_id*, *_key*, *_from*, and *_to*
is not supported for user-defined indexes. Manually creating an index using
any of these attributes will fail with an error.
<br />
Some indexes can be created as unique or non-unique variants. Uniqueness
can be controlled for most indexes by specifying the *unique* flag in the
index details. Setting it to *true* will create a unique index.
Setting it to *false* or omitting the *unique* attribute will
create a non-unique index.
<br />
**Note**: The following index types do not support uniqueness, and using
the *unique* attribute with these types may lead to an error:
<br />
- cap constraints
- fulltext indexes
<br />
**Note**: Unique indexes on non-shard keys are not supported in a
cluster.
<br />
Hash and skiplist indexes can optionally be created in a sparse
variant. A sparse index will be created if the *sparse* attribute in
the index details is set to *true*. Sparse indexes do not index documents
for which any of the index attributes is either not set or is *null*. 
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index already exists, then an *HTTP 200* is returned.
<br />
@RESTRETURNCODE{201}
If the index does not already exist and could be created, then an *HTTP 201*
is returned.
<br />
@RESTRETURNCODE{400}
If an invalid index description is posted or attributes are used that the
target index will not support, then an *HTTP 400* is returned.
<br />
@RESTRETURNCODE{404}
If *collection* is unknown, then an *HTTP 404* is returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-index.js -->
@startDocuBlock JSF_post_api_index_delete

@brief deletes an index
<br />
@RESTHEADER{DELETE /_api/index/{index-handle}, Delete index}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{index-handle,string,required}
The index handle.
<br />
@RESTDESCRIPTION
<br />
Deletes an index with *index-handle*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the index could be deleted, then an *HTTP 200* is
returned.
<br />
@RESTRETURNCODE{404}
If the *index-handle* is unknown, then an *HTTP 404* is returned.
@EXAMPLES
<br />

<div id="RestIndexDeleteUniqueSkiplist_container">
<div id="RestIndexDeleteUniqueSkiplist_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/index/products/783370369

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"products/783370369"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestIndexDeleteUniqueSkiplist_short" onclick="$('#RestIndexDeleteUniqueSkiplist_short').hide(); $('#RestIndexDeleteUniqueSkiplist_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/index/products/783370369

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-endpoint.js -->
@startDocuBlock JSF_get_api_endpoint

@brief returns a list of all endpoints
<br />
@RESTHEADER{GET /_api/endpoint, Return list of all endpoints}
<br />
@RESTDESCRIPTION
Returns an array of all configured endpoints the server is listening on. For
each endpoint, the array of allowed databases is returned too if set.
<br />
The result is a JSON object which has the endpoints as keys, and an array of
mapped database names as values for each endpoint.
<br />
If an array of mapped databases is empty, it means that all databases can be
accessed via the endpoint. If an array of mapped databases contains more than
one database name, this means that any of the databases might be accessed
via the endpoint, and the first database in the arry will be treated as
the default database for the endpoint. The default database will be used
when an incoming request does not specify a database name in the request
explicitly.
<br />
**Note**: retrieving the array of all endpoints is allowed in the system database
only. Calling this action in any other database will make the server return
an error.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
is returned when the array of endpoints can be determined successfully.
<br />
@RESTRETURNCODE{400}
is returned if the action is not carried out in the system database.
<br />
@RESTRETURNCODE{405}
The server will respond with *HTTP 405* if an unsupported HTTP method is used.
<br />
@EXAMPLES
<br />

<div id="RestEndpointGet_container">
<div id="RestEndpointGet_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/endpoint

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  { 
    <span class="hljs-string">"endpoint"</span> : <span class="hljs-string">"tcp://127.0.0.1:32090"</span>, 
    <span class="hljs-string">"databases"</span> : [ ] 
  } 
]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-tasks.js -->
@startDocuBlock JSF_get_api_tasks

@brief Retrieves  one currently active server task
<br />
@RESTHEADER{GET /_api/tasks/{id}, Fetch one task with id}
<br />
@RESTURLPARAM{id,string,required}
The id of the task to fetch.
<br />
@RESTDESCRIPTION
fetches one existing tasks on the server specified by *id*
<br />
@RESTRETURNCODE{200}
The requested task
<br />
@EXAMPLES
<br />
Fetching a single task by its id

<div id="RestTasksListOne_container">
<div id="RestTasksListOne_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/tasks/statistics-average-collector

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"statistics-average-collector"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"statistics-average-collector"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"periodic"</span>, 
  <span class="hljs-string">"period"</span> : <span class="hljs-number">900</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399055.241669</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"require('org/arangodb/statistics').historianAverage();"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTasksListOne_short" onclick="$('#RestTasksListOne_short').hide(); $('#RestTasksListOne_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/tasks/statistics-average-collector

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
trying to fetch a non-existing task

<div id="RestTasksListNonExisting_container">
<div id="RestTasksListNonExisting_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/tasks/non-existing-task

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1852</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"task not found"</span> 
}
</pre>
</div>
<div id="RestTasksListNonExisting_short" onclick="$('#RestTasksListNonExisting_short').hide(); $('#RestTasksListNonExisting_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/tasks/non-existing-task

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-tasks.js -->
@startDocuBlock JSF_get_api_tasks_all

@brief Retrieves all currently active server tasks
<br />
@RESTHEADER{GET /_api/tasks/, Fetch all tasks or one task}
<br />
@RESTDESCRIPTION
fetches all existing tasks on the server
<br />
@RESTRETURNCODE{200}
The list of tasks
<br />
@EXAMPLES
<br />
Fetching all tasks

<div id="RestTasksListAll_container">
<div id="RestTasksListAll_long">
<pre>
shell> curl --dump - http://localhost:8529/_api/tasks

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"15419521"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"user-defined task"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"periodic"</span>, 
    <span class="hljs-string">"period"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399055.339724</span>, 
    <span class="hljs-string">"command"</span> : <span class="hljs-string">"(function () {\n      require('org/arangodb/foxx/queues/manager').manage();\n    })(params)"</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"statistics-gc"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"statistics-gc"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"periodic"</span>, 
    <span class="hljs-string">"period"</span> : <span class="hljs-number">450</span>, 
    <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399055.242014</span>, 
    <span class="hljs-string">"command"</span> : <span class="hljs-string">"require('org/arangodb/statistics').garbageCollector();"</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"statistics-collector"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"statistics-collector"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"periodic"</span>, 
    <span class="hljs-string">"period"</span> : <span class="hljs-number">10</span>, 
    <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399055.241592</span>, 
    <span class="hljs-string">"command"</span> : <span class="hljs-string">"require('org/arangodb/statistics').historian();"</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"statistics-average-collector"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"statistics-average-collector"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"periodic"</span>, 
    <span class="hljs-string">"period"</span> : <span class="hljs-number">900</span>, 
    <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399055.241669</span>, 
    <span class="hljs-string">"command"</span> : <span class="hljs-string">"require('org/arangodb/statistics').historianAverage();"</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span> 
  } 
]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-tasks.js -->
@startDocuBlock JSF_post_api_new_tasks

@brief creates a new task
<br />
@RESTHEADER{POST /_api/tasks, creates a task}
<br />
@RESTBODYPARAM{name,string,required,string}
The name of the task
<br />
@RESTBODYPARAM{command,string,required,string}
The JavaScript code to be executed
<br />
@RESTBODYPARAM{params,string,required,string}
The parameters to be passed into command
<br />
@RESTBODYPARAM{period,integer,optional,int64}
number of seconds between the executions
<br />
@RESTBODYPARAM{offset,integer,optional,int64}
Number of seconds initial delay 
<br />
@RESTDESCRIPTION
creates a new task with a generated id
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the post body is not accurate, a *HTTP 400* is returned.
<br />
@EXAMPLES
<br />

<div id="RestTasksCreate_container">
<div id="RestTasksCreate_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/tasks/ &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"(function(params) { require('internal').print(params); })(params)"</span>, 
  <span class="hljs-string">"params"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"bar"</span> : <span class="hljs-string">"foo"</span> 
  }, 
  <span class="hljs-string">"period"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"858736769"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"periodic"</span>, 
  <span class="hljs-string">"period"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399072.717446</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"(function(params) { require('internal').print(params); })(params)"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
shell> curl -X DELETE --dump - http://localhost:8529/_api/tasks/858736769

</pre>
</div>
<div id="RestTasksCreate_short" onclick="$('#RestTasksCreate_short').hide(); $('#RestTasksCreate_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/tasks/ &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"(function(params) { require('internal').print(params); })(params)"</span>, 
  <span class="hljs-string">"params"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"bar"</span> : <span class="hljs-string">"foo"</span> 
  }, 
  <span class="hljs-string">"period"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-tasks.js -->
@startDocuBlock JSF_put_api_new_tasks

@brief registers a new task with a pre-defined id
<br />
@RESTHEADER{PUT /_api/tasks/{id}, creates a task with id}
<br />
@RESTURLPARAM{id,string,required}
The id of the task to create
<br />
@RESTBODYPARAM{name,string,required,string}
The name of the task
<br />
@RESTBODYPARAM{command,string,required,string}
The JavaScript code to be executed
<br />
@RESTBODYPARAM{params,string,required,string}
The parameters to be passed into command
<br />
@RESTBODYPARAM{period,integer,optional,int64}
number of seconds between the executions
<br />
@RESTBODYPARAM{offset,integer,optional,int64}
Number of seconds initial delay 
<br />
@RESTDESCRIPTION
registers a new task with the specified id
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the task *id* already exists or the rest body is not accurate, *HTTP 400* is returned.
<br />
@EXAMPLES
<br />

<div id="RestTasksPutWithId_container">
<div id="RestTasksPutWithId_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/tasks/sampleTask &lt;&lt;EOF
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"(function(params) { require('internal').print(params); })(params)"</span>, 
  <span class="hljs-string">"params"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"bar"</span> : <span class="hljs-string">"foo"</span> 
  }, 
  <span class="hljs-string">"period"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"sampleTask"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"periodic"</span>, 
  <span class="hljs-string">"period"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399072.756567</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"(function(params) { require('internal').print(params); })(params)"</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTasksPutWithId_short" onclick="$('#RestTasksPutWithId_short').hide(); $('#RestTasksPutWithId_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/tasks/sampleTask &lt;&lt;EOF
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"SampleTask"</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"(function(params) { require('internal').print(params); })(params)"</span>, 
  <span class="hljs-string">"params"</span> : { 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"bar"</span> : <span class="hljs-string">"foo"</span> 
  }, 
  <span class="hljs-string">"period"</span> : <span class="hljs-number">2</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-tasks.js -->
@startDocuBlock JSF_delete_api_tasks

@brief deletes one currently active server task
<br />
@RESTHEADER{DELETE /_api/tasks/{id}, deletes the task with id}
<br />
@RESTURLPARAM{id,string,required}
The id of the task to delete.
<br />
@RESTDESCRIPTION
Deletes the task identified by *id* on the server. 
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{404}
If the task *id* is unknown, then an *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
trying to delete non existing task
<br />

<div id="RestTasksDeleteFail_container">
<div id="RestTasksDeleteFail_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/tasks/NoTaskWithThatName

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1852</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"task not found"</span> 
}
</pre>
</div>
<div id="RestTasksDeleteFail_short" onclick="$('#RestTasksDeleteFail_short').hide(); $('#RestTasksDeleteFail_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/tasks/NoTaskWithThatName

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Remove existing Task
<br />

<div id="RestTasksDelete_container">
<div id="RestTasksDelete_long">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/tasks/SampleTask

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/api-transaction.js -->
@startDocuBlock JSF_post_api_transaction

@brief execute a server-side transaction
<br />
@RESTHEADER{POST /_api/transaction, Execute transaction}
<br />
@RESTBODYPARAM{collections,string,required,string}
contains the array of collections to be used in the
transaction (mandatory). *collections* must be a JSON object that can
have the optional sub-attributes *read* and *write*. *read*
and *write* must each be either arrays of collections names or strings
with a single collection name.
<br />
@RESTBODYPARAM{action,string,required,string}
the actual transaction operations to be executed, in the
form of stringified JavaScript code. The code will be executed on server
side, with late binding. It is thus critical that the code specified in
*action* properly sets up all the variables it needs.
If the code specified in *action* ends with a return statement, the
value returned will also be returned by the REST API in the *result*
attribute if the transaction committed successfully.
<br />
@RESTBODYPARAM{waitForSync,boolean,optional,boolean}
an optional boolean flag that, if set, will force the
transaction to write all data to disk before returning.
<br />
@RESTBODYPARAM{lockTimeout,integer,optional,int64}
an optional numeric value that can be used to set a
timeout for waiting on collection locks. If not specified, a default
value will be used. Setting *lockTimeout* to *0* will make ArangoDB
not time out waiting for a lock.
<br />
@RESTBODYPARAM{params,string,optional,string}
optional arguments passed to *action*.
<br />
@RESTDESCRIPTION
<br />
Contains the *collections* and *action*.
<br />
The transaction description must be passed in the body of the POST request.
<br />
If the transaction is fully executed and committed on the server,
*HTTP 200* will be returned. Additionally, the return value of the
code defined in *action* will be returned in the *result* attribute.
<br />
For successfully committed transactions, the returned JSON object has the
following properties:
<br />
- *error*: boolean flag to indicate if an error occurred (*false*
  in this case)
<br />
- *code*: the HTTP status code
<br />
- *result*: the return value of the transaction
<br />
If the transaction specification is either missing or malformed, the server
will respond with *HTTP 400*.
<br />
The body of the response will then contain a JSON object with additional error
details. The object has the following attributes:
<br />
- *error*: boolean flag to indicate that an error occurred (*true* in this case)
<br />
- *code*: the HTTP status code
<br />
- *errorNum*: the server error number
<br />
- *errorMessage*: a descriptive error message
<br />
If a transaction fails to commit, either by an exception thrown in the
*action* code, or by an internal error, the server will respond with
an error.
Any other errors will be returned with any of the return codes
*HTTP 400*, *HTTP 409*, or *HTTP 500*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the transaction is fully executed and committed on the server,
*HTTP 200* will be returned.
<br />
@RESTRETURNCODE{400}
If the transaction specification is either missing or malformed, the server
will respond with *HTTP 400*.
<br />
@RESTRETURNCODE{404}
If the transaction specification contains an unknown collection, the server
will respond with *HTTP 404*.
<br />
@RESTRETURNCODE{500}
Exceptions thrown by users will make the server respond with a return code of
*HTTP 500*
<br />
@EXAMPLES
<br />
Executing a transaction on a single collection
<br />

<div id="RestTransactionSingle_container">
<div id="RestTransactionSingle_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"write"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () { var db = require('internal').db; db.products.save({});  return db.products.count(); }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTransactionSingle_short" onclick="$('#RestTransactionSingle_short').hide(); $('#RestTransactionSingle_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"write"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () { var db = require('internal').db; db.products.save({});  return db.products.count(); }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Executing a transaction using multiple collections
<br />

<div id="RestTransactionMulti_container">
<div id="RestTransactionMulti_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"write"</span> : [ 
      <span class="hljs-string">"products"</span>, 
      <span class="hljs-string">"materials"</span> 
    ] 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () {var db = require('internal').db;db.products.save({});db.materials.save({});return 'worked!';}"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-string">"worked!"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestTransactionMulti_short" onclick="$('#RestTransactionMulti_short').hide(); $('#RestTransactionMulti_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"write"</span> : [ 
      <span class="hljs-string">"products"</span>, 
      <span class="hljs-string">"materials"</span> 
    ] 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () {var db = require('internal').db;db.products.save({});db.materials.save({});return 'worked!';}"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Aborting a transaction due to an internal error
<br />

<div id="RestTransactionAbortInternal_container">
<div id="RestTransactionAbortInternal_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"write"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () {var db = require('internal').db;db.products.save({ _key: 'abc'});db.products.save({ _key: 'abc'});}"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"exception"</span> : <span class="hljs-string">"ArangoError 1210: unique constraint violated"</span>, 
  <span class="hljs-string">"stacktrace"</span> : [ 
    <span class="hljs-string">"ArangoError: unique constraint violated"</span>, 
    <span class="hljs-string">"    at Error (native)"</span>, 
    <span class="hljs-string">"    at eval (eval at post_api_transaction (js/actions/api-transaction.js:268:16), &lt;anonymous&gt;:1:99)"</span>, 
    <span class="hljs-string">"    at eval (eval at post_api_transaction (js/actions/api-transaction.js:268:16), &lt;anonymous&gt;:1:122)"</span>, 
    <span class="hljs-string">"    at post_api_transaction (js/actions/api-transaction.js:268:16)"</span>, 
    <span class="hljs-string">"    at Function.actions.defineHttp.callback (js/actions/api-transaction.js:288:11)"</span> 
  ], 
  <span class="hljs-string">"message"</span> : <span class="hljs-string">"unique constraint violated"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1210</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"unique constraint violated"</span> 
}
</pre>
</div>
<div id="RestTransactionAbortInternal_short" onclick="$('#RestTransactionAbortInternal_short').hide(); $('#RestTransactionAbortInternal_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"write"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () {var db = require('internal').db;db.products.save({ _key: 'abc'});db.products.save({ _key: 'abc'});}"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Aborting a transaction by explicitly throwing an exception
<br />

<div id="RestTransactionAbort_container">
<div id="RestTransactionAbort_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"read"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () { throw 'doh!'; }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">500</span> Internal Server <span class="hljs-built_in">Error</span>
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"exception"</span> : <span class="hljs-string">"doh!"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">500</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">500</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"internal server error"</span> 
}
</pre>
</div>
<div id="RestTransactionAbort_short" onclick="$('#RestTransactionAbort_short').hide(); $('#RestTransactionAbort_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"read"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () { throw 'doh!'; }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">500</span> Internal Server <span class="hljs-built_in">Error</span>
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Referring to a non-existing collection
<br />

<div id="RestTransactionNonExisting_container">
<div id="RestTransactionNonExisting_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"read"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () { return true; }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"exception"</span> : <span class="hljs-string">"ArangoError 1203: collection not found"</span>, 
  <span class="hljs-string">"stacktrace"</span> : [ 
    <span class="hljs-string">"ArangoError: collection not found"</span>, 
    <span class="hljs-string">"    at Error (native)"</span>, 
    <span class="hljs-string">"    at post_api_transaction (js/actions/api-transaction.js:268:16)"</span>, 
    <span class="hljs-string">"    at Function.actions.defineHttp.callback (js/actions/api-transaction.js:288:11)"</span> 
  ], 
  <span class="hljs-string">"message"</span> : <span class="hljs-string">"collection not found"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1203</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"collection not found"</span> 
}
</pre>
</div>
<div id="RestTransactionNonExisting_short" onclick="$('#RestTransactionNonExisting_short').hide(); $('#RestTransactionNonExisting_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/transaction &lt;&lt;EOF
{ 
  <span class="hljs-string">"collections"</span> : { 
    <span class="hljs-string">"read"</span> : <span class="hljs-string">"products"</span> 
  }, 
  <span class="hljs-string">"action"</span> : <span class="hljs-string">"function () { return true; }"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_post_api_collection

@brief creates a collection
<br />
@RESTHEADER{POST /_api/collection, Create collection}
<br />
@RESTBODYPARAM{name,string,required,string}
The name of the collection.
<br />
@RESTBODYPARAM{waitForSync,boolean,optional,}
If *true* then the data is synchronized to disk before returning from a
document create, update, replace or removal operation. (default: false)
<br />
@RESTBODYPARAM{doCompact,boolean,optional,}
whether or not the collection will be compacted (default is *true*)
<br />
@RESTBODYPARAM{journalSize,integer,optional,int64}
The maximal size of a journal or datafile in bytes. The value 
must be at least `1048576` (1 MiB). (The default is a configuration parameter)
<br />
@RESTBODYPARAM{isSystem,boolean,optional,}
If *true*, create a  system collection. In this case *collection-name*
should start with an underscore. End users should normally create non-system
collections only. API implementors may be required to create system
collections in very special occasions, but normally a regular collection will do.
(The default is *false*)
<br />
@RESTBODYPARAM{isVolatile,boolean,optional,}
If *true* then the collection data is kept in-memory only and not made persistent.
Unloading the collection will cause the collection data to be discarded. Stopping
or re-starting the server will also cause full loss of data in the
collection. Setting this option will make the resulting collection be
slightly faster than regular collections because ArangoDB does not
enforce any synchronization to disk and does not calculate any CRC
checksums for datafiles (as there are no datafiles). This option 
should therefore be used for cache-type collections only, and not 
for data that cannot be re-created otherwise.
(The default is *false*)
<br />
@RESTBODYPARAM{keyOptions,object,optional,JSF_post_api_collection_opts}
additional options for key generation. If specified, then *keyOptions*
should be a JSON array containing the following attributes:
<br />
@RESTSTRUCT{type,JSF_post_api_collection_opts,string,required,string}
specifies the type of the key generator. The currently available generators are
*traditional* and *autoincrement*.
<br />
@RESTSTRUCT{allowUserKeys,JSF_post_api_collection_opts,boolean,required,}
if set to *true*, then it is allowed to supply own key values in the
*_key* attribute of a document. If set to *false*, then the key generator
will solely be responsible for generating keys and supplying own key values
in the *_key* attribute of documents is considered an error.
<br />
@RESTSTRUCT{increment,JSF_post_api_collection_opts,integer,required,int64}
increment value for *autoincrement* key generator. Not used for other key
generator types.
<br />
@RESTSTRUCT{offset,JSF_post_api_collection_opts,integer,required,int64}
Initial offset value for *autoincrement* key generator.
Not used for other key generator types.
<br />
@RESTBODYPARAM{type,integer,optional,int64}
(The default is *2*): the type of the collection to create.
The following values for *type* are valid:
<br />
- *2*: document collection
- *3*: edges collection
<br />
@RESTBODYPARAM{indexBuckets,integer,optional,int64}
The: number of buckets into which indexes using a hash
table are split. The default is 16 and this number has to be a
power of 2 and less than or equal to 1024. 
<br />
For very large collections one should increase this to avoid long pauses 
when the hash table has to be initially built or resized, since buckets 
are resized individually and can be initially built in parallel. For 
example, 64 might be a sensible value for a collection with 100
000 000 documents. Currently, only the edge index respects this
value, but other index types might follow in future ArangoDB versions. 
Changes (see below) are applied when the collection is loaded the next 
time.
<br />
@RESTBODYPARAM{numberOfShards,integer,optional,int64}
(The default is *1*): in a cluster, this value determines the
number of shards to create for the collection. In a single
server setup, this option is meaningless.
<br />
@RESTBODYPARAM{shardKeys,string,optional,string}
(The default is *[ "_key" ]*): in a cluster, this attribute determines
which document attributes are used to determine the target shard for documents.
Documents are sent to shards based on the values of their shard key attributes.
The values of all shard key attributes in a document are hashed,
and the hash value is used to determine the target shard.
**Note**: Values of shard key attributes cannot be changed once set.
  This option is meaningless in a single server setup.
<br />
@RESTDESCRIPTION
Creates an new collection with a given name. The request must contain an
object with the following attributes.
<br />
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
<br />
@EXAMPLES
<br />

<div id="RestCollectionCreateCollection_container">
<div id="RestCollectionCreateCollection_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/collection &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionBasics"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/testCollectionBasics

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"643516545"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionBasics"</span>, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/collection &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionEdges"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">3</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/testCollectionEdges

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"643647617"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionEdges"</span>, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionCreateCollection_short" onclick="$('#RestCollectionCreateCollection_short').hide(); $('#RestCollectionCreateCollection_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/collection &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionBasics"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/testCollectionBasics

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />

<div id="RestCollectionCreateKeyopt_container">
<div id="RestCollectionCreateKeyopt_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/collection &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionUsers"</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"autoincrement"</span>, 
    <span class="hljs-string">"increment"</span> : <span class="hljs-number">5</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/testCollectionUsers

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"643909761"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionUsers"</span>, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionCreateKeyopt_short" onclick="$('#RestCollectionCreateKeyopt_short').hide(); $('#RestCollectionCreateKeyopt_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/collection &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"testCollectionUsers"</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"autoincrement"</span>, 
    <span class="hljs-string">"increment"</span> : <span class="hljs-number">5</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  } 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/testCollectionUsers

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_get_api_collections

@brief returns all collections
<br />
@RESTHEADER{GET /_api/collection,reads all collections}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{excludeSystem,boolean,optional}
Whether or not system collections should be excluded from the result.
<br />
@RESTDESCRIPTION
Returns an object with an attribute *collections* containing an
array of all collection descriptions. The same information is also
available in the *names* as an object with the collection names
as keys.
<br />
By providing the optional query parameter *excludeSystem* with a value of
*true*, all system collections will be excluded from the response.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
The list of collections
<br />
@EXAMPLES
<br />
Return information about all collections:
<br />

<div id="RestCollectionGetAllCollections_container">
<div id="RestCollectionGetAllCollections_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"collections"</span> : [ 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5523585"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_jobs"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2312321"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_routing"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"4081793"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_statisticsRaw"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5392513"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_queues"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"13387905"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_system_users_users"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"4475009"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_statistics"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"16468097"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"demo"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"17320065"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"animals"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"4868225"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_statistics15"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2181249"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_modules"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"3950721"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_aqlfunctions"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5261441"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_configuration"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5654657"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_apps"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2050177"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_graphs"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2443393"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_cluster_kickstarter_plans"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"215169"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_users"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"12667009"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_sessions"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    } 
  ], 
  <span class="hljs-string">"names"</span> : { 
    <span class="hljs-string">"_jobs"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5523585"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_jobs"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_routing"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2312321"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_routing"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_statisticsRaw"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"4081793"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_statisticsRaw"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_queues"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5392513"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_queues"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_system_users_users"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"13387905"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_system_users_users"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_statistics"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"4475009"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_statistics"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"demo"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"16468097"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"demo"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"animals"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"17320065"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"animals"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_statistics15"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"4868225"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_statistics15"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_modules"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2181249"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_modules"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_aqlfunctions"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"3950721"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_aqlfunctions"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_configuration"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5261441"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_configuration"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_apps"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"5654657"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_apps"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_graphs"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2050177"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_graphs"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_cluster_kickstarter_plans"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"2443393"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_cluster_kickstarter_plans"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_users"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"215169"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_users"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    }, 
    <span class="hljs-string">"_sessions"</span> : { 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"12667009"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"_sessions"</span>, 
      <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span> 
    } 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetAllCollections_short" onclick="$('#RestCollectionGetAllCollections_short').hide(); $('#RestCollectionGetAllCollections_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSA_get_api_collection_name

@brief returns a collection
<br />
@RESTHEADER{GET /_api/collection/{collection-name}, Return information about a collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
The result is an object describing the collection with the following
attributes:
<br />
- *id*: The identifier of the collection.
<br />
- *name*: The name of the collection.
<br />
- *status*: The status of the collection as number.
  - 1: new born collection
  - 2: unloaded
  - 3: loaded
  - 4: in the process of being unloaded
  - 5: deleted
  - 6: loading
<br />
Every other status indicates a corrupted collection.
<br />
- *type*: The type of the collection as number.
  - 2: document collection (normal case)
  - 3: edges collection
<br />
- *isSystem*: If *true* then the collection is a system collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is
returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSA_get_api_collection_properties

@brief reads the properties of the specified collection
<br />
@RESTHEADER{GET /_api/collection/{collection-name}/properties, Read properties of a collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
In addition to the above, the result will always contain the
*waitForSync*, *doCompact*, *journalSize*, and *isVolatile* attributes.
This is achieved by forcing a load of the underlying collection.
<br />
- *waitForSync*: If *true* then creating, changing or removing
  documents will wait until the data has been synchronized to disk.
<br />
- *doCompact*: Whether or not the collection will be compacted.
<br />
- *journalSize*: The maximal size setting for journals / datafiles
  in bytes.
<br />
- *keyOptions*: JSON object which contains key generation options:
  - *type*: specifies the type of the key generator. The currently
    available generators are *traditional* and *autoincrement*.
  - *allowUserKeys*: if set to *true*, then it is allowed to supply
    own key values in the *_key* attribute of a document. If set to
  *false*, then the key generator is solely responsible for
    generating keys and supplying own key values in the *_key* attribute
    of documents is considered an error.
<br />
- *isVolatile*: If *true* then the collection data will be
  kept in memory only and ArangoDB will not write or sync the data
  to disk.
<br />
In a cluster setup, the result will also contain the following attributes:
- *numberOfShards*: the number of shards of the collection.
<br />
- *shardKeys*: contains the names of document attributes that are used to
  determine the target shard for documents.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />
Using an identifier:
<br />

<div id="RestCollectionGetCollectionIdentifier_container">
<div id="RestCollectionGetCollectionIdentifier_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/666585217/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/properties

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"666585217"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetCollectionIdentifier_short" onclick="$('#RestCollectionGetCollectionIdentifier_short').hide(); $('#RestCollectionGetCollectionIdentifier_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/666585217/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/properties

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a name:
<br />

<div id="RestCollectionGetCollectionName_container">
<div id="RestCollectionGetCollectionName_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/properties

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"666781825"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetCollectionName_short" onclick="$('#RestCollectionGetCollectionName_short').hide(); $('#RestCollectionGetCollectionName_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/properties

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSA_get_api_collection_count

@brief Counts the documents in a collection
<br />
@RESTHEADER{GET /_api/collection/{collection-name}/count, Return number of documents in a collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
In addition to the above, the result also contains the number of documents.
**Note** that this will always load the collection into memory.
<br />
- *count*: The number of documents inside the collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />
Requesting the number of documents:
<br />

<div id="RestCollectionGetCollectionCount_container">
<div id="RestCollectionGetCollectionCount_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/count

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/count

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"645679233"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetCollectionCount_short" onclick="$('#RestCollectionGetCollectionCount_short').hide(); $('#RestCollectionGetCollectionCount_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/count

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/count

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSA_get_api_collection_figures

@brief Fetch the statistics of a collection
<br />
@RESTHEADER{GET /_api/collection/{collection-name}/figures, Return statistics for a collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
In addition to the above, the result also contains the number of documents
and additional statistical information about the collection.
**Note** : This will always load the collection into memory.
<br />
**Note**: collection data that are stored in the write-ahead log only are
not reported in the results. When the write-ahead log is collected, documents
might be added to journals and datafiles of the collection, which may modify
the figures of the collection.
<br />
Additionally, the filesizes of collection and index parameter JSON files are
not reported. These files should normally have a size of a few bytes
each. Please also note that the *fileSize* values are reported in bytes
and reflect the logical file sizes. Some filesystems may use optimisations
(e.g. sparse files) so that the actual physical file size is somewhat
different. Directories and sub-directories may also require space in the
file system, but this space is not reported in the *fileSize* results.
<br />
That means that the figures reported do not reflect the actual disk
usage of the collection with 100% accuracy. The actual disk usage of
a collection is normally slightly higher than the sum of the reported
*fileSize* values. Still the sum of the *fileSize* values can still be
used as a lower bound approximation of the disk usage.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returns information about the collection:
<br />
@RESTREPLYBODY{count,integer,required,int64}
The number of documents currently present in the collection.
<br />
@RESTREPLYBODY{figures,object,required,collection_figures}
metrics of the collection
<br />
@RESTSTRUCT{alive,collection_figures,object,required,collection_figures_alive}
the currently active figures
<br />
@RESTSTRUCT{count,collection_figures_alive,integer,required,int64}
The number of currently active documents in all datafiles
and journals of the collection. Documents that are contained in the
write-ahead log only are not reported in this figure.
<br />
@RESTSTRUCT{size,collection_figures_alive,integer,required,int64}
The total size in bytes used by all active documents of
the collection. Documents that are contained in the write-ahead log only are
not reported in this figure.
<br />
@RESTSTRUCT{dead,collection_figures,object,required,collection_figures_dead}
the items waiting to be swept away by the cleaner
<br />
@RESTSTRUCT{count,collection_figures_dead,integer,required,int64}
The number of dead documents. This includes document
versions that have been deleted or replaced by a newer version. Documents
deleted or replaced that are contained the write-ahead log only are not reported
in this figure.
<br />
@RESTSTRUCT{size,collection_figures_dead,integer,required,int64}
The total size in bytes used by all dead documents.
<br />
@RESTSTRUCT{deletion,collection_figures_dead,integer,required,int64}
The total number of deletion markers. Deletion markers
only contained in the write-ahead log are not reporting in this figure.
<br />
@RESTSTRUCT{datafiles,collection_figures,object,required,collection_figures_datafiles}
Metrics regarding the datafiles
<br />
@RESTSTRUCT{count,collection_figures_datafiles,integer,required,int64}
The number of datafiles.
<br />
@RESTSTRUCT{fileSize,collection_figures_datafiles,integer,required,int64}
The total filesize of datafiles (in bytes).
<br />
@RESTSTRUCT{journals,collection_figures,object,required,collection_figures_journals}
Metrics regarding the journal files
<br />
@RESTSTRUCT{count,collection_figures_journals,integer,required,int64}
The number of journal files.
<br />
@RESTSTRUCT{fileSize,collection_figures_journals,integer,required,int64}
The total filesize of all journal files (in bytes).
<br />
@RESTSTRUCT{compactors,collection_figures,object,required,collection_figures_compactors}
<br />
@RESTSTRUCT{count,collection_figures_compactors,integer,required,int64}
The number of compactor files.
<br />
@RESTSTRUCT{fileSize,collection_figures_compactors,integer,required,int64}
The total filesize of all compactor files (in bytes).
<br />
@RESTSTRUCT{shapefiles,collection_figures,object,required,collection_figures_shapefiles}
**deprecated**
<br />
@RESTSTRUCT{count,collection_figures_shapefiles,integer,required,int64}
The number of shape files. This value is deprecated and kept for compatibility reasons only.
The value will always be 0 since ArangoDB 2.0 and higher.
<br />
@RESTSTRUCT{fileSize,collection_figures_shapefiles,integer,required,int64}
The total filesize of the shape files. This value is deprecated and kept
for compatibility reasons only. The value will always be 0 in ArangoDB 2.0 and higher.
<br />
@RESTSTRUCT{shapes,collection_figures,object,required,collection_figures_shapes}
@RESTSTRUCT{count,collection_figures_shapes,integer,required,int64}
The total number of shapes used in the collection. This includes shapes
that are not in use anymore. Shapes that are contained
in the write-ahead log only are not reported in this figure.
<br />
@RESTSTRUCT{size,collection_figures_shapes,integer,required,int64}
The total size of all shapes (in bytes). This includes
shapes that are not in use anymore. Shapes that are contained in the
write-ahead log only are not reported in this figure.
<br />
@RESTSTRUCT{attributes,collection_figures,object,required,collection_figures_attributes}
@RESTSTRUCT{count,collection_figures_attributes,integer,required,int64}
The total number of attributes used in the
collection. Note: the value includes data of attributes that are not in use
anymore. Attributes that are contained in the write-ahead log only are
not reported in this figure.
<br />
@RESTSTRUCT{size,collection_figures_attributes,integer,required,int64}
The total size of the attribute data (in bytes).
Note: the value includes data of attributes that are not in use anymore.
Attributes that are contained in the write-ahead log only are not
reported in this figure.
<br />
@RESTSTRUCT{indexes,collection_figures,object,required,collection_figures_indexes}
@RESTSTRUCT{count,collection_figures_indexes,integer,required,int64}
The total number of indexes defined for the collection, including the pre-defined
indexes (e.g. primary index).
<br />
@RESTSTRUCT{size,collection_figures_indexes,integer,required,int64}
The total memory allocated for indexes in bytes.
<br />
@RESTSTRUCT{maxTick,collection_figures,integer,required,int64}
The tick of the last marker that was stored in a journal
of the collection. This might be 0 if the collection does not yet have
a journal.
<br />
@RESTSTRUCT{uncollectedLogfileEntries,collection_figures,integer,required,int64}
The number of markers in the write-ahead
log for this collection that have not been transferred to journals or datafiles.
<br />
@RESTSTRUCT{documentReferences,collection_figures,integer,optional,int64}
The number of references to documents in datafiles that JavaScript code 
currently holds. This information can be used for debugging compaction and 
unload issues.
<br />
@RESTSTRUCT{waitingFor,collection_figures,string,optional,string}
An optional string value that contains information about which object type is at the 
head of the collection's cleanup queue. This information can be used for debugging 
compaction and unload issues.
<br />
@RESTSTRUCT{compactionStatus,collection_figures,object,optional,compactionStatus_attributes}
@RESTSTRUCT{message,compactionStatus_attributes,string,optional,string}
The action that was performed when the compaction was last run for the collection. 
This information can be used for debugging compaction issues.
<br />
@RESTSTRUCT{time,compactionStatus_attributes,string,optional,string}
The point in time the compaction for the collection was last executed. 
This information can be used for debugging compaction issues.
<br />
@RESTREPLYBODY{journalSize,integer,required,int64}
The maximal size of a journal or datafile in bytes.
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />
Using an identifier and requesting the figures of the collection:
<br />

<div id="RestCollectionGetCollectionFigures_container">
<div id="RestCollectionGetCollectionFigures_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/figures

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/figures

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"665733249"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"figures"</span> : { 
    <span class="hljs-string">"alive"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"size"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"dead"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"size"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"deletion"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"datafiles"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"journals"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">1048576</span> 
    }, 
    <span class="hljs-string">"compactors"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"shapefiles"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"fileSize"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"shapes"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"size"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"attributes"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"size"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"indexes"</span> : { 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"size"</span> : <span class="hljs-number">16120</span> 
    }, 
    <span class="hljs-string">"lastTick"</span> : <span class="hljs-string">"666126465"</span>, 
    <span class="hljs-string">"uncollectedLogfileEntries"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"documentReferences"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"waitingFor"</span> : <span class="hljs-string">"-"</span>, 
    <span class="hljs-string">"compactionStatus"</span> : { 
      <span class="hljs-string">"message"</span> : <span class="hljs-string">"skipped compaction because collection has no datafiles"</span>, 
      <span class="hljs-string">"time"</span> : <span class="hljs-string">"2016-07-13T08:37:45Z"</span> 
    } 
  }, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetCollectionFigures_short" onclick="$('#RestCollectionGetCollectionFigures_short').hide(); $('#RestCollectionGetCollectionFigures_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/figures

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>
location: <span class="hljs-regexp">/_db/</span>_system/_api/collection/products/figures

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSA_get_api_collection_revision

@brief Retrieve the collections revision id
<br />
@RESTHEADER{GET /_api/collection/{collection-name}/revision, Return collection revision id}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
In addition to the above, the result will also contain the
collection's revision id. The revision id is a server-generated
string that clients can use to check whether data in a collection
has changed since the last revision check.
<br />
- *revision*: The collection revision id as a string.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />
Retrieving the revision of a collection
<br />

<div id="RestCollectionGetCollectionRevision_container">
<div id="RestCollectionGetCollectionRevision_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/revision

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"666978433"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"revision"</span> : <span class="hljs-string">"0"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetCollectionRevision_short" onclick="$('#RestCollectionGetCollectionRevision_short').hide(); $('#RestCollectionGetCollectionRevision_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/revision

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSA_get_api_collection_checksum

@brief returns a checksum for the specified collection
<br />
@RESTHEADER{GET /_api/collection/{collection-name}/checksum, Return checksum for the collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTQUERYPARAM{withRevisions,boolean,optional}
Whether or not to include document revision ids in the checksum calculation.
<br />
@RESTQUERYPARAM{withData,boolean,optional}
Whether or not to include document body data in the checksum calculation.
<br />
@RESTDESCRIPTION
Will calculate a checksum of the meta-data (keys and optionally revision ids) and
optionally the document data in the collection.
<br />
The checksum can be used to compare if two collections on different ArangoDB
instances contain the same contents. The current revision of the collection is
returned too so one can make sure the checksums are calculated for the same
state of data.
<br />
By default, the checksum will only be calculated on the *_key* system attribute
of the documents contained in the collection. For edge collections, the system
attributes *_from* and *_to* will also be included in the calculation.
<br />
By setting the optional query parameter *withRevisions* to *true*, then revision
ids (*_rev* system attributes) are included in the checksumming.
<br />
By providing the optional query parameter *withData* with a value of *true*,
the user-defined document attributes will be included in the calculation too.
**Note**: Including user-defined attributes will make the checksumming slower.
<br />
The response is a JSON object with the following attributes:
<br />
- *checksum*: The calculated checksum as a number.
<br />
- *revision*: The collection revision id as a string.
<br />
**Note**: this method is not available in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />
Retrieving the checksum of a collection:
<br />

<div id="RestCollectionGetCollectionChecksum_container">
<div id="RestCollectionGetCollectionChecksum_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/checksum

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"644499585"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"checksum"</span> : <span class="hljs-number">1090370470</span>, 
  <span class="hljs-string">"revision"</span> : <span class="hljs-string">"644827265"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetCollectionChecksum_short" onclick="$('#RestCollectionGetCollectionChecksum_short').hide(); $('#RestCollectionGetCollectionChecksum_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/checksum

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Retrieving the checksum of a collection including the collection data,
but not the revisions:
<br />

<div id="RestCollectionGetCollectionChecksumNoRev_container">
<div id="RestCollectionGetCollectionChecksumNoRev_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/checksum?withRevisions=false&withData=true

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"645089409"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"checksum"</span> : <span class="hljs-number">4150819628</span>, 
  <span class="hljs-string">"revision"</span> : <span class="hljs-string">"645417089"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionGetCollectionChecksumNoRev_short" onclick="$('#RestCollectionGetCollectionChecksumNoRev_short').hide(); $('#RestCollectionGetCollectionChecksumNoRev_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/collection/products/checksum?withRevisions=false&withData=true

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_put_api_collection_load

@brief loads a collection
<br />
@RESTHEADER{PUT /_api/collection/{collection-name}/load, Load collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
Loads a collection into memory. Returns the collection on success.
<br />
The request body object might optionally contain the following attribute:
<br />
- *count*: If set, this controls whether the return value should include
  the number of documents in the collection. Setting *count* to
  *false* may speed up loading a collection. The default value for
  *count* is *true*.
<br />
On success an object with the following attributes is returned:
<br />
- *id*: The identifier of the collection.
<br />
- *name*: The name of the collection.
<br />
- *count*: The number of documents inside the collection. This is only
  returned if the *count* input parameters is set to *true* or has
  not been specified.
<br />
- *status*: The status of the collection as number.
<br />
- *type*: The collection type. Valid types are:
  - 2: document collection
  - 3: edges collection
<br />
- *isSystem*: If *true* then the collection is a system collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />

<div id="RestCollectionIdentifierLoad_container">
<div id="RestCollectionIdentifierLoad_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/collection/products/load

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"667240577"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"count"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionIdentifierLoad_short" onclick="$('#RestCollectionIdentifierLoad_short').hide(); $('#RestCollectionIdentifierLoad_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/collection/products/load

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_put_api_collection_unload

@brief unloads a collection
<br />
@RESTHEADER{PUT /_api/collection/{collection-name}/unload, Unload collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
<br />
@RESTDESCRIPTION
Removes a collection from memory. This call does not delete any documents.
You can use the collection afterwards; in which case it will be loaded into
memory, again. On success an object with the following attributes is
returned:
<br />
- *id*: The identifier of the collection.
<br />
- *name*: The name of the collection.
<br />
- *status*: The status of the collection as number.
<br />
- *type*: The collection type. Valid types are:
  - 2: document collection
  - 3: edges collection
<br />
- *isSystem*: If *true* then the collection is a system collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />

<div id="RestCollectionIdentifierUnload_container">
<div id="RestCollectionIdentifierUnload_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/collection/products/unload

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"668354689"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">4</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionIdentifierUnload_short" onclick="$('#RestCollectionIdentifierUnload_short').hide(); $('#RestCollectionIdentifierUnload_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/collection/products/unload

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_put_api_collection_truncate

@brief truncates a collection
<br />
@RESTHEADER{PUT /_api/collection/{collection-name}/truncate, Truncate collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
Removes all documents from the collection, but leaves the indexes intact.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />

<div id="RestCollectionIdentifierTruncate_container">
<div id="RestCollectionIdentifierTruncate_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/collection/products/truncate

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"668092545"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionIdentifierTruncate_short" onclick="$('#RestCollectionIdentifierTruncate_short').hide(); $('#RestCollectionIdentifierTruncate_long').show();">
<pre>
shell> curl -X PUT --dump - http://localhost:8529/_api/collection/products/truncate

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_put_api_collection_properties

@brief changes a collection
<br />
@RESTHEADER{PUT /_api/collection/{collection-name}/properties, Change properties of a collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
Changes the properties of a collection. Expects an object with the
attribute(s)
<br />
- *waitForSync*: If *true* then creating or changing a
  document will wait until the data has been synchronized to disk.
<br />
- *journalSize*: The maximal size of a journal or datafile in bytes. 
  The value must be at least `1048576` (1 MB). Note that when
  changing the journalSize value, it will only have an effect for
  additional journals or datafiles that are created. Already
  existing journals or datafiles will not be affected.
<br />
On success an object with the following attributes is returned:
<br />
- *id*: The identifier of the collection.
<br />
- *name*: The name of the collection.
<br />
- *waitForSync*: The new value.
<br />
- *journalSize*: The new value.
<br />
- *status*: The status of the collection as number.
<br />
- *type*: The collection type. Valid types are:
  - 2: document collection
  - 3: edges collection
<br />
- *isSystem*: If *true* then the collection is a system collection.
<br />
- *isVolatile*: If *true* then the collection data will be
  kept in memory only and ArangoDB will not write or sync the data
  to disk.
<br />
- *doCompact*: Whether or not the collection will be compacted.
<br />
- *keyOptions*: JSON object which contains key generation options:
  - *type*: specifies the type of the key generator. The currently
    available generators are *traditional* and *autoincrement*.
  - *allowUserKeys*: if set to *true*, then it is allowed to supply
    own key values in the *_key* attribute of a document. If set to
  *false*, then the key generator is solely responsible for
    generating keys and supplying own key values in the *_key* attribute
    of documents is considered an error.
<br />
**Note**: some other collection properties, such as *type*, *isVolatile*,
*numberOfShards* or *shardKeys* cannot be changed once a collection is
created.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
<br />
@EXAMPLES
<br />

<div id="RestCollectionIdentifierPropertiesSync_container">
<div id="RestCollectionIdentifierPropertiesSync_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"667502721"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"products"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"doCompact"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isVolatile"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"journalSize"</span> : <span class="hljs-number">1048576</span>, 
  <span class="hljs-string">"keyOptions"</span> : { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"traditional"</span>, 
    <span class="hljs-string">"allowUserKeys"</span> : <span class="hljs-literal">true</span> 
  }, 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"indexBuckets"</span> : <span class="hljs-number">8</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionIdentifierPropertiesSync_short" onclick="$('#RestCollectionIdentifierPropertiesSync_short').hide(); $('#RestCollectionIdentifierPropertiesSync_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"waitForSync"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_put_api_collection_rename

@brief renames a collection
<br />
@RESTHEADER{PUT /_api/collection/{collection-name}/rename, Rename collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection to rename.
<br />
@RESTDESCRIPTION
Renames a collection. Expects an object with the attribute(s)
<br />
- *name*: The new name.
<br />
It returns an object with the attributes
<br />
- *id*: The identifier of the collection.
<br />
- *name*: The new name of the collection.
<br />
- *status*: The status of the collection as number.
<br />
- *type*: The collection type. Valid types are:
  - 2: document collection
  - 3: edges collection
<br />
- *isSystem*: If *true* then the collection is a system collection.
<br />
If renaming the collection succeeds, then the collection is also renamed in 
all graph definitions inside the `_graphs` collection in the current database.
<br />
**Note**: this method is not available in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404*
is returned.
@EXAMPLES
<br />

<div id="RestCollectionIdentifierRename_container">
<div id="RestCollectionIdentifierRename_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products1/rename &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"newname"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"667764865"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"newname"</span>, 
  <span class="hljs-string">"isSystem"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"status"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-number">2</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionIdentifierRename_short" onclick="$('#RestCollectionIdentifierRename_short').hide(); $('#RestCollectionIdentifierRename_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products1/rename &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"newname"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_put_api_collection_rotate

@brief rotates the journal of a collection
<br />
@RESTHEADER{PUT /_api/collection/{collection-name}/rotate, Rotate journal of a collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection.
<br />
@RESTDESCRIPTION
Rotates the journal of a collection. The current journal of the collection will be closed
and made a read-only datafile. The purpose of the rotate method is to make the data in
the file available for compaction (compaction is only performed for read-only datafiles, and
not for journals).
<br />
Saving new data in the collection subsequently will create a new journal file
automatically if there is no current journal.
<br />
It returns an object with the attributes
<br />
- *result*: will be *true* if rotation succeeded
<br />
**Note**: This method is not available in a cluster.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the collection currently has no journal, *HTTP 400* is returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
Rotating the journal:
<br />

<div id="RestCollectionRotate_container">
<div id="RestCollectionRotate_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products/rotate &lt;&lt;EOF
{ 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"result"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionRotate_short" onclick="$('#RestCollectionRotate_short').hide(); $('#RestCollectionRotate_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products/rotate &lt;&lt;EOF
{ 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Rotating if no journal exists:
<br />

<div id="RestCollectionRotateNoJournal_container">
<div id="RestCollectionRotateNoJournal_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products/rotate &lt;&lt;EOF
{ 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1105</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"could not rotate journal: no journal"</span> 
}
</pre>
</div>
<div id="RestCollectionRotateNoJournal_short" onclick="$('#RestCollectionRotateNoJournal_short').hide(); $('#RestCollectionRotateNoJournal_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/collection/products/rotate &lt;&lt;EOF
{ 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/collection/app.js -->
@startDocuBlock JSF_delete_api_collection

@brief drops a collection
<br />
@RESTHEADER{DELETE /_api/collection/{collection-name}, Drops collection}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{collection-name,string,required}
The name of the collection to drop.
<br />
@RESTDESCRIPTION
Drops the collection identified by *collection-name*.
<br />
If the collection was successfully dropped, an object is returned with
the following attributes:
<br />
- *error*: *false*
<br />
- *id*: The identifier of the dropped collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{400}
If the *collection-name* is missing, then a *HTTP 400* is
returned.
<br />
@RESTRETURNCODE{404}
If the *collection-name* is unknown, then a *HTTP 404* is returned.
<br />
@EXAMPLES
<br />
Using an identifier:
<br />

<div id="RestCollectionDeleteCollectionIdentifier_container">
<div id="RestCollectionDeleteCollectionIdentifier_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/collection/644106369

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"644106369"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionDeleteCollectionIdentifier_short" onclick="$('#RestCollectionDeleteCollectionIdentifier_short').hide(); $('#RestCollectionDeleteCollectionIdentifier_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/collection/644106369

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
Using a name:
<br />

<div id="RestCollectionDeleteCollectionName_container">
<div id="RestCollectionDeleteCollectionName_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/collection/products1

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"644302977"</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestCollectionDeleteCollectionName_short" onclick="$('#RestCollectionDeleteCollectionName_short').hide(); $('#RestCollectionDeleteCollectionName_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/collection/products1

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/user/app.js -->
@startDocuBlock JSF_api_user_fetch

@brief fetch the properties of a user.
<br />
@RESTHEADER{GET /_api/user/{user}, Fetch User}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{user,string,required}
The name of the user
<br />
@RESTDESCRIPTION
<br />
Fetches data about the specified user.
<br />
The call will return a JSON object with at least the following attributes on success:
<br />
- *user*: The name of the user as a string.
- *active*: An optional flag that specifies whether the user is active.
- *extra*: An optional JSON object with arbitrary extra data about the user.
- *changePassword*: An optional flag that specifies whether the user must
  change the password or not.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
The user was found
<br />
@RESTRETURNCODE{404}
The user with the specified name does not exist
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/user/app.js -->
@startDocuBlock JSF_api_user_fetch_list

@brief fetch the properties of a user.
<br />
@RESTHEADER{GET /_api/user/, List available Users}
<br />
@RESTDESCRIPTION
<br />
Fetches data about all users.
<br />
The call will return a JSON object with at least the following attributes on success:
<br />
- *user*: The name of the user as a string.
- *active*: An optional flag that specifies whether the user is active.
- *extra*: An optional JSON object with arbitrary extra data about the user.
- *changePassword*: An optional flag that specifies whether the user must
  change the password or not.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
The users that were found
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/user/app.js -->
@startDocuBlock JSF_api_user_create

@brief Create a new user.
<br />
@RESTHEADER{POST /_api/user, Create User}
<br />
@RESTDESCRIPTION
<br />
The following data need to be passed in a JSON representation in the body
of the POST request:
<br />
- *user*: The name of the user as a string. This is mandatory.
- *passwd*: The user password as a string. If no password is specified, the
  empty string will be used. If you pass the special value
  *ARANGODB_DEFAULT_ROOT_PASSWORD*, the password will be set the value
  stored in the environment variable `ARANGODB_DEFAULT_ROOT_PASSWORD`. This
  can be used to pass an instance variable into ArangoDB. For example, the
  instance identifier from Amazon.
- *active*: An optional flag that specifies whether the user is active.
  If not specified, this will default to true
- *extra*: An optional JSON object with arbitrary extra data about the user
- *changePassword*: An optional flag that specifies whethers the user must
  change the password or not. If not specified, this will default to false.
  If set to true, the only operations allowed are PUT /_api/user or PATCH /_api/user.
  All other operations executed by the user will result in an HTTP 403.
<br />
If the user can be added by the server, the server will respond with HTTP 201.
In case of success, the returned JSON object has the following properties:
<br />
- *error*: Boolean flag to indicate that an error occurred (false in this case)
- *code*: The HTTP status code
<br />
In case of error, the body of the response will contain a JSON object with additional error details.
The object has the following attributes:
<br />
- *error*: Boolean flag to indicate that an error occurred (true in this case)
- *code*: The HTTP status code
- *errorNum*: The server error number
- *errorMessage*: A descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
Returned if the user can be added by the server
<br />
@RESTRETURNCODE{400}
If the JSON representation is malformed or mandatory data is missing from the request.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/user/app.js -->
@startDocuBlock JSF_api_user_replace

@brief replace an existing user with a new one.
<br />
@RESTHEADER{PUT /_api/user/{user}, Replace User}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{user,string,required}
The name of the user
<br />
@RESTDESCRIPTION
<br />
Replaces the data of an existing user. The name of an existing user must be specified in user.
<br />
The following data can to be passed in a JSON representation in the body of the POST request:
<br />
- *passwd*: The user password as a string. Specifying a password is mandatory,
  but the empty string is allowed for passwords
- *active*: An optional flag that specifies whether the user is active.
  If not specified, this will default to true
- *extra*: An optional JSON object with arbitrary extra data about the user
- *changePassword*: An optional flag that specifies whether the user must change
  the password or not. If not specified, this will default to false
<br />
If the user can be replaced by the server, the server will respond with HTTP 200.
<br />
In case of success, the returned JSON object has the following properties:
<br />
- *error*: Boolean flag to indicate that an error occurred (false in this case)
- *code*: The HTTP status code
<br />
In case of error, the body of the response will contain a JSON object with additional
error details. The object has the following attributes:
<br />
- *error*: Boolean flag to indicate that an error occurred (true in this case)
- *code*: The HTTP status code
- *errorNum*: The server error number
- *errorMessage*: A descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the user data can be replaced by the server
<br />
@RESTRETURNCODE{400}
The JSON representation is malformed or mandatory data is missing from the request
<br />
@RESTRETURNCODE{404}
The specified user does not exist
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/user/app.js -->
@startDocuBlock JSF_api_user_update

@brief modify attributes of an existing user
<br />
@RESTHEADER{PATCH /_api/user/{user}, Update User}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{user,string,required}
The name of the user
<br />
@RESTDESCRIPTION
<br />
Partially updates the data of an existing user. The name of an existing
user must be specified in *user*.
<br />
The following data can be passed in a JSON representation in the body of the
POST request:
<br />
- *passwd*: The user password as a string. Specifying a password is optional.
  If not specified, the previously existing value will not be modified.
- *active*: An optional flag that specifies whether the user is active.
  If not specified, the previously existing value will not be modified.
- *extra*: An optional JSON object with arbitrary extra data about the user.
  If not specified, the previously existing value will not be modified.
- *changePassword*: An optional flag that specifies whether the user must change
  the password or not. If not specified, the previously existing value will not be modified.
<br />
If the user can be updated by the server, the server will respond with HTTP 200.
<br />
In case of success, the returned JSON object has the following properties:
<br />
- *error*: Boolean flag to indicate that an error occurred (false in this case)
- *code*: The HTTP status code
<br />
In case of error, the body of the response will contain a JSON object with additional error details.
The object has the following attributes:
<br />
- *error*: Boolean flag to indicate that an error occurred (true in this case)
- *code*: The HTTP status code
- *errorNum*: The server error number
- *errorMessage*: A descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the user data can be replaced by the server
<br />
@RESTRETURNCODE{400}
The JSON representation is malformed or mandatory data is missing from the request
<br />
@RESTRETURNCODE{404}
The specified user does not exist
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_api/user/app.js -->
@startDocuBlock JSF_api_user_delete

@brief delete a user permanently.
<br />
@RESTHEADER{DELETE /_api/user/{user}, Remove User}
<br />
@RESTURLPARAMETERS
<br />
@RESTURLPARAM{user,string,required}
The name of the user
<br />
@RESTDESCRIPTION
<br />
Removes an existing user, identified by *user*.
<br />
If the user can be removed, the server will respond with HTTP 202.
In case of success, the returned JSON object has the following properties:
<br />
- *error*: Boolean flag to indicate that an error occurred (false in this case)
- *code*: The HTTP status code
<br />
In case of error, the body of the response will contain a JSON object with additional error details.
The object has the following attributes:
<br />
- *error*: Boolean flag to indicate that an error occurred (true in this case)
- *code*: The HTTP status code
- *errorNum*: The server error number
- *errorMessage*: A descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{202}
Is returned if the user was removed by the server
<br />
@RESTRETURNCODE{404}
The specified user does not exist
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_get_admin_time

@brief Get the current time of the system
<br />
@RESTHEADER{GET /_admin/time, Return system time}
<br />
@RESTDESCRIPTION
<br />
The call returns an object with the attribute *time*. This contains the
current system time as a Unix timestamp with microsecond precision.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Time was returned successfully.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_get_admin_sleep

@brief Suspend the execution for a specified duration before returnig
<br />
@RESTHEADER{GET /_admin/sleep, Sleep for a specified amount of seconds}
<br />
@RESTQUERYPARAMETERS
<br />
@RESTURLPARAM{duration,integer,required}
wait `duration` seconds until the reply is sent.
<br />
@RESTDESCRIPTION
<br />
The call returns an object with the attribute *duration*. This takes
as many seconds as the duration argument says.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Sleep was conducted successfully.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_get_admin_echo

@brief Send back what was sent in, headers, post body etc.
<br />
@RESTHEADER{GET /_admin/echo, Return current request}
<br />
@RESTDESCRIPTION
<br />
The call returns an object with the following attributes:
<br />
- *headers*: object with HTTP headers received
<br />
- *requestType*: the HTTP request method (e.g. GET)
<br />
- *parameters*: object with query parameters received
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Echo was returned successfully.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_get_admin_long_echo

@brief Send back what was sent in, headers, post body etc.
<br />
@RESTHEADER{GET /_admin/long_echo, Return current request and continues}
<br />
@RESTDESCRIPTION
<br />
The call returns an object with the following attributes:
<br />
- *headers*: object with HTTP headers received
<br />
- *requestType*: the HTTP request method (e.g. GET)
<br />
- *parameters*: object with query parameters received
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Echo was returned successfully.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_get_admin_statistics

@brief return the statistics information
<br />
@RESTHEADER{GET /_admin/statistics, Read the statistics}
<br />
@RESTDESCRIPTION
<br />
Returns the statistics information. The returned object contains the
statistics figures grouped together according to the description returned by
*_admin/statistics-description*. For instance, to access a figure *userTime*
from the group *system*, you first select the sub-object describing the
group stored in *system* and in that sub-object the value for *userTime* is
stored in the attribute of the same name.
<br />
In case of a distribution, the returned object contains the total count in
*count* and the distribution list in *counts*. The sum (or total) of the
individual values is returned in *sum*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Statistics were returned successfully.
<br />
@EXAMPLES
<br />

<div id="RestAdminStatistics1_container">
<div id="RestAdminStatistics1_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_admin/statistics

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"time"</span> : <span class="hljs-number">1468399062.734535</span>, 
  <span class="hljs-string">"system"</span> : { 
    <span class="hljs-string">"minorPageFaults"</span> : <span class="hljs-number">43478</span>, 
    <span class="hljs-string">"majorPageFaults"</span> : <span class="hljs-number">2679</span>, 
    <span class="hljs-string">"userTime"</span> : <span class="hljs-number">2.263353</span>, 
    <span class="hljs-string">"systemTime"</span> : <span class="hljs-number">1.720857</span>, 
    <span class="hljs-string">"numberOfThreads"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"residentSize"</span> : <span class="hljs-number">117440512</span>, 
    <span class="hljs-string">"residentSizePercent"</span> : <span class="hljs-number">0.0068359375</span>, 
    <span class="hljs-string">"virtualSize"</span> : <span class="hljs-number">5014142976</span> 
  }, 
  <span class="hljs-string">"client"</span> : { 
    <span class="hljs-string">"httpConnections"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"connectionTime"</span> : { 
      <span class="hljs-string">"sum"</span> : <span class="hljs-number">0.0011970996856689453</span>, 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">1</span>, 
      <span class="hljs-string">"counts"</span> : [ 
        <span class="hljs-number">1</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    <span class="hljs-string">"totalTime"</span> : { 
      <span class="hljs-string">"sum"</span> : <span class="hljs-number">1.4598212242126465</span>, 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">3722</span>, 
      <span class="hljs-string">"counts"</span> : [ 
        <span class="hljs-number">3716</span>, 
        <span class="hljs-number">4</span>, 
        <span class="hljs-number">2</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    <span class="hljs-string">"requestTime"</span> : { 
      <span class="hljs-string">"sum"</span> : <span class="hljs-number">1.2674455642700195</span>, 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">3722</span>, 
      <span class="hljs-string">"counts"</span> : [ 
        <span class="hljs-number">3716</span>, 
        <span class="hljs-number">4</span>, 
        <span class="hljs-number">2</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    <span class="hljs-string">"queueTime"</span> : { 
      <span class="hljs-string">"sum"</span> : <span class="hljs-number">0.0232999324798584</span>, 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">3700</span>, 
      <span class="hljs-string">"counts"</span> : [ 
        <span class="hljs-number">3700</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    <span class="hljs-string">"ioTime"</span> : { 
      <span class="hljs-string">"sum"</span> : <span class="hljs-number">0.16907572746276855</span>, 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">3722</span>, 
      <span class="hljs-string">"counts"</span> : [ 
        <span class="hljs-number">3722</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    <span class="hljs-string">"bytesSent"</span> : { 
      <span class="hljs-string">"sum"</span> : <span class="hljs-number">1738782</span>, 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">3722</span>, 
      <span class="hljs-string">"counts"</span> : [ 
        <span class="hljs-number">414</span>, 
        <span class="hljs-number">3040</span>, 
        <span class="hljs-number">19</span>, 
        <span class="hljs-number">249</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span> 
      ] 
    }, 
    <span class="hljs-string">"bytesReceived"</span> : { 
      <span class="hljs-string">"sum"</span> : <span class="hljs-number">834494</span>, 
      <span class="hljs-string">"count"</span> : <span class="hljs-number">3722</span>, 
      <span class="hljs-string">"counts"</span> : [ 
        <span class="hljs-number">3458</span>, 
        <span class="hljs-number">264</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span>, 
        <span class="hljs-number">0</span> 
      ] 
    } 
  }, 
  <span class="hljs-string">"http"</span> : { 
    <span class="hljs-string">"requestsTotal"</span> : <span class="hljs-number">3734</span>, 
    <span class="hljs-string">"requestsAsync"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"requestsGet"</span> : <span class="hljs-number">668</span>, 
    <span class="hljs-string">"requestsHead"</span> : <span class="hljs-number">71</span>, 
    <span class="hljs-string">"requestsPost"</span> : <span class="hljs-number">2728</span>, 
    <span class="hljs-string">"requestsPut"</span> : <span class="hljs-number">120</span>, 
    <span class="hljs-string">"requestsPatch"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"requestsDelete"</span> : <span class="hljs-number">143</span>, 
    <span class="hljs-string">"requestsOptions"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"requestsOther"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"server"</span> : { 
    <span class="hljs-string">"uptime"</span> : <span class="hljs-number">8.452450037002563</span>, 
    <span class="hljs-string">"physicalMemory"</span> : <span class="hljs-number">17179869184</span> 
  }, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestAdminStatistics1_short" onclick="$('#RestAdminStatistics1_short').hide(); $('#RestAdminStatistics1_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_admin/statistics

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_get_admin_statistics_description

@brief fetch descriptive info of statistics
<br />
@RESTHEADER{GET /_admin/statistics-description, Statistics description}
<br />
@RESTDESCRIPTION
<br />
Returns a description of the statistics returned by */_admin/statistics*.
The returned objects contains an array of statistics groups in the attribute
*groups* and an array of statistics figures in the attribute *figures*.
<br />
A statistics group is described by
<br />
- *group*: The identifier of the group.
- *name*: The name of the group.
- *description*: A description of the group.
<br />
A statistics figure is described by
<br />
- *group*: The identifier of the group to which this figure belongs.
- *identifier*: The identifier of the figure. It is unique within the group.
- *name*: The name of the figure.
- *description*: A description of the figure.
- *type*: Either *current*, *accumulated*, or *distribution*.
- *cuts*: The distribution vector.
- *units*: Units in which the figure is measured.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Description was returned successfully.
<br />
@EXAMPLES
<br />

<div id="RestAdminStatisticsDescription1_container">
<div id="RestAdminStatisticsDescription1_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_admin/statistics-description

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"groups"</span> : [ 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Process Statistics"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Statistics about the ArangoDB process"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Client Connection Statistics"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Statistics about the connections."</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP Request Statistics"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Statistics about the HTTP requests."</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"server"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Server Statistics"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Statistics about the ArangoDB server"</span> 
    } 
  ], 
  <span class="hljs-string">"figures"</span> : [ 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"userTime"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"User Time"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Amount of time that this process has been scheduled in user mode, measured in seconds."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"seconds"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"systemTime"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"System Time"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Amount of time that this process has been scheduled in kernel mode, measured in seconds."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"seconds"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"numberOfThreads"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Number of Threads"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of threads in the arangod process."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"current"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"residentSize"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Resident Set Size"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"The total size of the number of pages the process has in real memory. This is just the pages which count toward text, data, or stack space. This does not include pages which have not been demand-loaded in, or which are swapped out. The resident set size is reported in bytes."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"current"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"bytes"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"residentSizePercent"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Resident Set Size"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"The percentage of physical memory used by the process as resident set size."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"current"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"percent"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"virtualSize"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Virtual Memory Size"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"On Windows, this figure contains the total amount of memory that the memory manager has committed for the arangod process. On other systems, this figure contains The size of the virtual memory the process is using."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"current"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"bytes"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"minorPageFaults"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Minor Page Faults"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"The number of minor faults the process has made which have not required loading a memory page from disk. This figure is not reported on Windows."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"system"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"majorPageFaults"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Major Page Faults"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"On Windows, this figure contains the total number of page faults. On other system, this figure contains the number of major faults the process has made which have required loading a memory page from disk."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"httpConnections"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Client Connections"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"The number of connections that are currently open."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"current"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"totalTime"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Total Time"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Total time needed to answer a request."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"distribution"</span>, 
      <span class="hljs-string">"cuts"</span> : [ 
        <span class="hljs-number">0.01</span>, 
        <span class="hljs-number">0.05</span>, 
        <span class="hljs-number">0.1</span>, 
        <span class="hljs-number">0.2</span>, 
        <span class="hljs-number">0.5</span>, 
        <span class="hljs-number">1</span> 
      ], 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"seconds"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestTime"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Request Time"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Request time needed to answer a request."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"distribution"</span>, 
      <span class="hljs-string">"cuts"</span> : [ 
        <span class="hljs-number">0.01</span>, 
        <span class="hljs-number">0.05</span>, 
        <span class="hljs-number">0.1</span>, 
        <span class="hljs-number">0.2</span>, 
        <span class="hljs-number">0.5</span>, 
        <span class="hljs-number">1</span> 
      ], 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"seconds"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"queueTime"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Queue Time"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Queue time needed to answer a request."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"distribution"</span>, 
      <span class="hljs-string">"cuts"</span> : [ 
        <span class="hljs-number">0.01</span>, 
        <span class="hljs-number">0.05</span>, 
        <span class="hljs-number">0.1</span>, 
        <span class="hljs-number">0.2</span>, 
        <span class="hljs-number">0.5</span>, 
        <span class="hljs-number">1</span> 
      ], 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"seconds"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"bytesSent"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bytes Sent"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Bytes sents for a request."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"distribution"</span>, 
      <span class="hljs-string">"cuts"</span> : [ 
        <span class="hljs-number">250</span>, 
        <span class="hljs-number">1000</span>, 
        <span class="hljs-number">2000</span>, 
        <span class="hljs-number">5000</span>, 
        <span class="hljs-number">10000</span> 
      ], 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"bytes"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"bytesReceived"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bytes Received"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Bytes receiveds for a request."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"distribution"</span>, 
      <span class="hljs-string">"cuts"</span> : [ 
        <span class="hljs-number">250</span>, 
        <span class="hljs-number">1000</span>, 
        <span class="hljs-number">2000</span>, 
        <span class="hljs-number">5000</span>, 
        <span class="hljs-number">10000</span> 
      ], 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"bytes"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"client"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"connectionTime"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Connection Time"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Total connection time of a client."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"distribution"</span>, 
      <span class="hljs-string">"cuts"</span> : [ 
        <span class="hljs-number">0.1</span>, 
        <span class="hljs-number">1</span>, 
        <span class="hljs-number">60</span> 
      ], 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"seconds"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsTotal"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Total requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Total number of HTTP requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsAsync"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Async requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of asynchronously executed HTTP requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsGet"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP GET requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of HTTP GET requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsHead"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP HEAD requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of HTTP HEAD requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsPost"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP POST requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of HTTP POST requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsPut"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP PUT requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of HTTP PUT requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsPatch"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP PATCH requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of HTTP PATCH requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsDelete"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP DELETE requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of HTTP DELETE requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsOptions"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"HTTP OPTIONS requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of HTTP OPTIONS requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"http"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"requestsOther"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"other HTTP requests"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of other HTTP requests."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"accumulated"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"number"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"server"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"uptime"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Server Uptime"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Number of seconds elapsed since server start."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"current"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"seconds"</span> 
    }, 
    { 
      <span class="hljs-string">"group"</span> : <span class="hljs-string">"server"</span>, 
      <span class="hljs-string">"identifier"</span> : <span class="hljs-string">"physicalMemory"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Physical Memory"</span>, 
      <span class="hljs-string">"description"</span> : <span class="hljs-string">"Physical memory in bytes."</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"current"</span>, 
      <span class="hljs-string">"units"</span> : <span class="hljs-string">"bytes"</span> 
    } 
  ], 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestAdminStatisticsDescription1_short" onclick="$('#RestAdminStatisticsDescription1_short').hide(); $('#RestAdminStatisticsDescription1_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_admin/statistics-description

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_post_admin_test

@brief show the available unittests on the server.
<br />
@RESTHEADER{POST /_admin/test, Runs tests on server}
<br />
@RESTALLBODYPARAM{body,object,required}
A JSON object containing an attribute *tests* which lists the files
containing the test suites.
<br />
@RESTDESCRIPTION
<br />
Executes the specified tests on the server and returns an object with the
test results. The object has an attribute "error" which states whether
any error occurred. The object also has an attribute "passed" which
indicates which tests passed and which did not.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/app.js -->
@startDocuBlock JSF_post_admin_execute

@brief Execute a script on the server.
<br />
@RESTHEADER{POST /_admin/execute, Execute program}
<br />
@RESTALLBODYPARAM{body,string,required}
The body to be executed.
<br />
@RESTDESCRIPTION
<br />
Executes the javascript code in the body on the server as the body
of a function with no arguments. If you have a *return* statement
then the return value you produce will be returned as content type
*application/json*. If the parameter *returnAsJSON* is set to
*true*, the result will be a JSON object describing the return value
directly, otherwise a string produced by JSON.stringify will be
returned.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/server/app.js -->
@startDocuBlock JSF_get_admin_server_role

@brief Get to know whether this server is a Coordinator or DB-Server
<br />
@RESTHEADER{GET /_admin/server/role, Return role of a server in a cluster}
<br />
@RESTDESCRIPTION
<br />
Returns the role of a server in a cluster.
The role is returned in the *role* attribute of the result.
Possible return values for *role* are:
- *COORDINATOR*: the server is a coordinator in a cluster
- *PRIMARY*: the server is a primary database server in a cluster
- *SECONDARY*: the server is a secondary database server in a cluster
- *UNDEFINED*: in a cluster, *UNDEFINED* is returned if the server role cannot be
   determined. On a single server, *UNDEFINED* is the only possible return
   value.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned in all cases.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/wal/app.js -->
@startDocuBlock JSF_put_admin_wal_flush

@brief Sync the WAL to disk.
<br />
@RESTHEADER{PUT /_admin/wal/flush, Flushes the write-ahead log}
<br />
@RESTURLPARAMETERS
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Whether or not the operation should block until the not-yet synchronized
data in the write-ahead log was synchronized to disk.
<br />
@RESTQUERYPARAM{waitForCollector,boolean,optional}
Whether or not the operation should block until the data in the flushed
log has been collected by the write-ahead log garbage collector. Note that
setting this option to *true* might block for a long time if there are
long-running transactions and the write-ahead log garbage collector cannot
finish garbage collection.
<br />
@RESTDESCRIPTION
<br />
Flushes the write-ahead log. By flushing the currently active write-ahead
logfile, the data in it can be transferred to collection journals and
datafiles. This is useful to ensure that all data for a collection is
present in the collection journals and datafiles, for example, when dumping
the data of a collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/wal/app.js -->
@startDocuBlock JSF_put_admin_wal_properties

@brief configure parameters of the wal
<br />
@RESTHEADER{PUT /_admin/wal/properties, Configures the write-ahead log}
<br />
@RESTDESCRIPTION
<br />
Configures the behavior of the write-ahead log. The body of the request
must be a JSON object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
Specifying any of the above attributes is optional. Not specified attributes
will be ignored and the configuration for them will not be modified.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/wal/app.js -->
/*jshint strict: false */

<br />
@brief administration actions
<br />
@file
<br />
DISCLAIMER
<br />
Copyright 2014-2015 ArangoDB GmbH, Cologne, Germany
<br />
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<br />
    http://www.apache.org/licenses/LICENSE-2.0
<br />
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
<br />
Copyright holder is ArangoDB GmbH, Cologne, Germany
<br />
@author Dr. Frank Celler
@author Copyright 2014-2015, ArangoDB GmbH, Cologne, Germany
@author Copyright 2012-2014, triAGENS GmbH, Cologne, Germany
<br />

var internal = require("internal");
var actions = require("org/arangodb/actions");

// -----------------------------------------------------------------------------
// --SECTION--                                                  public functions
// -----------------------------------------------------------------------------

<br />
@startDocuBlock JSF_put_admin_wal_flush

@brief Sync the WAL to disk.
<br />
@RESTHEADER{PUT /_admin/wal/flush, Flushes the write-ahead log}
<br />
@RESTURLPARAMETERS
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Whether or not the operation should block until the not-yet synchronized
data in the write-ahead log was synchronized to disk.
<br />
@RESTQUERYPARAM{waitForCollector,boolean,optional}
Whether or not the operation should block until the data in the flushed
log has been collected by the write-ahead log garbage collector. Note that
setting this option to *true* might block for a long time if there are
long-running transactions and the write-ahead log garbage collector cannot
finish garbage collection.
<br />
@RESTDESCRIPTION
<br />
Flushes the write-ahead log. By flushing the currently active write-ahead
logfile, the data in it can be transferred to collection journals and
datafiles. This is useful to ensure that all data for a collection is
present in the collection journals and datafiles, for example, when dumping
the data of a collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />

actions.defineHttp({
  url : "_admin/wal/flush",
  prefix : false,

  callback : function (req, res) {
    if (req.requestType !== actions.PUT) {
      actions.resultUnsupported(req, res);
      return;
    }
      
    var body = actions.getJsonBody(req, res);
    if (body === undefined) {
      return;
    }

    var getParam = function (name) {
      // first check body value
      if (body.hasOwnProperty(name)) {
        return body[name];
      }

      // need to handle strings because parameter values are strings
      return (req.parameters.hasOwnProperty(name) &&
              (req.parameters[name] === "true" || req.parameters[name] === true));
    };
    
    internal.wal.flush({ 
      waitForSync:           getParam("waitForSync"),
      waitForCollector:      getParam("waitForCollector")
    });

    actions.resultOk(req, res, actions.HTTP_OK);
  }
});

<br />
@startDocuBlock JSF_put_admin_wal_properties

@brief configure parameters of the wal
<br />
@RESTHEADER{PUT /_admin/wal/properties, Configures the write-ahead log}
<br />
@RESTDESCRIPTION
<br />
Configures the behavior of the write-ahead log. The body of the request
must be a JSON object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
Specifying any of the above attributes is optional. Not specified attributes
will be ignored and the configuration for them will not be modified.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />
@EXAMPLES
<br />

<div id="RestWalPropertiesPut_container">
<div id="RestWalPropertiesPut_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_admin/wal/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"historicLogfiles"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"reserveLogfiles"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"syncInterval"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"throttleWait"</span> : <span class="hljs-number">15000</span>, 
  <span class="hljs-string">"throttleWhenPending"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestWalPropertiesPut_short" onclick="$('#RestWalPropertiesPut_short').hide(); $('#RestWalPropertiesPut_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_admin/wal/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/wal/app.js -->
@startDocuBlock JSF_get_admin_wal_properties

@brief fetch the current configuration.
<br />
@RESTHEADER{GET /_admin/wal/properties, Retrieves the configuration of the write-ahead log}
<br />
@RESTDESCRIPTION
<br />
Retrieves the configuration of the write-ahead log. The result is a JSON
object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *syncInterval*: the interval for automatic synchronization of not-yet
  synchronized write-ahead log data (in milliseconds)
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/wal/app.js -->
/*jshint strict: false */

<br />
@brief administration actions
<br />
@file
<br />
DISCLAIMER
<br />
Copyright 2014-2015 ArangoDB GmbH, Cologne, Germany
<br />
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<br />
    http://www.apache.org/licenses/LICENSE-2.0
<br />
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
<br />
Copyright holder is ArangoDB GmbH, Cologne, Germany
<br />
@author Dr. Frank Celler
@author Copyright 2014-2015, ArangoDB GmbH, Cologne, Germany
@author Copyright 2012-2014, triAGENS GmbH, Cologne, Germany
<br />

var internal = require("internal");
var actions = require("org/arangodb/actions");

// -----------------------------------------------------------------------------
// --SECTION--                                                  public functions
// -----------------------------------------------------------------------------

<br />
@startDocuBlock JSF_put_admin_wal_flush

@brief Sync the WAL to disk.
<br />
@RESTHEADER{PUT /_admin/wal/flush, Flushes the write-ahead log}
<br />
@RESTURLPARAMETERS
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Whether or not the operation should block until the not-yet synchronized
data in the write-ahead log was synchronized to disk.
<br />
@RESTQUERYPARAM{waitForCollector,boolean,optional}
Whether or not the operation should block until the data in the flushed
log has been collected by the write-ahead log garbage collector. Note that
setting this option to *true* might block for a long time if there are
long-running transactions and the write-ahead log garbage collector cannot
finish garbage collection.
<br />
@RESTDESCRIPTION
<br />
Flushes the write-ahead log. By flushing the currently active write-ahead
logfile, the data in it can be transferred to collection journals and
datafiles. This is useful to ensure that all data for a collection is
present in the collection journals and datafiles, for example, when dumping
the data of a collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />

actions.defineHttp({
  url : "_admin/wal/flush",
  prefix : false,

  callback : function (req, res) {
    if (req.requestType !== actions.PUT) {
      actions.resultUnsupported(req, res);
      return;
    }
      
    var body = actions.getJsonBody(req, res);
    if (body === undefined) {
      return;
    }

    var getParam = function (name) {
      // first check body value
      if (body.hasOwnProperty(name)) {
        return body[name];
      }

      // need to handle strings because parameter values are strings
      return (req.parameters.hasOwnProperty(name) &&
              (req.parameters[name] === "true" || req.parameters[name] === true));
    };
    
    internal.wal.flush({ 
      waitForSync:           getParam("waitForSync"),
      waitForCollector:      getParam("waitForCollector")
    });

    actions.resultOk(req, res, actions.HTTP_OK);
  }
});

<br />
@startDocuBlock JSF_put_admin_wal_properties

@brief configure parameters of the wal
<br />
@RESTHEADER{PUT /_admin/wal/properties, Configures the write-ahead log}
<br />
@RESTDESCRIPTION
<br />
Configures the behavior of the write-ahead log. The body of the request
must be a JSON object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
Specifying any of the above attributes is optional. Not specified attributes
will be ignored and the configuration for them will not be modified.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />
@EXAMPLES
<br />

<div id="RestWalPropertiesPut_container">
<div id="RestWalPropertiesPut_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_admin/wal/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"historicLogfiles"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"reserveLogfiles"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"syncInterval"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"throttleWait"</span> : <span class="hljs-number">15000</span>, 
  <span class="hljs-string">"throttleWhenPending"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestWalPropertiesPut_short" onclick="$('#RestWalPropertiesPut_short').hide(); $('#RestWalPropertiesPut_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_admin/wal/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock

<br />

<br />
@startDocuBlock JSF_get_admin_wal_properties

@brief fetch the current configuration.
<br />
@RESTHEADER{GET /_admin/wal/properties, Retrieves the configuration of the write-ahead log}
<br />
@RESTDESCRIPTION
<br />
Retrieves the configuration of the write-ahead log. The result is a JSON
object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *syncInterval*: the interval for automatic synchronization of not-yet
  synchronized write-ahead log data (in milliseconds)
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />
@EXAMPLES
<br />

<div id="RestWalPropertiesGet_container">
<div id="RestWalPropertiesGet_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_admin/wal/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"historicLogfiles"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"reserveLogfiles"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"syncInterval"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"throttleWait"</span> : <span class="hljs-number">15000</span>, 
  <span class="hljs-string">"throttleWhenPending"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestWalPropertiesGet_short" onclick="$('#RestWalPropertiesGet_short').hide(); $('#RestWalPropertiesGet_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_admin/wal/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/wal/app.js -->
@startDocuBlock JSF_get_admin_wal_transactions

@brief returns information about the currently running transactions
<br />
@RESTHEADER{GET /_admin/wal/transactions, Returns information about the currently running transactions}
<br />
@RESTDESCRIPTION
<br />
Returns information about the currently running transactions. The result
is a JSON object with the following attributes:
- *runningTransactions*: number of currently running transactions
- *minLastCollected*: minimum id of the last collected logfile (at the
  start of each running transaction). This is *null* if no transaction is
  running.
- *minLastSealed*: minimum id of the last sealed logfile (at the
  start of each running transaction). This is *null* if no transaction is
  running.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/wal/app.js -->
/*jshint strict: false */

<br />
@brief administration actions
<br />
@file
<br />
DISCLAIMER
<br />
Copyright 2014-2015 ArangoDB GmbH, Cologne, Germany
<br />
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<br />
    http://www.apache.org/licenses/LICENSE-2.0
<br />
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
<br />
Copyright holder is ArangoDB GmbH, Cologne, Germany
<br />
@author Dr. Frank Celler
@author Copyright 2014-2015, ArangoDB GmbH, Cologne, Germany
@author Copyright 2012-2014, triAGENS GmbH, Cologne, Germany
<br />

var internal = require("internal");
var actions = require("org/arangodb/actions");

// -----------------------------------------------------------------------------
// --SECTION--                                                  public functions
// -----------------------------------------------------------------------------

<br />
@startDocuBlock JSF_put_admin_wal_flush

@brief Sync the WAL to disk.
<br />
@RESTHEADER{PUT /_admin/wal/flush, Flushes the write-ahead log}
<br />
@RESTURLPARAMETERS
<br />
@RESTQUERYPARAM{waitForSync,boolean,optional}
Whether or not the operation should block until the not-yet synchronized
data in the write-ahead log was synchronized to disk.
<br />
@RESTQUERYPARAM{waitForCollector,boolean,optional}
Whether or not the operation should block until the data in the flushed
log has been collected by the write-ahead log garbage collector. Note that
setting this option to *true* might block for a long time if there are
long-running transactions and the write-ahead log garbage collector cannot
finish garbage collection.
<br />
@RESTDESCRIPTION
<br />
Flushes the write-ahead log. By flushing the currently active write-ahead
logfile, the data in it can be transferred to collection journals and
datafiles. This is useful to ensure that all data for a collection is
present in the collection journals and datafiles, for example, when dumping
the data of a collection.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />

actions.defineHttp({
  url : "_admin/wal/flush",
  prefix : false,

  callback : function (req, res) {
    if (req.requestType !== actions.PUT) {
      actions.resultUnsupported(req, res);
      return;
    }
      
    var body = actions.getJsonBody(req, res);
    if (body === undefined) {
      return;
    }

    var getParam = function (name) {
      // first check body value
      if (body.hasOwnProperty(name)) {
        return body[name];
      }

      // need to handle strings because parameter values are strings
      return (req.parameters.hasOwnProperty(name) &&
              (req.parameters[name] === "true" || req.parameters[name] === true));
    };
    
    internal.wal.flush({ 
      waitForSync:           getParam("waitForSync"),
      waitForCollector:      getParam("waitForCollector")
    });

    actions.resultOk(req, res, actions.HTTP_OK);
  }
});

<br />
@startDocuBlock JSF_put_admin_wal_properties

@brief configure parameters of the wal
<br />
@RESTHEADER{PUT /_admin/wal/properties, Configures the write-ahead log}
<br />
@RESTDESCRIPTION
<br />
Configures the behavior of the write-ahead log. The body of the request
must be a JSON object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
Specifying any of the above attributes is optional. Not specified attributes
will be ignored and the configuration for them will not be modified.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />
@EXAMPLES
<br />

<div id="RestWalPropertiesPut_container">
<div id="RestWalPropertiesPut_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_admin/wal/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"historicLogfiles"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"reserveLogfiles"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"syncInterval"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"throttleWait"</span> : <span class="hljs-number">15000</span>, 
  <span class="hljs-string">"throttleWhenPending"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestWalPropertiesPut_short" onclick="$('#RestWalPropertiesPut_short').hide(); $('#RestWalPropertiesPut_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_admin/wal/properties &lt;&lt;EOF
{ 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock

<br />

<br />
@startDocuBlock JSF_get_admin_wal_properties

@brief fetch the current configuration.
<br />
@RESTHEADER{GET /_admin/wal/properties, Retrieves the configuration of the write-ahead log}
<br />
@RESTDESCRIPTION
<br />
Retrieves the configuration of the write-ahead log. The result is a JSON
object with the following attributes:
- *allowOversizeEntries*: whether or not operations that are bigger than a
  single logfile can be executed and stored
- *logfileSize*: the size of each write-ahead logfile
- *historicLogfiles*: the maximum number of historic logfiles to keep
- *reserveLogfiles*: the maximum number of reserve logfiles that ArangoDB
  allocates in the background
- *syncInterval*: the interval for automatic synchronization of not-yet
  synchronized write-ahead log data (in milliseconds)
- *throttleWait*: the maximum wait time that operations will wait before
  they get aborted if case of write-throttling (in milliseconds)
- *throttleWhenPending*: the number of unprocessed garbage-collection
  operations that, when reached, will activate write-throttling. A value of
  *0* means that write-throttling will not be triggered.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />
@EXAMPLES
<br />

<div id="RestWalPropertiesGet_container">
<div id="RestWalPropertiesGet_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_admin/wal/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"allowOversizeEntries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"logfileSize"</span> : <span class="hljs-number">33554432</span>, 
  <span class="hljs-string">"historicLogfiles"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"reserveLogfiles"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"syncInterval"</span> : <span class="hljs-number">100</span>, 
  <span class="hljs-string">"throttleWait"</span> : <span class="hljs-number">15000</span>, 
  <span class="hljs-string">"throttleWhenPending"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestWalPropertiesGet_short" onclick="$('#RestWalPropertiesGet_short').hide(); $('#RestWalPropertiesGet_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_admin/wal/properties

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock

<br />

actions.defineHttp({
  url : "_admin/wal/properties",
  prefix : false,

  callback : function (req, res) {
    var result;

    if (req.requestType === actions.PUT) {
      var body = actions.getJsonBody(req, res);
      if (body === undefined) {
        return;
      }

      result = internal.wal.properties(body);
      actions.resultOk(req, res, actions.HTTP_OK, result);
    }
    else if (req.requestType === actions.GET) {
      result = internal.wal.properties();
      actions.resultOk(req, res, actions.HTTP_OK, result);
    }
    else {
      actions.resultUnsupported(req, res);
    }
  }
});

<br />
@startDocuBlock JSF_get_admin_wal_transactions

@brief returns information about the currently running transactions
<br />
@RESTHEADER{GET /_admin/wal/transactions, Returns information about the currently running transactions}
<br />
@RESTDESCRIPTION
<br />
Returns information about the currently running transactions. The result
is a JSON object with the following attributes:
- *runningTransactions*: number of currently running transactions
- *minLastCollected*: minimum id of the last collected logfile (at the
  start of each running transaction). This is *null* if no transaction is
  running.
- *minLastSealed*: minimum id of the last sealed logfile (at the
  start of each running transaction). This is *null* if no transaction is
  running.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the operation succeeds.
<br />
@RESTRETURNCODE{405}
is returned when an invalid HTTP method is used.
@endDocuBlock

<br />
@EXAMPLES
<br />

<div id="RestWalTransactionsGet_container">
<div id="RestWalTransactionsGet_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_admin/wal/transactions

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"runningTransactions"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"minLastCollected"</span> : <span class="hljs-literal">null</span>, 
  <span class="hljs-string">"minLastSealed"</span> : <span class="hljs-literal">null</span>, 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="RestWalTransactionsGet_short" onclick="$('#RestWalTransactionsGet_short').hide(); $('#RestWalTransactionsGet_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_admin/wal/transactions

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/routing/app.js -->
@startDocuBlock JSF_get_admin_routing_reloads

@brief Reload the routing table.
<br />
@RESTHEADER{POST /_admin/routing/reload, Reloads the routing information}
<br />
@RESTDESCRIPTION
<br />
Reloads the routing information from the collection *routing*.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Routing information was reloaded successfully.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/actions/_admin/database/app.js -->
@startDocuBlock JSF_get_admin_database_version

@brief returns the version of the database.
<br />
@RESTHEADER{GET /_admin/database/target-version, Return the required version of the database}
<br />
@RESTDESCRIPTION
<br />
Returns the database-version that this server requires.
The version is returned in the *version* attribute of the result.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned in all cases.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_list_http_examples

@brief Lists all graphs known to the graph module.
<br />
@RESTHEADER{GET /_api/gharial, List all graphs}
<br />
@RESTDESCRIPTION
Lists all graph names stored in this database.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the module is available and the graphs could be listed.
<br />
@EXAMPLES
<br />

<div id="HttpGharialList_container">
<div id="HttpGharialList_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"graphs"</span> : [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/social"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"social"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"577259649"</span>, 
      <span class="hljs-string">"edgeDefinitions"</span> : [ 
        { 
          <span class="hljs-string">"collection"</span> : <span class="hljs-string">"relation"</span>, 
          <span class="hljs-string">"from"</span> : [ 
            <span class="hljs-string">"female"</span>, 
            <span class="hljs-string">"male"</span> 
          ], 
          <span class="hljs-string">"to"</span> : [ 
            <span class="hljs-string">"female"</span>, 
            <span class="hljs-string">"male"</span> 
          ] 
        } 
      ], 
      <span class="hljs-string">"orphanCollections"</span> : [ ] 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/routeplanner"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"routeplanner"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"580339841"</span>, 
      <span class="hljs-string">"orphanCollections"</span> : [ ], 
      <span class="hljs-string">"edgeDefinitions"</span> : [ 
        { 
          <span class="hljs-string">"collection"</span> : <span class="hljs-string">"germanHighway"</span>, 
          <span class="hljs-string">"from"</span> : [ 
            <span class="hljs-string">"germanCity"</span> 
          ], 
          <span class="hljs-string">"to"</span> : [ 
            <span class="hljs-string">"germanCity"</span> 
          ] 
        }, 
        { 
          <span class="hljs-string">"collection"</span> : <span class="hljs-string">"frenchHighway"</span>, 
          <span class="hljs-string">"from"</span> : [ 
            <span class="hljs-string">"frenchCity"</span> 
          ], 
          <span class="hljs-string">"to"</span> : [ 
            <span class="hljs-string">"frenchCity"</span> 
          ] 
        }, 
        { 
          <span class="hljs-string">"collection"</span> : <span class="hljs-string">"internationalHighway"</span>, 
          <span class="hljs-string">"from"</span> : [ 
            <span class="hljs-string">"frenchCity"</span>, 
            <span class="hljs-string">"germanCity"</span> 
          ], 
          <span class="hljs-string">"to"</span> : [ 
            <span class="hljs-string">"frenchCity"</span>, 
            <span class="hljs-string">"germanCity"</span> 
          ] 
        } 
      ] 
    } 
  ] 
}
</pre>
</div>
<div id="HttpGharialList_short" onclick="$('#HttpGharialList_short').hide(); $('#HttpGharialList_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_create_http_examples

@brief Create a new graph in the graph module.
<br />
@RESTHEADER{POST /_api/gharial, Create a graph}
<br />
@RESTDESCRIPTION
The creation of a graph requires the name of the graph and a definition of its edges.
[See also edge definitions](../GeneralGraphs/Management.md#edge-definitions).
<br />
@RESTBODYPARAM{name,string,required,string}
Name of the graph.
<br />
@RESTBODYPARAM{edgeDefinitions,string,optional,string}
An array of definitions for the edge
<br />
@RESTBODYPARAM{orphanCollections,string,optional,string}
An array of additional vertex collections.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
Is returned if the graph could be created.
The body contains the graph configuration that has been stored.
<br />
@RESTRETURNCODE{409}
Returned if there is a conflict storing the graph.
This can occur either if a graph with this name is already stored, or if there is one edge definition with a
the same [edge collection](../Glossary/README.md#edge-collection)
but a different signature used in any other graph.
<br />
@EXAMPLES
<br />

<div id="HttpGharialCreate_container">
<div id="HttpGharialCreate_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"myGraph"</span>, 
  <span class="hljs-string">"edgeDefinitions"</span> : [ 
    { 
      <span class="hljs-string">"collection"</span> : <span class="hljs-string">"edges"</span>, 
      <span class="hljs-string">"from"</span> : [ 
        <span class="hljs-string">"startVertices"</span> 
      ], 
      <span class="hljs-string">"to"</span> : [ 
        <span class="hljs-string">"endVertices"</span> 
      ] 
    } 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json
etag: <span class="hljs-number">551176321</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span>, 
  <span class="hljs-string">"graph"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"myGraph"</span>, 
    <span class="hljs-string">"edgeDefinitions"</span> : [ 
      { 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"edges"</span>, 
        <span class="hljs-string">"from"</span> : [ 
          <span class="hljs-string">"startVertices"</span> 
        ], 
        <span class="hljs-string">"to"</span> : [ 
          <span class="hljs-string">"endVertices"</span> 
        ] 
      } 
    ], 
    <span class="hljs-string">"orphanCollections"</span> : [ ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/myGraph"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"551176321"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialCreate_short" onclick="$('#HttpGharialCreate_short').hide(); $('#HttpGharialCreate_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"myGraph"</span>, 
  <span class="hljs-string">"edgeDefinitions"</span> : [ 
    { 
      <span class="hljs-string">"collection"</span> : <span class="hljs-string">"edges"</span>, 
      <span class="hljs-string">"from"</span> : [ 
        <span class="hljs-string">"startVertices"</span> 
      ], 
      <span class="hljs-string">"to"</span> : [ 
        <span class="hljs-string">"endVertices"</span> 
      ] 
    } 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json
etag: <span class="hljs-number">551176321</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_get_http_examples

@brief Get a graph from the graph module.
<br />
@RESTHEADER{GET /_api/gharial/{graph-name}, Get a graph}
<br />
@RESTDESCRIPTION
Gets a graph from the collection *\_graphs*.
Returns the definition content of this graph.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the graph could be found.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialGetGraph_container">
<div id="HttpGharialGetGraph_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/myGraph

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">572082305</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"graph"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"myGraph"</span>, 
    <span class="hljs-string">"edgeDefinitions"</span> : [ 
      { 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"edges"</span>, 
        <span class="hljs-string">"from"</span> : [ 
          <span class="hljs-string">"startVertices"</span> 
        ], 
        <span class="hljs-string">"to"</span> : [ 
          <span class="hljs-string">"endVertices"</span> 
        ] 
      } 
    ], 
    <span class="hljs-string">"orphanCollections"</span> : [ ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/myGraph"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"572082305"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialGetGraph_short" onclick="$('#HttpGharialGetGraph_short').hide(); $('#HttpGharialGetGraph_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/myGraph

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">572082305</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_drop_http_examples

@brief delete an existing graph
<br />
@RESTHEADER{DELETE /_api/gharial/{graph-name}, Drop a graph}
<br />
@RESTDESCRIPTION
Removes a graph from the collection *\_graphs*.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{dropCollections, boolean, optional}
Drop collections of this graph as well.
Collections will only be dropped if they are not used in other graphs.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the graph could be dropped.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialDrop_container">
<div id="HttpGharialDrop_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social?dropCollections=true

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"removed"</span> : <span class="hljs-literal">true</span> 
}
</pre>
</div>
<div id="HttpGharialDrop_short" onclick="$('#HttpGharialDrop_short').hide(); $('#HttpGharialDrop_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social?dropCollections=true

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_list_vertex_http_examples

@brief Lists all vertex collections used in this graph.
<br />
@RESTHEADER{GET /_api/gharial/{graph-name}/vertex, List vertex collections}
<br />
@RESTDESCRIPTION
Lists all vertex collections within this graph.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the collections could be listed.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialListVertex_container">
<div id="HttpGharialListVertex_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/vertex

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"collections"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span> 
  ] 
}
</pre>
</div>
<div id="HttpGharialListVertex_short" onclick="$('#HttpGharialListVertex_short').hide(); $('#HttpGharialListVertex_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/vertex

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_vertex_collection_add_http_examples

@brief Add an additional vertex collection to the graph.
<br />
@RESTHEADER{POST /_api/gharial/{graph-name}/vertex, Add vertex collection}
<br />
@RESTDESCRIPTION
Adds a vertex collection to the set of collections of the graph. If the
collection does not exist, it will be created.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
Returned if the edge collection could be added successfully.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialAddVertexCol_container">
<div id="HttpGharialAddVertexCol_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"otherVertices"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json
etag: <span class="hljs-number">546785409</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span>, 
  <span class="hljs-string">"graph"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"social"</span>, 
    <span class="hljs-string">"edgeDefinitions"</span> : [ 
      { 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"relation"</span>, 
        <span class="hljs-string">"from"</span> : [ 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ], 
        <span class="hljs-string">"to"</span> : [ 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ] 
      } 
    ], 
    <span class="hljs-string">"orphanCollections"</span> : [ 
      <span class="hljs-string">"otherVertices"</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/social"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"546785409"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialAddVertexCol_short" onclick="$('#HttpGharialAddVertexCol_short').hide(); $('#HttpGharialAddVertexCol_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"otherVertices"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json
etag: <span class="hljs-number">546785409</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_vertex_collection_remove_http_examples

@brief Remove a vertex collection form the graph.
<br />
@RESTHEADER{DELETE /_api/gharial/{graph-name}/vertex/{collection-name}, Remove vertex collection}
<br />
@RESTDESCRIPTION
Removes a vertex collection from the graph and optionally deletes the collection,
if it is not used in any other graph.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required}
The name of the vertex collection.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{dropCollection, boolean, optional}
Drop the collection as well.
Collection will only be dropped if it is not used in other graphs.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the vertex collection was removed from the graph successfully.
<br />
@RESTRETURNCODE{400}
Returned if the vertex collection is still used in an edge definition.
In this case it cannot be removed from the graph yet, it has to be removed from the edge definition first.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />
<br />
You can remove vertex collections that are not used in any edge collection:
<br />

<div id="HttpGharialRemoveVertexCollection_container">
<div id="HttpGharialRemoveVertexCollection_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/vertex/otherVertices

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">608716929</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"graph"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"social"</span>, 
    <span class="hljs-string">"edgeDefinitions"</span> : [ 
      { 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"relation"</span>, 
        <span class="hljs-string">"from"</span> : [ 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ], 
        <span class="hljs-string">"to"</span> : [ 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ] 
      } 
    ], 
    <span class="hljs-string">"orphanCollections"</span> : [ ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/social"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"608716929"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialRemoveVertexCollection_short" onclick="$('#HttpGharialRemoveVertexCollection_short').hide(); $('#HttpGharialRemoveVertexCollection_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/vertex/otherVertices

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">608716929</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
You cannot remove vertex collections that are used in edge collections:
<br />

<div id="HttpGharialRemoveVertexCollectionFailed_container">
<div id="HttpGharialRemoveVertexCollectionFailed_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/vertex/male

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">400</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">1928</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"not in orphan collection"</span> 
}
</pre>
</div>
<div id="HttpGharialRemoveVertexCollectionFailed_short" onclick="$('#HttpGharialRemoveVertexCollectionFailed_short').hide(); $('#HttpGharialRemoveVertexCollectionFailed_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/vertex/male

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request
content-type: application/json

</pre><div class="example_show_button">show response body</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_list_edge_http_examples

@brief Lists all edge definitions
<br />
@RESTHEADER{GET /_api/gharial/{graph-name}/edge, List edge definitions}
<br />
@RESTDESCRIPTION
Lists all edge collections within this graph.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Is returned if the edge definitions could be listed.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialListEdge_container">
<div id="HttpGharialListEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/edge

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"collections"</span> : [ 
    <span class="hljs-string">"relation"</span> 
  ] 
}
</pre>
</div>
<div id="HttpGharialListEdge_short" onclick="$('#HttpGharialListEdge_short').hide(); $('#HttpGharialListEdge_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/edge

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_definition_add_http_examples

@brief Add a new edge definition to the graph
<br />
@RESTHEADER{POST /_api/gharial/{graph-name}/edge, Add edge definition}
<br />
@RESTDESCRIPTION
Adds an additional edge definition to the graph.
This edge definition has to contain a *collection* and an array of each *from* and *to* vertex collections.
An edge definition can only be added if this definition is either not used in any other graph, or it is used
with exactly the same definition. It is not possible to store a definition "e" from "v1" to "v2" in the one
graph, and "e" from "v2" to "v1" in the other graph.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the edge collection to be used.
<br />
@RESTBODYPARAM{from,array,required,string}
One or many vertex collections that can contain source vertices.
<br />
@RESTBODYPARAM{to,array,required,string}
One or many edge collections that can contain target vertices.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the definition could be added successfully.
<br />
@RESTRETURNCODE{400}
Returned if the defininition could not be added, the edge collection is used in an other graph with
a different signature.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialAddEdgeCol_container">
<div id="HttpGharialAddEdgeCol_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"lives_in"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"city"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json
etag: <span class="hljs-number">538462337</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span>, 
  <span class="hljs-string">"graph"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"social"</span>, 
    <span class="hljs-string">"edgeDefinitions"</span> : [ 
      { 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"relation"</span>, 
        <span class="hljs-string">"from"</span> : [ 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ], 
        <span class="hljs-string">"to"</span> : [ 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ] 
      }, 
      { 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"lives_in"</span>, 
        <span class="hljs-string">"from"</span> : [ 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ], 
        <span class="hljs-string">"to"</span> : [ 
          <span class="hljs-string">"city"</span> 
        ] 
      } 
    ], 
    <span class="hljs-string">"orphanCollections"</span> : [ ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/social"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"538462337"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialAddEdgeCol_short" onclick="$('#HttpGharialAddEdgeCol_short').hide(); $('#HttpGharialAddEdgeCol_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"lives_in"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"city"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created
content-type: application/json
etag: <span class="hljs-number">538462337</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_definition_modify_http_examples

@brief Replace an existing edge definition
<br />
@RESTHEADER{POST /_api/gharial/{graph-name}/edge/{definition-name}, Replace an edge definition}
<br />
@RESTDESCRIPTION
Change one specific edge definition.
This will modify all occurrences of this definition in all graphs known to your database.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{definition-name, string, required}
The name of the edge collection used in the definition.
<br />
@RESTBODYPARAM{collection,string,required,string}
The name of the edge collection to be used.
<br />
@RESTBODYPARAM{from,array,required,string}
One or many vertex collections that can contain source vertices.
<br />
@RESTBODYPARAM{to,array,required,string}
One or many edge collections that can contain target vertices.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the edge definition could be replaced.
<br />
@RESTRETURNCODE{400}
Returned if no edge definition with this name is found in the graph.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialReplaceEdgeCol_container">
<div id="HttpGharialReplaceEdgeCol_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"relation"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span>, 
    <span class="hljs-string">"animal"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span>, 
    <span class="hljs-string">"animal"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">614090881</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"graph"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"social"</span>, 
    <span class="hljs-string">"edgeDefinitions"</span> : [ 
      { 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"relation"</span>, 
        <span class="hljs-string">"from"</span> : [ 
          <span class="hljs-string">"animal"</span>, 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ], 
        <span class="hljs-string">"to"</span> : [ 
          <span class="hljs-string">"animal"</span>, 
          <span class="hljs-string">"female"</span>, 
          <span class="hljs-string">"male"</span> 
        ] 
      } 
    ], 
    <span class="hljs-string">"orphanCollections"</span> : [ ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/social"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"614090881"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialReplaceEdgeCol_short" onclick="$('#HttpGharialReplaceEdgeCol_short').hide(); $('#HttpGharialReplaceEdgeCol_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation &lt;&lt;EOF
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"relation"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span>, 
    <span class="hljs-string">"animal"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span>, 
    <span class="hljs-string">"animal"</span> 
  ] 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">614090881</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_definition_remove_http_examples

@brief Remove an edge definition form the graph
<br />
@RESTHEADER{DELETE /_api/gharial/{graph-name}/edge/{definition-name}, Remove an edge definition from the graph}
<br />
@RESTDESCRIPTION
Remove one edge definition from the graph.
This will only remove the edge collection, the vertex collections remain untouched and can still be used
in your queries.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{definition-name, string, required}
The name of the edge collection used in the definition.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{dropCollection, boolean, optional}
Drop the collection as well.
Collection will only be dropped if it is not used in other graphs.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the edge definition could be removed from the graph.
<br />
@RESTRETURNCODE{400}
Returned if no edge definition with this name is found in the graph.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialEdgeDefinitionRemove_container">
<div id="HttpGharialEdgeDefinitionRemove_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/edge/relation

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">564611201</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"graph"</span> : { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"social"</span>, 
    <span class="hljs-string">"edgeDefinitions"</span> : [ ], 
    <span class="hljs-string">"orphanCollections"</span> : [ 
      <span class="hljs-string">"female"</span>, 
      <span class="hljs-string">"male"</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_graphs/social"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"564611201"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialEdgeDefinitionRemove_short" onclick="$('#HttpGharialEdgeDefinitionRemove_short').hide(); $('#HttpGharialEdgeDefinitionRemove_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/edge/relation

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">564611201</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_vertex_create_http_examples

@brief create a new vertex
<br />
@RESTHEADER{POST /_api/gharial/{graph-name}/vertex/{collection-name}, Create a vertex}
<br />
@RESTDESCRIPTION
Adds a vertex to the given collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the vertex collection the vertex belongs to.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTALLBODYPARAM{storeThisObject,object,required}
The body has to be the JSON object to be stored.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
Returned if the vertex could be added and waitForSync is true.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph or no vertex collection with this name could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialAddVertex_container">
<div id="HttpGharialAddVertex_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex/male &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Francis"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">545278081</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"vertex"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/545278081"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"545278081"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"545278081"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialAddVertex_short" onclick="$('#HttpGharialAddVertex_short').hide(); $('#HttpGharialAddVertex_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex/male &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Francis"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">545278081</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_vertex_get_http_examples

@brief fetches an existing vertex
<br />
@RESTHEADER{GET /_api/gharial/{graph-name}/vertex/{collection-name}/{vertex-key}, Get a vertex}
<br />
@RESTDESCRIPTION
Gets a vertex from the given collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the vertex collection the vertex belongs to.
<br />
@RESTPARAM{vertex-key, string, required} 
The *_key* attribute of the vertex.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTPARAM{if-match, string, optional}
If the "If-Match" header is given, then it must contain exactly one etag. The document is returned,
if it has the same revision as the given etag. Otherwise a HTTP 412 is returned. As an alternative
you can supply the etag in an attribute rev in the URL.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the vertex could be found.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no vertex collection or no vertex with this id could be found.
<br />
@RESTRETURNCODE{412}
Returned if if-match header is given, but the documents revision is different.
<br />
@EXAMPLES
<br />

<div id="HttpGharialGetVertex_container">
<div id="HttpGharialGetVertex_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">573917313</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"vertex"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"573917313"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialGetVertex_short" onclick="$('#HttpGharialGetVertex_short').hide(); $('#HttpGharialGetVertex_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">573917313</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_vertex_replace_http_examples

@brief replaces an existing vertex
<br />
@RESTHEADER{PUT /_api/gharial/{graph-name}/vertex/{collection-name}/{vertex-key}, Replace a vertex}
<br />
@RESTDESCRIPTION
Replaces the data of a vertex in the collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the vertex collection the vertex belongs to.
<br />
@RESTPARAM{vertex-key, string, required} 
The *_key* attribute of the vertex.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTPARAM{if-match, string, optional}
If the "If-Match" header is given, then it must contain exactly one etag. The document is updated,
if it has the same revision as the given etag. Otherwise a HTTP 412 is returned. As an alternative
you can supply the etag in an attribute rev in the URL.
<br />
@RESTALLBODYPARAM{storeThisJsonObject,object,required}
The body has to be the JSON object to be stored.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the vertex could be replaced.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no vertex collection or no vertex with this id could be found.
<br />
@RESTRETURNCODE{412}
Returned if if-match header is given, but the documents revision is different.
<br />
@EXAMPLES
<br />

<div id="HttpGharialReplaceVertex_container">
<div id="HttpGharialReplaceVertex_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice Cooper"</span>, 
  <span class="hljs-string">"age"</span> : <span class="hljs-number">26</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">620841089</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"vertex"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"620841089"</span>, 
    <span class="hljs-string">"_oldRev"</span> : <span class="hljs-string">"618678401"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialReplaceVertex_short" onclick="$('#HttpGharialReplaceVertex_short').hide(); $('#HttpGharialReplaceVertex_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice &lt;&lt;EOF
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice Cooper"</span>, 
  <span class="hljs-string">"age"</span> : <span class="hljs-number">26</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">620841089</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_vertex_modify_http_examples

@brief replace an existing vertex
<br />
@RESTHEADER{PATCH /_api/gharial/{graph-name}/vertex/{collection-name}/{vertex-key}, Modify a vertex}
<br />
@RESTDESCRIPTION
Updates the data of the specific vertex in the collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the vertex collection the vertex belongs to.
<br />
@RESTPARAM{vertex-key, string, required} 
The *_key* attribute of the vertex.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTPARAM{keepNull, boolean, optional}
Define if values set to null should be stored. By default the key is removed from the document.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTPARAM{if-match, string, optional}
If the "If-Match" header is given, then it must contain exactly one etag. The document is updated,
if it has the same revision as the given etag. Otherwise a HTTP 412 is returned. As an alternative
you can supply the etag in an attribute rev in the URL.
<br />
@RESTALLBODYPARAM{replaceAttributes,object,required}
The body has to contain a JSON object containing exactly the attributes that should be replaced.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the vertex could be updated.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no vertex collection or no vertex with this id could be found.
<br />
@RESTRETURNCODE{412}
Returned if if-match header is given, but the documents revision is different.
<br />
@EXAMPLES
<br />

<div id="HttpGharialModifyVertex_container">
<div id="HttpGharialModifyVertex_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice &lt;&lt;EOF
{ 
  <span class="hljs-string">"age"</span> : <span class="hljs-number">26</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">596985985</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"vertex"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"596985985"</span>, 
    <span class="hljs-string">"_oldRev"</span> : <span class="hljs-string">"594823297"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialModifyVertex_short" onclick="$('#HttpGharialModifyVertex_short').hide(); $('#HttpGharialModifyVertex_long').show();">
<pre>
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice &lt;&lt;EOF
{ 
  <span class="hljs-string">"age"</span> : <span class="hljs-number">26</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">596985985</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_vertex_delete_http_examples

@brief removes a vertex from a graph
<br />
@RESTHEADER{DELETE /_api/gharial/{graph-name}/vertex/{collection-name}/{vertex-key}, Remove a vertex}
<br />
@RESTDESCRIPTION
Removes a vertex from the collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the vertex collection the vertex belongs to.
<br />
@RESTPARAM{vertex-key, string, required} 
The *_key* attribute of the vertex.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTPARAM{if-match, string, optional}
If the "If-Match" header is given, then it must contain exactly one etag. The document is updated,
if it has the same revision as the given etag. Otherwise a HTTP 412 is returned. As an alternative
you can supply the etag in an attribute rev in the URL.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the vertex could be removed.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no vertex collection or no vertex with this id could be found.
<br />
@RESTRETURNCODE{412}
Returned if if-match header is given, but the documents revision is different.
<br />
@EXAMPLES
<br />

<div id="HttpGharialDeleteVertex_container">
<div id="HttpGharialDeleteVertex_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"removed"</span> : <span class="hljs-literal">true</span> 
}
</pre>
</div>
<div id="HttpGharialDeleteVertex_short" onclick="$('#HttpGharialDeleteVertex_short').hide(); $('#HttpGharialDeleteVertex_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/vertex/female/alice

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_create_http_examples

@brief Creates an edge in an existing graph
<br />
@RESTHEADER{POST /_api/gharial/{graph-name}/edge/{collection-name}, Create an edge}
<br />
@RESTDESCRIPTION
Creates a new edge in the collection.
Within the body the has to contain a *\_from* and *\_to* value referencing to valid vertices in the graph.
Furthermore the edge has to be valid in the definition of this
[edge collection](../Glossary/README.md#edge-collection).
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the edge collection the edge belongs to.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTPARAM{_from, string, required}
<br />
@RESTPARAM{_to, string, required}
<br />
@RESTALLBODYPARAM{storeThisJsonObject,object,required}
The body has to be the JSON object to be stored.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{201}
Returned if the edge could be created.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no edge collection or no edge with this id could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialAddEdge_container">
<div id="HttpGharialAddEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">536955009</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"edge"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/536955009"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"536955009"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"536955009"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialAddEdge_short" onclick="$('#HttpGharialAddEdge_short').hide(); $('#HttpGharialAddEdge_long').show();">
<pre>
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">536955009</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_get_http_examples

@brief fetch an edge
<br />
@RESTHEADER{GET /_api/gharial/{graph-name}/edge/{collection-name}/{edge-key}, Get an edge}
<br />
@RESTDESCRIPTION
Gets an edge from the given collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the edge collection the edge belongs to.
<br />
@RESTPARAM{edge-key, string, required} 
The *_key* attribute of the vertex.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTPARAM{if-match, string, optional}
If the "If-Match" header is given, then it must contain exactly one etag. The document is returned,
if it has the same revision as the given etag. Otherwise a HTTP 412 is returned. As an alternative
you can supply the etag in an attribute rev in the URL.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the edge could be found.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no edge collection or no edge with this id could be found.
<br />
@RESTRETURNCODE{412}
Returned if if-match header is given, but the documents revision is different.
<br />
@EXAMPLES
<br />

<div id="HttpGharialGetEdge_container">
<div id="HttpGharialGetEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">569788545</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"edge"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"569788545"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialGetEdge_short" onclick="$('#HttpGharialGetEdge_short').hide(); $('#HttpGharialGetEdge_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
etag: <span class="hljs-number">569788545</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_replace_http_examples

@brief replace the content of an existing edge
<br />
@RESTHEADER{PUT /_api/gharial/{graph-name}/edge/{collection-name}/{edge-key}, Replace an edge}
<br />
@RESTDESCRIPTION
Replaces the data of an edge in the collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the edge collection the edge belongs to.
<br />
@RESTPARAM{edge-key, string, required} 
The *_key* attribute of the vertex.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTPARAM{if-match, string, optional}
If the "If-Match" header is given, then it must contain exactly one etag. The document is updated,
if it has the same revision as the given etag. Otherwise a HTTP 412 is returned. As an alternative
you can supply the etag in an attribute rev in the URL.
<br />
@RESTALLBODYPARAM{storeThisJsonObject,object,required}
The body has to be the JSON object to be stored.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the edge could be replaced.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no edge collection or no edge with this id could be found.
<br />
@RESTRETURNCODE{412}
Returned if if-match header is given, but the documents revision is different.
<br />
@EXAMPLES
<br />

<div id="HttpGharialPutEdge_container">
<div id="HttpGharialPutEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"divorced"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">604850305</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"edge"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"604850305"</span>, 
    <span class="hljs-string">"_oldRev"</span> : <span class="hljs-string">"603867265"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialPutEdge_short" onclick="$('#HttpGharialPutEdge_short').hide(); $('#HttpGharialPutEdge_long').show();">
<pre>
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob &lt;&lt;EOF
{ 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"divorced"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">604850305</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_modify_http_examples

@brief modify an existing edge
<br />
@RESTHEADER{PATCH /_api/gharial/{graph-name}/edge/{collection-name}/{edge-key}, Modify an edge}
<br />
@RESTDESCRIPTION
Updates the data of the specific edge in the collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required}
The name of the edge collection the edge belongs to.
<br />
@RESTPARAM{edge-key, string, required}
The *_key* attribute of the vertex.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTPARAM{keepNull, boolean, optional}
Define if values set to null should be stored. By default the key is removed from the document.
<br />
@RESTALLBODYPARAM{updateAttributes,object,required}
The body has to be a JSON object containing the attributes to be updated.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the edge could be updated.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no edge collection or no edge with this id could be found.
<br />
@EXAMPLES
<br />

<div id="HttpGharialPatchEdge_container">
<div id="HttpGharialPatchEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob &lt;&lt;EOF
{ 
  <span class="hljs-string">"since"</span> : <span class="hljs-string">"01.01.2001"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">600983681</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"edge"</span> : { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"600983681"</span>, 
    <span class="hljs-string">"_oldRev"</span> : <span class="hljs-string">"599869569"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span> 
  } 
}
</pre>
</div>
<div id="HttpGharialPatchEdge_short" onclick="$('#HttpGharialPatchEdge_short').hide(); $('#HttpGharialPatchEdge_long').show();">
<pre>
shell> curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob &lt;&lt;EOF
{ 
  <span class="hljs-string">"since"</span> : <span class="hljs-string">"01.01.2001"</span> 
}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json
etag: <span class="hljs-number">600983681</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/apps/system/_api/gharial/APP/gharial.js -->
@startDocuBlock JSF_general_graph_edge_delete_http_examples

@brief removes an edge from graph
<br />
@RESTHEADER{DELETE /_api/gharial/{graph-name}/edge/{collection-name}/{edge-key}, Remove an edge}
<br />
@RESTDESCRIPTION
Removes an edge from the collection.
<br />
@RESTURLPARAMETERS
<br />
@RESTPARAM{graph-name, string, required}
The name of the graph.
<br />
@RESTPARAM{collection-name, string, required} 
The name of the edge collection the edge belongs to.
<br />
@RESTPARAM{edge-key, string, required} 
The *_key* attribute of the vertex.
<br />
@RESTQUERYPARAMETERS
<br />
@RESTPARAM{waitForSync, boolean, optional}
Define if the request should wait until synced to disk.
<br />
@RESTHEADERPARAMETERS
<br />
@RESTPARAM{if-match, string, optional}
If the "If-Match" header is given, then it must contain exactly one etag. The document is updated,
if it has the same revision as the given etag. Otherwise a HTTP 412 is returned. As an alternative
you can supply the etag in an attribute rev in the URL.
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
Returned if the edge could be removed.
<br />
@RESTRETURNCODE{202}
Returned if the request was successful but waitForSync is false.
<br />
@RESTRETURNCODE{404}
Returned if no graph with this name, no edge collection or no edge with this id could be found.
<br />
@RESTRETURNCODE{412}
Returned if if-match header is given, but the documents revision is different.
<br />
@EXAMPLES
<br />

<div id="HttpGharialDeleteEdge_container">
<div id="HttpGharialDeleteEdge_long" onclick="" style="Display: none;">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">202</span>, 
  <span class="hljs-string">"removed"</span> : <span class="hljs-literal">true</span> 
}
</pre>
</div>
<div id="HttpGharialDeleteEdge_short" onclick="$('#HttpGharialDeleteEdge_short').hide(); $('#HttpGharialDeleteEdge_long').show();">
<pre>
shell> curl -X DELETE --dump - http://localhost:8529/_api/gharial/social/edge/relation/aliceAndBob

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">202</span> Accepted
content-type: application/json

</pre><div class="example_show_button">show response body</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionAll

`collection.all()`
<br />
Fetches all documents from a collection and returns a cursor. You can use
*toArray*, *next*, or *hasNext* to access the result. The result
can be limited using the *skip* and *limit* operator.
<br />
@EXAMPLES
<br />
Use *toArray* to get all documents at once:
<br />

<div id="001_collectionAll_container">
<div id="001_collectionAll_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17778817"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17778817"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17778817"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17975425"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17975425"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17975425"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18172033"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18172033"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18172033"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18368641"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18368641"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18368641"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18565249"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18565249"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18565249"</span> 
}
arangosh&gt; db.five.all().toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"four"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18368641"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18368641"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18368641"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18172033"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18172033"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18172033"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"five"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18565249"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18565249"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18565249"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"two"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17975425"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17975425"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17975425"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17778817"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17778817"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17778817"</span> 
  } 
]
</pre>
</div>
<div id="001_collectionAll_short" onclick="$('#001_collectionAll_short').hide(); $('#001_collectionAll_long').show();">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
arangosh&gt; db.five.all().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Use *limit* to restrict the documents:
<br />

<div id="002_collectionAllNext_container">
<div id="002_collectionAllNext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19155073"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19155073"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19155073"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19351681"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19351681"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19351681"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19548289"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19548289"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19548289"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19744897"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19744897"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19744897"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19941505"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19941505"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19941505"</span> 
}
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19155073"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19155073"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19155073"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19548289"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19548289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19548289"</span> 
  } 
]
</pre>
</div>
<div id="002_collectionAllNext_short" onclick="$('#002_collectionAllNext_short').hide(); $('#002_collectionAllNext_long').show();">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionByExample

`collection.byExample(example)`
<br />
Fetches all documents from a collection that match the specified
example and returns a cursor.
<br />
You can use *toArray*, *next*, or *hasNext* to access the
result. The result can be limited using the *skip* and *limit*
operator.
<br />
An attribute name of the form *a.b* is interpreted as attribute path,
not as attribute. If you use
<br />
*{ a : { c : 1 } }*
<br />
as example, then you will find all documents, such that the attribute
*a* contains a document of the form *{c : 1 }*. For example the document
<br />
*{ a : { c : 1 }, b : 1 }*
<br />
will match, but the document
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will not.
<br />
However, if you use
<br />
*{ a.c : 1 }*,
<br />
then you will find all documents, which contain a sub-document in *a*
that has an attribute *c* of value *1*. Both the following documents
<br />
*{ a : { c : 1 }, b : 1 }* and
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will match.
<br />
`collection.byExample(path1, value1, ...)`
<br />
As alternative you can supply an array of paths and values.
<br />
@EXAMPLES
<br />
Use *toArray* to get all documents at once:
<br />

<div id="003_collectionByExample_container">
<div id="003_collectionByExample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20531329"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20531329"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20531329"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20793473"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20793473"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20793473"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20990081"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20990081"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20990081"</span> 
}
arangosh&gt; db.users.all().toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20990081"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20990081"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20990081"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20531329"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20531329"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20531329"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20793473"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20793473"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20793473"</span> 
  } 
]
arangosh&gt; db.users.byExample({ <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20"</span> }).toArray();
[ ]
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span> }).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20531329"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20531329"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20531329"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span> 
  } 
]
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/15"</span> }).toArray();
[ ]
</pre>
</div>
<div id="003_collectionByExample_short" onclick="$('#003_collectionByExample_short').hide(); $('#003_collectionByExample_long').show();">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
arangosh&gt; db.users.all().toArray();
arangosh&gt; db.users.byExample({ <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20"</span> }).toArray();
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span> }).toArray();
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/15"</span> }).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Use *next* to loop over all documents:
<br />

<div id="004_collectionByExampleNext_container">
<div id="004_collectionByExampleNext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22235265"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22235265"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22235265"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22497409"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22497409"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22497409"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22694017"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22694017"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22694017"</span> 
}
arangosh&gt; <span class="hljs-keyword">var</span> a = db.users.byExample( {<span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span> } );
arangosh&gt; <span class="hljs-keyword">while</span> (a.hasNext()) print(a.next());
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22694017"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22694017"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22694017"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span> 
}
</pre>
</div>
<div id="004_collectionByExampleNext_short" onclick="$('#004_collectionByExampleNext_short').hide(); $('#004_collectionByExampleNext_long').show();">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
arangosh&gt; <span class="hljs-keyword">var</span> a = db.users.byExample( {<span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span> } );
arangosh&gt; <span class="hljs-keyword">while</span> (a.hasNext()) print(a.next());
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
/*jshint strict: false, unused: false, maxlen: 200 */

<br />
@brief ArangoCollection
<br />
@file
<br />
DISCLAIMER
<br />
Copyright 2011-2013 triagens GmbH, Cologne, Germany
<br />
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<br />
    http://www.apache.org/licenses/LICENSE-2.0
<br />
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
<br />
Copyright holder is triAGENS GmbH, Cologne, Germany
<br />
@author Dr. Frank Celler
@author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
<br />

var ArangoCollection = require("org/arangodb/arango-collection").ArangoCollection;

var arangodb = require("org/arangodb");

var ArangoError = arangodb.ArangoError;
var sprintf = arangodb.sprintf;
var db = arangodb.db;

var simple = require("org/arangodb/simple-query");

var SimpleQueryAll = simple.SimpleQueryAll;
var SimpleQueryByExample = simple.SimpleQueryByExample;
var SimpleQueryByCondition = simple.SimpleQueryByCondition;
var SimpleQueryRange = simple.SimpleQueryRange;
var SimpleQueryGeo = simple.SimpleQueryGeo;
var SimpleQueryNear = simple.SimpleQueryNear;
var SimpleQueryWithin = simple.SimpleQueryWithin;
var SimpleQueryWithinRectangle = simple.SimpleQueryWithinRectangle;
var SimpleQueryFulltext = simple.SimpleQueryFulltext;

// -----------------------------------------------------------------------------
// --SECTION--                                                  ArangoCollection
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                                         constants
// -----------------------------------------------------------------------------

<br />
@brief collection is corrupted
<br />

ArangoCollection.STATUS_CORRUPTED = 0;

<br />
@brief collection is new born
@deprecated
<br />

ArangoCollection.STATUS_NEW_BORN = 1;

<br />
@brief collection is unloaded
<br />

ArangoCollection.STATUS_UNLOADED = 2;

<br />
@brief collection is loaded
<br />

ArangoCollection.STATUS_LOADED = 3;

<br />
@brief collection is unloading
<br />

ArangoCollection.STATUS_UNLOADING = 4;

<br />
@brief collection is deleted
<br />

ArangoCollection.STATUS_DELETED = 5;

<br />
@brief collection is currently loading
<br />

ArangoCollection.STATUS_LOADING = 6;

<br />
@brief document collection
<br />

ArangoCollection.TYPE_DOCUMENT = 2;

<br />
@brief edge collection
<br />

ArangoCollection.TYPE_EDGE = 3;

// -----------------------------------------------------------------------------
// --SECTION--                                                   private methods
// -----------------------------------------------------------------------------

<br />
@brief prints a collection
<br />

ArangoCollection.prototype._PRINT = function (context) {
  var status = "unknown";
  var type = "unknown";
  var name = this.name();

  switch (this.status()) {
    case ArangoCollection.STATUS_NEW_BORN: status = "new born"; break;
    case ArangoCollection.STATUS_UNLOADED: status = "unloaded"; break;
    case ArangoCollection.STATUS_UNLOADING: status = "unloading"; break;
    case ArangoCollection.STATUS_LOADED: status = "loaded"; break;
    case ArangoCollection.STATUS_CORRUPTED: status = "corrupted"; break;
    case ArangoCollection.STATUS_DELETED: status = "deleted"; break;
  }

  switch (this.type()) {
    case ArangoCollection.TYPE_DOCUMENT: type = "document"; break;
    case ArangoCollection.TYPE_EDGE:     type = "edge"; break;
  }

  var colors = require("internal").COLORS;
  var useColor = context.useColor;

  context.output += "[ArangoCollection ";
  if (useColor) { context.output += colors.COLOR_NUMBER; }
  context.output += this._id;
  if (useColor) { context.output += colors.COLOR_RESET; }
  context.output += ", \"";
  if (useColor) { context.output += colors.COLOR_STRING; }
  context.output += name || "unknown";
  if (useColor) { context.output += colors.COLOR_RESET; }
  context.output += "\" (type " + type + ", status " + status + ")]";
};

<br />
@brief converts into a string
<br />

ArangoCollection.prototype.toString = function () {
  return "[ArangoCollection: " + this._id + "]";
};

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

<br />
@brief constructs an all query for a collection
@startDocuBlock collectionAll

`collection.all()`
<br />
Fetches all documents from a collection and returns a cursor. You can use
*toArray*, *next*, or *hasNext* to access the result. The result
can be limited using the *skip* and *limit* operator.
<br />
@EXAMPLES
<br />
Use *toArray* to get all documents at once:
<br />

<div id="001_collectionAll_container">
<div id="001_collectionAll_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17778817"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17778817"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17778817"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17975425"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17975425"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17975425"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18172033"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18172033"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18172033"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18368641"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18368641"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18368641"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18565249"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18565249"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18565249"</span> 
}
arangosh&gt; db.five.all().toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"four"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18368641"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18368641"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18368641"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18172033"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18172033"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18172033"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"five"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/18565249"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"18565249"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"18565249"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"two"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17975425"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17975425"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17975425"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/17778817"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"17778817"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"17778817"</span> 
  } 
]
</pre>
</div>
<div id="001_collectionAll_short" onclick="$('#001_collectionAll_short').hide(); $('#001_collectionAll_long').show();">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
arangosh&gt; db.five.all().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Use *limit* to restrict the documents:
<br />

<div id="002_collectionAllNext_container">
<div id="002_collectionAllNext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19155073"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19155073"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19155073"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19351681"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19351681"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19351681"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19548289"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19548289"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19548289"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19744897"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19744897"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19744897"</span> 
}
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19941505"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19941505"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19941505"</span> 
}
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19155073"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19155073"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19155073"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/19548289"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"19548289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"19548289"</span> 
  } 
]
</pre>
</div>
<div id="002_collectionAllNext_short" onclick="$('#002_collectionAllNext_short').hide(); $('#002_collectionAllNext_long').show();">
<pre>
arangosh&gt; db.five.save({ name : <span class="hljs-string">"one"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"two"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"three"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"four"</span> });
arangosh&gt; db.five.save({ name : <span class="hljs-string">"five"</span> });
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock

<br />

ArangoCollection.prototype.all = function () {
  return new SimpleQueryAll(this);
};

<br />
@brief constructs a query-by-example for a collection
@startDocuBlock collectionByExample

`collection.byExample(example)`
<br />
Fetches all documents from a collection that match the specified
example and returns a cursor.
<br />
You can use *toArray*, *next*, or *hasNext* to access the
result. The result can be limited using the *skip* and *limit*
operator.
<br />
An attribute name of the form *a.b* is interpreted as attribute path,
not as attribute. If you use
<br />
*{ a : { c : 1 } }*
<br />
as example, then you will find all documents, such that the attribute
*a* contains a document of the form *{c : 1 }*. For example the document
<br />
*{ a : { c : 1 }, b : 1 }*
<br />
will match, but the document
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will not.
<br />
However, if you use
<br />
*{ a.c : 1 }*,
<br />
then you will find all documents, which contain a sub-document in *a*
that has an attribute *c* of value *1*. Both the following documents
<br />
*{ a : { c : 1 }, b : 1 }* and
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will match.
<br />
`collection.byExample(path1, value1, ...)`
<br />
As alternative you can supply an array of paths and values.
<br />
@EXAMPLES
<br />
Use *toArray* to get all documents at once:
<br />

<div id="003_collectionByExample_container">
<div id="003_collectionByExample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20531329"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20531329"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20531329"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20793473"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20793473"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20793473"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20990081"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20990081"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20990081"</span> 
}
arangosh&gt; db.users.all().toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20990081"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20990081"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20990081"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20531329"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20531329"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20531329"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20793473"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20793473"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20793473"</span> 
  } 
]
arangosh&gt; db.users.byExample({ <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20"</span> }).toArray();
[ ]
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span> }).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20531329"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"20531329"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"20531329"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span> 
  } 
]
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/15"</span> }).toArray();
[ ]
</pre>
</div>
<div id="003_collectionByExample_short" onclick="$('#003_collectionByExample_short').hide(); $('#003_collectionByExample_long').show();">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
arangosh&gt; db.users.all().toArray();
arangosh&gt; db.users.byExample({ <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/20"</span> }).toArray();
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span> }).toArray();
arangosh&gt; db.users.byExample({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/15"</span> }).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Use *next* to loop over all documents:
<br />

<div id="004_collectionByExampleNext_container">
<div id="004_collectionByExampleNext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22235265"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22235265"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22235265"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22497409"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22497409"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22497409"</span> 
}
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22694017"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22694017"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22694017"</span> 
}
arangosh&gt; <span class="hljs-keyword">var</span> a = db.users.byExample( {<span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span> } );
arangosh&gt; <span class="hljs-keyword">while</span> (a.hasNext()) print(a.next());
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/22694017"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"22694017"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"22694017"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span> 
}
</pre>
</div>
<div id="004_collectionByExampleNext_short" onclick="$('#004_collectionByExampleNext_short').hide(); $('#004_collectionByExampleNext_long').show();">
<pre>
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Gerhard"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Helmut"</span> });
arangosh&gt; db.users.save({ name: <span class="hljs-string">"Angela"</span> });
arangosh&gt; <span class="hljs-keyword">var</span> a = db.users.byExample( {<span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span> } );
arangosh&gt; <span class="hljs-keyword">while</span> (a.hasNext()) print(a.next());
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock

<br />

ArangoCollection.prototype.byExample = function (example) {
  var e;
  var i;

  // example is given as only argument
  if (arguments.length === 1) {
    e = example;
  }

  // example is given as list
  else {
    e = {};

    // create a REAL array, otherwise JSON.stringify will fail
    for (i = 0;  i < arguments.length;  i += 2) {
      e[arguments[i]] = arguments[i + 1];
    }
  }

  return new SimpleQueryByExample(this, e);
};

<br />
@brief constructs a query-by-example using a hash index
@startDocuBLock collectionByExampleHash
`collection.byExampleHash(index, example)`
<br />
Selects all documents from the specified hash index that match the
specified example and returns a cursor.
<br />
You can use *toArray*, *next*, or *hasNext* to access the
result. The result can be limited using the *skip* and *limit*
operator.
<br />
An attribute name of the form *a.b* is interpreted as attribute path,
not as attribute. If you use
<br />
*{ a : { c : 1 } }*
<br />
as example, then you will find all documents, such that the attribute
*a* contains a document of the form *{c : 1 }*. For example the document
<br />
*{ a : { c : 1 }, b : 1 }*
<br />
will match, but the document
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will not.
<br />
However, if you use
<br />
*{ a.c : 1 }*,
<br />
then you will find all documents, which contain a sub-document in *a*
that has an attribute @LIT{c} of value *1*. Both the following documents
<br />
*{ a : { c : 1 }, b : 1 }* and
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will match.
<br />
`collection.byExampleHash(index-id, path1, value1, ...)`
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionByExampleSkiplist

`collection.byExampleSkiplist(index, example)`
<br />
Selects all documents from the specified skiplist index that match the
specified example and returns a cursor.
<br />
You can use *toArray*, *next*, or *hasNext* to access the
result. The result can be limited using the *skip* and *limit*
operator.
<br />
An attribute name of the form *a.b* is interpreted as attribute path,
not as attribute. If you use
<br />
*{ a : { c : 1 } }*
<br />
as example, then you will find all documents, such that the attribute
*a* contains a document of the form *{c : 1 }*. For example the document
<br />
*{ a : { c : 1 }, b : 1 }*
<br />
will match, but the document
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will not.
<br />
However, if you use
<br />
*{ a.c : 1 }*,
<br />
then you will find all documents, which contain a sub-document in *a*
that has an attribute @LIT{c} of value *1*. Both the following documents
<br />
*{ a : { c : 1 }, b : 1 }*and
<br />
*{ a : { c : 1, b : 1 } }*
<br />
will match.
<br />
`collection.byExampleSkiplist(index, path1, value1, ...)`
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionRange

`collection.range(attribute, left, right)`
<br />
Returns all documents from a collection such that the *attribute* is
greater or equal than *left* and strictly less than *right*.
<br />
You can use *toArray*, *next*, or *hasNext* to access the
result. The result can be limited using the *skip* and *limit*
operator.
<br />
An attribute name of the form *a.b* is interpreted as attribute path,
not as attribute.
<br />
For range queries it is required that a skiplist index is present for the
queried attribute. If no skiplist index is present on the attribute, an
error will be thrown.
<br />
Note: the *range* simple query function is **deprecated** as of ArangoDB 2.6. 
The function may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection within a specific range
is to use an AQL query as follows: 
<br />
    FOR doc IN @@collection 
      FILTER doc.value >= @left && doc.value < @right 
      LIMIT @skip, @limit 
      RETURN doc
<br />
@EXAMPLES
<br />
Use *toArray* to get all documents at once:
<br />

<div id="005_collectionRange_container">
<div id="005_collectionRange_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.old.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"age"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"old/23545985"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"age"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.old.save({ age: <span class="hljs-number">15</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/23808129"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"23808129"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"23808129"</span> 
}
arangosh&gt; db.old.save({ age: <span class="hljs-number">25</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/24004737"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"24004737"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"24004737"</span> 
}
arangosh&gt; db.old.save({ age: <span class="hljs-number">30</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/24201345"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"24201345"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"24201345"</span> 
}
arangosh&gt; db.old.range(<span class="hljs-string">"age"</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/23808129"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"23808129"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"23808129"</span>, 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">15</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/24004737"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"24004737"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"24004737"</span>, 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> 
  } 
]
</pre>
</div>
<div id="005_collectionRange_short" onclick="$('#005_collectionRange_short').hide(); $('#005_collectionRange_long').show();">
<pre>
arangosh&gt; db.old.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"age"</span> ] });
arangosh&gt; db.old.save({ age: <span class="hljs-number">15</span> });
arangosh&gt; db.old.save({ age: <span class="hljs-number">25</span> });
arangosh&gt; db.old.save({ age: <span class="hljs-number">30</span> });
arangosh&gt; db.old.range(<span class="hljs-string">"age"</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionClosedRange

`collection.closedRange(attribute, left, right)`
<br />
Returns all documents of a collection such that the *attribute* is
greater or equal than *left* and less or equal than *right*.
<br />
You can use *toArray*, *next*, or *hasNext* to access the
result. The result can be limited using the *skip* and *limit*
operator.
<br />
An attribute name of the form *a.b* is interpreted as attribute path,
not as attribute.
<br />
Note: the *closedRange* simple query function is **deprecated** as of ArangoDB 2.6. 
The function may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection within a specific range
is to use an AQL query as follows: 
<br />
    FOR doc IN @@collection 
      FILTER doc.value >= @left && doc.value <= @right 
      LIMIT @skip, @limit 
      RETURN doc
<br />
@EXAMPLES
<br />
Use *toArray* to get all documents at once:
<br />

<div id="006_collectionClosedRange_container">
<div id="006_collectionClosedRange_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.old.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"age"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"old/24922241"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"age"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.old.save({ age: <span class="hljs-number">15</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/25184385"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"25184385"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"25184385"</span> 
}
arangosh&gt; db.old.save({ age: <span class="hljs-number">25</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/25380993"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"25380993"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"25380993"</span> 
}
arangosh&gt; db.old.save({ age: <span class="hljs-number">30</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/25577601"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"25577601"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"25577601"</span> 
}
arangosh&gt; db.old.closedRange(<span class="hljs-string">"age"</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/25184385"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"25184385"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"25184385"</span>, 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">15</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/25380993"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"25380993"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"25380993"</span>, 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"old/25577601"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"25577601"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"25577601"</span>, 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">30</span> 
  } 
]
</pre>
</div>
<div id="006_collectionClosedRange_short" onclick="$('#006_collectionClosedRange_short').hide(); $('#006_collectionClosedRange_long').show();">
<pre>
arangosh&gt; db.old.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"age"</span> ] });
arangosh&gt; db.old.save({ age: <span class="hljs-number">15</span> });
arangosh&gt; db.old.save({ age: <span class="hljs-number">25</span> });
arangosh&gt; db.old.save({ age: <span class="hljs-number">30</span> });
arangosh&gt; db.old.closedRange(<span class="hljs-string">"age"</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionGeo

`collection.geo(location-attribute)`
<br />
Looks up a geo index defined on attribute *location_attribute*.
<br />
Returns a geo index object if an index was found. The `near` or
`within` operators can then be used to execute a geo-spatial query on
this particular index.
<br />
This is useful for collections with multiple defined geo indexes.
<br />
`collection.geo(location_attribute, true)`
<br />
Looks up a geo index on a compound attribute *location_attribute*.
<br />
Returns a geo index object if an index was found. The `near` or
`within` operators can then be used to execute a geo-spatial query on
this particular index.
<br />
`collection.geo(latitude_attribute, longitude_attribute)`
<br />
Looks up a geo index defined on the two attributes *latitude_attribute*
and *longitude-attribute*.
<br />
Returns a geo index object if an index was found. The `near` or
`within` operators can then be used to execute a geo-spatial query on
this particular index.
<br />
Note: the *geo* simple query helper function is **deprecated** as of ArangoDB 
2.6. The function may be removed in future versions of ArangoDB. The preferred
way for running geo queries is to use their AQL equivalents.
<br />
@EXAMPLES
<br />
Assume you have a location stored as list in the attribute *home*
and a destination stored in the attribute *work*. Then you can use the
`geo` operator to select which geo-spatial attributes (and thus which
index) to use in a `near` query.
<br />

<div id="geoIndexSimpleQuery_container">
<div id="geoIndexSimpleQuery_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>;  j &lt;= <span class="hljs-number">180</span>;  j += <span class="hljs-number">10</span>) {
........&gt;    db.complex.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;                      home : [ i, j ],
........&gt;                      work : [ -i, -j ] });
........&gt;  }
........&gt; }
........&gt; 
arangosh&gt; db.complex.near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>);
[ArangoError <span class="hljs-number">1570</span>: no suitable geo index found <span class="hljs-keyword">for</span> geo restriction on <span class="hljs-string">'complex'</span>]
arangosh&gt; db.complex.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"home"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"complex/2318682241"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo1"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"home"</span> 
  ], 
  <span class="hljs-string">"geoJson"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.complex.near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2252753025"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2252753025"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2252753025"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/170"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">170</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">0</span>, 
      -<span class="hljs-number">170</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2252949633"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2252949633"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2252949633"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/180"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">180</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">0</span>, 
      -<span class="hljs-number">180</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2245871745"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2245871745"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2245871745"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/-180"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">0</span>, 
      -<span class="hljs-number">180</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">180</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2260027521"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2260027521"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2260027521"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/10/170"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">10</span>, 
      <span class="hljs-number">170</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      -<span class="hljs-number">10</span>, 
      -<span class="hljs-number">170</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2245478529"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2245478529"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2245478529"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/170"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      -<span class="hljs-number">10</span>, 
      <span class="hljs-number">170</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">10</span>, 
      -<span class="hljs-number">170</span> 
    ] 
  } 
]
arangosh&gt; db.complex.geo(<span class="hljs-string">"work"</span>).near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>);
[ArangoError <span class="hljs-number">1570</span>: no suitable geo index found <span class="hljs-keyword">for</span> geo restriction on <span class="hljs-string">'complex'</span>]
arangosh&gt; db.complex.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"work"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"complex/2319206529"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo1"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"work"</span> 
  ], 
  <span class="hljs-string">"geoJson"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.complex.geo(<span class="hljs-string">"work"</span>).near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2246068353"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2246068353"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2246068353"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/-170"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">0</span>, 
      -<span class="hljs-number">170</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">170</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2245871745"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2245871745"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2245871745"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/-180"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">0</span>, 
      -<span class="hljs-number">180</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">180</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2252949633"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2252949633"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2252949633"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/180"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">180</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">0</span>, 
      -<span class="hljs-number">180</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2253342849"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2253342849"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2253342849"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/10/-170"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      <span class="hljs-number">10</span>, 
      -<span class="hljs-number">170</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      -<span class="hljs-number">10</span>, 
      <span class="hljs-number">170</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"complex/2238793857"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2238793857"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2238793857"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/-170"</span>, 
    <span class="hljs-string">"home"</span> : [ 
      -<span class="hljs-number">10</span>, 
      -<span class="hljs-number">170</span> 
    ], 
    <span class="hljs-string">"work"</span> : [ 
      <span class="hljs-number">10</span>, 
      <span class="hljs-number">170</span> 
    ] 
  } 
]
</pre>
</div>
<div id="geoIndexSimpleQuery_short" onclick="$('#geoIndexSimpleQuery_short').hide(); $('#geoIndexSimpleQuery_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>;  j &lt;= <span class="hljs-number">180</span>;  j += <span class="hljs-number">10</span>) {
........&gt;    db.complex.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;                      home : [ i, j ],
........&gt;                      work : [ -i, -j ] });
........&gt;  }
........&gt; }
........&gt; 
arangosh&gt; db.complex.near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>);
arangosh&gt; db.complex.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"home"</span> ] });
arangosh&gt; db.complex.near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>).toArray();
arangosh&gt; db.complex.geo(<span class="hljs-string">"work"</span>).near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>);
arangosh&gt; db.complex.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"work"</span> ] });
arangosh&gt; db.complex.geo(<span class="hljs-string">"work"</span>).near(<span class="hljs-number">0</span>, <span class="hljs-number">170</span>).limit(<span class="hljs-number">5</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionNear

`collection.near(latitude, longitude)`
<br />
The returned list is sorted according to the distance, with the nearest
document to the coordinate (*latitude*, *longitude*) coming first.
If there are near documents of equal distance, documents are chosen randomly
from this set until the limit is reached. It is possible to change the limit
using the *limit* operator.
<br />
In order to use the *near* operator, a geo index must be defined for the
collection. This index also defines which attribute holds the coordinates
for the document.  If you have more then one geo-spatial index, you can use
the *geo* operator to select a particular index.
<br />
*Note*: `near` does not support negative skips.
//     However, you can still use `limit` followed to skip.
<br />
`collection.near(latitude, longitude).limit(limit)`
<br />
Limits the result to limit documents instead of the default 100.
<br />
*Note*: Unlike with multiple explicit limits, `limit` will raise
the implicit default limit imposed by `within`.
<br />
`collection.near(latitude, longitude).distance()`
<br />
This will add an attribute `distance` to all documents returned, which
contains the distance between the given point and the document in meters.
<br />
`collection.near(latitude, longitude).distance(name)`
<br />
This will add an attribute *name* to all documents returned, which
contains the distance between the given point and the document in meters.
<br />
Note: the *near* simple query function is **deprecated** as of ArangoDB 2.6. 
The function may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection using the near operator is
to use the AQL *NEAR* function in an [AQL query](../Aql/GeoFunctions.md) as follows: 
<br />
    FOR doc IN NEAR(@@collection, @latitude, @longitude, @limit) 
      RETURN doc
<br />
@EXAMPLES
<br />
To get the nearest two locations:
<br />

<div id="007_collectionNear_container">
<div id="007_collectionNear_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.geo.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"loc"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"geo/26298497"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo1"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"loc"</span> 
  ], 
  <span class="hljs-string">"geoJson"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) { 
........&gt;   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;     db.geo.save({
........&gt;        name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;        loc: [ i, j ] });
........&gt; } }
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).limit(<span class="hljs-number">2</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/95701121"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"95701121"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"95701121"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">0</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/88426625"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"88426625"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"88426625"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      -<span class="hljs-number">10</span>, 
      <span class="hljs-number">0</span> 
    ] 
  } 
]
</pre>
</div>
<div id="007_collectionNear_short" onclick="$('#007_collectionNear_short').hide(); $('#007_collectionNear_long').show();">
<pre>
arangosh&gt; db.geo.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"loc"</span> ] });
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) { 
........&gt;   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;     db.geo.save({
........&gt;        name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;        loc: [ i, j ] });
........&gt; } }
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).limit(<span class="hljs-number">2</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
If you need the distance as well, then you can use the `distance`
operator:
<br />

<div id="008_collectionNearDistance_container">
<div id="008_collectionNearDistance_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.geo.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"loc"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"geo/165431425"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo1"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"loc"</span> 
  ], 
  <span class="hljs-string">"geoJson"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;     db.geo.save({
........&gt;         name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;         loc: [ i, j ] });
........&gt; } }
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).distance().limit(<span class="hljs-number">2</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/234834049"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"234834049"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"234834049"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">0</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">0</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/227559553"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"227559553"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"227559553"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      -<span class="hljs-number">10</span>, 
      <span class="hljs-number">0</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1111949.2664455874</span> 
  } 
]
</pre>
</div>
<div id="008_collectionNearDistance_short" onclick="$('#008_collectionNearDistance_short').hide(); $('#008_collectionNearDistance_long').show();">
<pre>
arangosh&gt; db.geo.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"loc"</span> ] });
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;     db.geo.save({
........&gt;         name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;         loc: [ i, j ] });
........&gt; } }
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).distance().limit(<span class="hljs-number">2</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionWithin

`collection.within(latitude, longitude, radius)`
<br />
This will find all documents within a given radius around the coordinate
(*latitude*, *longitude*). The returned array is sorted by distance,
beginning with the nearest document.
<br />
In order to use the *within* operator, a geo index must be defined for the
collection. This index also defines which attribute holds the coordinates
for the document.  If you have more then one geo-spatial index, you can use
the `geo` operator to select a particular index.
<br />
<br />
`collection.within(latitude, longitude, radius).distance()`
<br />
This will add an attribute `_distance` to all documents returned, which
contains the distance between the given point and the document in meters.
<br />
`collection.within(latitude, longitude, radius).distance(name)`
<br />
This will add an attribute *name* to all documents returned, which
contains the distance between the given point and the document in meters.
<br />
Note: the *within* simple query function is **deprecated** as of ArangoDB 2.6. 
The function may be removed in future versions of ArangoDB. The preferred
way for retrieving documents from a collection using the within operator  is
to use the AQL *WITHIN* function in an [AQL query](../Aql/GeoFunctions.md) as follows: 
<br />
    FOR doc IN WITHIN(@@collection, @latitude, @longitude, @radius, @distanceAttributeName)
      RETURN doc
<br />
@EXAMPLES
<br />
To find all documents within a radius of 2000 km use:
<br />

<div id="009_collectionWithin_container">
<div id="009_collectionWithin_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt; db.geo.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j, loc: [ i, j ] }); } }
arangosh&gt; db.geo.within(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span> * <span class="hljs-number">1000</span>).distance().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/373966977"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"373966977"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"373966977"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">0</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">0</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/366692481"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"366692481"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"366692481"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      -<span class="hljs-number">10</span>, 
      <span class="hljs-number">0</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1111949.2664455874</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/374163585"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"374163585"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"374163585"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/10"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">10</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1111949.2664455874</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/381241473"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"381241473"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"381241473"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/10/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">10</span>, 
      <span class="hljs-number">0</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1111949.2664455874</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/373770369"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"373770369"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"373770369"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/-10"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">0</span>, 
      -<span class="hljs-number">10</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1111949.2664455874</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/366889089"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"366889089"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"366889089"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/10"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      -<span class="hljs-number">10</span>, 
      <span class="hljs-number">10</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1568520.5567985761</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/381438081"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"381438081"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"381438081"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/10/10"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">10</span>, 
      <span class="hljs-number">10</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1568520.5567985761</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/366495873"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"366495873"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"366495873"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/-10"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      -<span class="hljs-number">10</span>, 
      -<span class="hljs-number">10</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1568520.5567985761</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/381044865"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"381044865"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"381044865"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/10/-10"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">10</span>, 
      -<span class="hljs-number">10</span> 
    ], 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1568520.5567985761</span> 
  } 
]
</pre>
</div>
<div id="009_collectionWithin_short" onclick="$('#009_collectionWithin_short').hide(); $('#009_collectionWithin_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt; db.geo.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j, loc: [ i, j ] }); } }
arangosh&gt; db.geo.within(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span> * <span class="hljs-number">1000</span>).distance().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock collectionIterate

@brief iterates over some elements of a collection
`collection.iterate(iterator, options)`
<br />
Iterates over some elements of the collection and apply the function
*iterator* to the elements. The function will be called with the
document as first argument and the current number (starting with 0)
as second argument.
<br />
*options* must be an object with the following attributes:
<br />
- *limit* (optional, default none): use at most *limit* documents.
<br />
- *probability* (optional, default all): a number between *0* and
  *1*. Documents are chosen with this probability.
<br />
@EXAMPLES
<br />

<div id="accessViaGeoIndex_container">
<div id="accessViaGeoIndex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>;  j &lt;= <span class="hljs-number">180</span>;  j += <span class="hljs-number">10</span>) {
........&gt;    db.example.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;                      home : [ i, j ],
........&gt;                      work : [ -i, -j ] });
........&gt;  }
........&gt; }
........&gt; 
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"home"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/1075202177"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo1"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"home"</span> 
  ], 
  <span class="hljs-string">"geoJson"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; items = db.example.getIndexes().map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x.id; });
........&gt; db.example.index(items[<span class="hljs-number">1</span>]);
[ 
  <span class="hljs-string">"example/0"</span>, 
  <span class="hljs-string">"example/1075202177"</span> 
]
</pre>
</div>
<div id="accessViaGeoIndex_short" onclick="$('#accessViaGeoIndex_short').hide(); $('#accessViaGeoIndex_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;  <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>;  j &lt;= <span class="hljs-number">180</span>;  j += <span class="hljs-number">10</span>) {
........&gt;    db.example.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j,
........&gt;                      home : [ i, j ],
........&gt;                      work : [ -i, -j ] });
........&gt;  }
........&gt; }
........&gt; 
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"home"</span> ] });
arangosh&gt; items = db.example.getIndexes().map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x.id; });
........&gt; db.example.index(items[<span class="hljs-number">1</span>]);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock documentsCollectionRemoveByExample

`collection.removeByExample(example)`
<br />
Removes all documents matching an example.
<br />
`collection.removeByExample(document, waitForSync)`
<br />
The optional *waitForSync* parameter can be used to force synchronization
of the document deletion operation to disk even in case that the
*waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* parameter can be used to force synchronization of just
specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
`collection.removeByExample(document, waitForSync, limit)`
<br />
The optional *limit* parameter can be used to restrict the number of
removals to the specified value. If *limit* is specified but less than the
number of documents in the collection, it is undefined which documents are
removed.
<br />
@EXAMPLES
<br />

<div id="010_documentsCollectionRemoveByExample_container">
<div id="010_documentsCollectionRemoveByExample_long">
<pre>
arangosh&gt; db.example.removeByExample( {Hello : <span class="hljs-string">"world"</span>} );
<span class="hljs-number">1</span>
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock documentsCollectionReplaceByExample

`collection.replaceByExample(example, newValue)`
<br />
Replaces all documents matching an example with a new document body.
The entire document body of each document matching the *example* will be
replaced with *newValue*. The document meta-attributes such as *_id*,
*_key*, *_from*, *_to* will not be replaced.
<br />
`collection.replaceByExample(document, newValue, waitForSync)`
<br />
The optional *waitForSync* parameter can be used to force synchronization
of the document replacement operation to disk even in case that the
*waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* parameter can be used to force synchronization of just
specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
`collection.replaceByExample(document, newValue, waitForSync, limit)`
<br />
The optional *limit* parameter can be used to restrict the number of
replacements to the specified value. If *limit* is specified but less than
the number of documents in the collection, it is undefined which documents are
replaced.
<br />
@EXAMPLES
<br />

<div id="011_documentsCollectionReplaceByExample_container">
<div id="011_documentsCollectionReplaceByExample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.save({ Hello : <span class="hljs-string">"world"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/444614785"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"444614785"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"444614785"</span> 
}
arangosh&gt; db.example.replaceByExample({ Hello: <span class="hljs-string">"world"</span> }, {Hello: <span class="hljs-string">"mars"</span>}, <span class="hljs-literal">false</span>, <span class="hljs-number">5</span>);
<span class="hljs-number">1</span>
</pre>
</div>
<div id="011_documentsCollectionReplaceByExample_short" onclick="$('#011_documentsCollectionReplaceByExample_short').hide(); $('#011_documentsCollectionReplaceByExample_long').show();">
<pre>
arangosh&gt; db.example.save({ Hello : <span class="hljs-string">"world"</span> });
arangosh&gt; db.example.replaceByExample({ Hello: <span class="hljs-string">"world"</span> }, {Hello: <span class="hljs-string">"mars"</span>}, <span class="hljs-literal">false</span>, <span class="hljs-number">5</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/arango-collection-common.js -->
@startDocuBlock documentsCollectionUpdateByExample

`collection.updateByExample(example, newValue)`
<br />
Partially updates all documents matching an example with a new document body.
Specific attributes in the document body of each document matching the
*example* will be updated with the values from *newValue*.
The document meta-attributes such as *_id*, *_key*, *_from*,
*_to* cannot be updated.
<br />
Partial update could also be used to append new fields,
if there were no old field with same name.
<br />
`collection.updateByExample(document, newValue, keepNull, waitForSync)`
<br />
The optional *keepNull* parameter can be used to modify the behavior when
handling *null* values. Normally, *null* values are stored in the
database. By setting the *keepNull* parameter to *false*, this behavior
can be changed so that all attributes in *data* with *null* values will
be removed from the target document.
<br />
The optional *waitForSync* parameter can be used to force synchronization
of the document replacement operation to disk even in case that the
*waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* parameter can be used to force synchronization of just
specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronization for collections that have a default *waitForSync* value
of *true*.
<br />
`collection.updateByExample(document, newValue, keepNull, waitForSync, limit)`
<br />
The optional *limit* parameter can be used to restrict the number of
updates to the specified value. If *limit* is specified but less than
the number of documents in the collection, it is undefined which documents are
updated.
<br />
`collection.updateByExample(document, newValue, options)`
<br />
Using this variant, the options for the operation can be passed using
an object with the following sub-attributes:
- *keepNull*
- *waitForSync*
- *limit*
- *mergeObjects*
<br />
@EXAMPLES
<br />

<div id="012_documentsCollectionUpdateByExample_container">
<div id="012_documentsCollectionUpdateByExample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.save({ Hello : <span class="hljs-string">"world"</span>, foo : <span class="hljs-string">"bar"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/445532289"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"445532289"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"445532289"</span> 
}
arangosh&gt; db.example.updateByExample({ Hello: <span class="hljs-string">"world"</span> }, { Hello: <span class="hljs-string">"foo"</span>, World: <span class="hljs-string">"bar"</span> }, <span class="hljs-literal">false</span>);
<span class="hljs-number">1</span>
arangosh&gt; db.example.byExample({ Hello: <span class="hljs-string">"foo"</span> }).toArray()
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/445532289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"445532289"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"445859969"</span>, 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"foo"</span>, 
    <span class="hljs-string">"foo"</span> : <span class="hljs-string">"bar"</span>, 
    <span class="hljs-string">"World"</span> : <span class="hljs-string">"bar"</span> 
  } 
]
</pre>
</div>
<div id="012_documentsCollectionUpdateByExample_short" onclick="$('#012_documentsCollectionUpdateByExample_short').hide(); $('#012_documentsCollectionUpdateByExample_long').show();">
<pre>
arangosh&gt; db.example.save({ Hello : <span class="hljs-string">"world"</span>, foo : <span class="hljs-string">"bar"</span> });
arangosh&gt; db.example.updateByExample({ Hello: <span class="hljs-string">"world"</span> }, { Hello: <span class="hljs-string">"foo"</span>, World: <span class="hljs-string">"bar"</span> }, <span class="hljs-literal">false</span>);
arangosh&gt; db.example.byExample({ Hello: <span class="hljs-string">"foo"</span> }).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock queryExecute

`query.execute(batchSize)`
<br />
Executes a simple query. If the optional batchSize value is specified,
the server will return at most batchSize values in one roundtrip.
The batchSize cannot be adjusted after the query is first executed.
<br />
**Note**: There is no need to explicitly call the execute method if another
means of fetching the query results is chosen. The following two approaches
lead to the same result:
<br />

<div id="executeQuery_container">
<div id="executeQuery_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; result = db.users.all().toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1141131393"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1141131393"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1141131393"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1141590145"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1141590145"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1141590145"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1141393537"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1141393537"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1141393537"</span> 
  } 
]
arangosh&gt; q = db.users.all(); q.execute(); result = [ ]; <span class="hljs-keyword">while</span> (q.hasNext()) { result.push(q.next()); }
SimpleQueryAll(users)
</pre>
</div>
<div id="executeQuery_short" onclick="$('#executeQuery_short').hide(); $('#executeQuery_long').show();">
<pre>
arangosh&gt; result = db.users.all().toArray();
arangosh&gt; q = db.users.all(); q.execute(); result = [ ]; <span class="hljs-keyword">while</span> (q.hasNext()) { result.push(q.next()); }
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
The following two alternatives both use a batchSize and return the same
result:
<br />

<div id="executeQueryBatchSize_container">
<div id="executeQueryBatchSize_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; q = db.users.all(); q.setBatchSize(<span class="hljs-number">20</span>); q.execute(); <span class="hljs-keyword">while</span> (q.hasNext()) { print(q.next()); }
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1142245505"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1142245505"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1142245505"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1142704257"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1142704257"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1142704257"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1142507649"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1142507649"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1142507649"</span> 
}
SimpleQueryAll(users)
arangosh&gt; q = db.users.all(); q.execute(<span class="hljs-number">20</span>); <span class="hljs-keyword">while</span> (q.hasNext()) { print(q.next()); }
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gerhard"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1142245505"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1142245505"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1142245505"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1142704257"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1142704257"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1142704257"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helmut"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1142507649"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1142507649"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1142507649"</span> 
}
SimpleQueryAll(users)
</pre>
</div>
<div id="executeQueryBatchSize_short" onclick="$('#executeQueryBatchSize_short').hide(); $('#executeQueryBatchSize_long').show();">
<pre>
arangosh&gt; q = db.users.all(); q.setBatchSize(<span class="hljs-number">20</span>); q.execute(); <span class="hljs-keyword">while</span> (q.hasNext()) { print(q.next()); }
arangosh&gt; q = db.users.all(); q.execute(<span class="hljs-number">20</span>); <span class="hljs-keyword">while</span> (q.hasNext()) { print(q.next()); }
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock queryLimit

`query.limit(number)`
<br />
Limits a result to the first *number* documents. Specifying a limit of
*0* will return no documents at all. If you do not need a limit, just do
not add the limit operator. The limit must be non-negative.
<br />
In general the input to *limit* should be sorted. Otherwise it will be
unclear which documents will be included in the result set.
<br />
@EXAMPLES
<br />

<div id="queryLimit_container">
<div id="queryLimit_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.five.all().toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"two"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2411677825"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2411677825"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2411677825"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2411874433"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2411874433"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2411874433"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2411481217"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2411481217"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2411481217"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"five"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2412267649"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2412267649"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2412267649"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"four"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2412071041"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2412071041"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2412071041"</span> 
  } 
]
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"two"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2411677825"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2411677825"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2411677825"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2411874433"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2411874433"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2411874433"</span> 
  } 
]
</pre>
</div>
<div id="queryLimit_short" onclick="$('#queryLimit_short').hide(); $('#queryLimit_long').show();">
<pre>
arangosh&gt; db.five.all().toArray();
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock querySkip

`query.skip(number)`
<br />
Skips the first *number* documents. If *number* is positive, then this
number of documents are skipped before returning the query results.
<br />
In general the input to *skip* should be sorted. Otherwise it will be
unclear which documents will be included in the result set.
<br />
Note: using negative *skip* values is **deprecated** as of ArangoDB 2.6 and 
will not be supported in future versions of ArangoDB.
<br />
@EXAMPLES
<br />

<div id="querySkip_container">
<div id="querySkip_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.five.all().toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2413316225"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2413316225"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2413316225"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"two"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2413119617"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2413119617"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2413119617"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"four"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2413512833"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2413512833"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2413512833"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"five"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2413709441"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2413709441"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2413709441"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2412923009"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2412923009"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2412923009"</span> 
  } 
]
arangosh&gt; db.five.all().skip(<span class="hljs-number">3</span>).toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"five"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2413709441"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2413709441"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2413709441"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2412923009"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2412923009"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2412923009"</span> 
  } 
]
</pre>
</div>
<div id="querySkip_short" onclick="$('#querySkip_short').hide(); $('#querySkip_long').show();">
<pre>
arangosh&gt; db.five.all().toArray();
arangosh&gt; db.five.all().skip(<span class="hljs-number">3</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock cursorGetBatchSize

`cursor.getBatchSize()`
<br />
Returns the batch size for queries. If the returned value is undefined, the
server will determine a sensible batch size for any following requests.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock cursorSetBatchSize

`cursor.setBatchSize(number)`
<br />
Sets the batch size for queries. The batch size determines how many results
are at most transferred from the server to the client in one chunk.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock cursorCount

`cursor.count()`
<br />
The *count* operator counts the number of document in the result set and
returns that number. The *count* operator ignores any limits and returns
the total number of documents found.
<br />
**Note**: Not all simple queries support counting. In this case *null* is
returned.
<br />
`cursor.count(true)`
<br />
If the result set was limited by the *limit* operator or documents were
skiped using the *skip* operator, the *count* operator with argument
*true* will use the number of elements in the final result set - after
applying *limit* and *skip*.
<br />
**Note**: Not all simple queries support counting. In this case *null* is
returned.
<br />
@EXAMPLES
<br />
Ignore any limit:
<br />

<div id="cursorCount_container">
<div id="cursorCount_long">
<pre>
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).count();
<span class="hljs-literal">null</span>
</pre>
</div>
</div>

<br />
Counting any limit or skip:
<br />

<div id="cursorCountLimit_container">
<div id="cursorCountLimit_long">
<pre>
arangosh&gt; db.five.all().limit(<span class="hljs-number">2</span>).count(<span class="hljs-literal">true</span>);
<span class="hljs-number">2</span>
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock cursorHasNext

`cursor.hasNext()`
<br />
The *hasNext* operator returns *true*, then the cursor still has
documents. In this case the next document can be accessed using the
*next* operator, which will advance the cursor.
<br />
@EXAMPLES
<br />

<div id="cursorHasNext_container">
<div id="cursorHasNext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> a = db.five.all();
arangosh&gt; <span class="hljs-keyword">while</span> (a.hasNext()) print(a.next());
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"five"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/1104562305"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1104562305"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1104562305"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"four"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/1104365697"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1104365697"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1104365697"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"three"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/1104169089"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1104169089"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1104169089"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"one"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/1103775873"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1103775873"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1103775873"</span> 
}
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"two"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/1103972481"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1103972481"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1103972481"</span> 
}
</pre>
</div>
<div id="cursorHasNext_short" onclick="$('#cursorHasNext_short').hide(); $('#cursorHasNext_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> a = db.five.all();
arangosh&gt; <span class="hljs-keyword">while</span> (a.hasNext()) print(a.next());
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock cursorNext

`cursor.next()`
<br />
If the *hasNext* operator returns *true*, then the underlying
cursor of the simple query still has documents.  In this case the
next document can be accessed using the *next* operator, which
will advance the underlying cursor. If you use *next* on an
exhausted cursor, then *undefined* is returned.
<br />
@EXAMPLES
<br />

<div id="cursorNext_container">
<div id="cursorNext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.five.all().next();
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"two"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/1105348737"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1105348737"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1105348737"</span> 
}
</pre>
</div>
<div id="cursorNext_short" onclick="$('#cursorNext_short').hide(); $('#cursorNext_long').show();">
<pre>
arangosh&gt; db.five.all().next();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/simple-query-common.js -->
@startDocuBlock cursorDispose

`cursor.dispose()`
<br />
If you are no longer interested in any further results, you should call
*dispose* in order to free any resources associated with the cursor.
After calling *dispose* you can no longer access the cursor.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_example_description

<br />
For many of the following functions *examples* can be passed in as a parameter.
*Examples* are used to filter the result set for objects that match the conditions.
These *examples* can have the following values:
<br />
* *null*, there is no matching executed all found results are valid.
* A *string*, only results are returned, which *_id* equal the value of the string
* An example *object*, defining a set of attributes.
    Only results having these attributes are matched.
* A *list* containing example *objects* and/or *strings*.
    All results matching at least one of the elements in the list are returned.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_edges

@brief Select all edges for the vertices selected before.
<br />
`graph_query.edges(examples)`
<br />
Creates an AQL statement to select all edges for each of the vertices selected
in the step before.
This will include *inbound* as well as *outbound* edges.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
The complexity of this method is **O(n\*m^x)** with *n* being the vertices defined by the
parameter vertexExamplex, *m* the average amount of edges of a vertex and *x* the maximal depths.
Hence the default call would have a complexity of **O(n\*m)**;
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
To request unfiltered edges:
<br />

<div id="generalGraphFluentAQLEdgesUnfiltered_container">
<div id="generalGraphFluentAQLEdgesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.edges().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1372866689"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1373128833"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1372866689"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1373522049"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLEdgesUnfiltered_short" onclick="$('#generalGraphFluentAQLEdgesUnfiltered_short').hide(); $('#generalGraphFluentAQLEdgesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.edges().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered edges by a single example:
<br />

<div id="generalGraphFluentAQLEdgesFilteredSingle_container">
<div id="generalGraphFluentAQLEdgesFilteredSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.edges({type: <span class="hljs-string">"married"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1369262209"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1369262209"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLEdgesFilteredSingle_short" onclick="$('#generalGraphFluentAQLEdgesFilteredSingle_short').hide(); $('#generalGraphFluentAQLEdgesFilteredSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.edges({type: <span class="hljs-string">"married"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered edges by multiple examples:
<br />

<div id="generalGraphFluentAQLEdgesFilteredMultiple_container">
<div id="generalGraphFluentAQLEdgesFilteredMultiple_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.edges([{type: <span class="hljs-string">"married"</span>}, {type: <span class="hljs-string">"friend"</span>}]).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1365657729"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1365919873"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1365657729"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1366313089"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLEdgesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLEdgesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLEdgesFilteredMultiple_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.edges([{type: <span class="hljs-string">"married"</span>}, {type: <span class="hljs-string">"friend"</span>}]).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_outEdges

@brief Select all outbound edges for the vertices selected before.
<br />
`graph_query.outEdges(examples)`
<br />
Creates an AQL statement to select all *outbound* edges for each of the vertices selected
in the step before.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
To request unfiltered outbound edges:
<br />

<div id="generalGraphFluentAQLOutEdgesUnfiltered_container">
<div id="generalGraphFluentAQLOutEdgesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.outEdges().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1437812865"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1438075009"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1438468225"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLOutEdgesUnfiltered_short" onclick="$('#generalGraphFluentAQLOutEdgesUnfiltered_short').hide(); $('#generalGraphFluentAQLOutEdgesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.outEdges().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered outbound edges by a single example:
<br />

<div id="generalGraphFluentAQLOutEdgesFilteredSingle_container">
<div id="generalGraphFluentAQLOutEdgesFilteredSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.outEdges({type: <span class="hljs-string">"married"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1434208385"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLOutEdgesFilteredSingle_short" onclick="$('#generalGraphFluentAQLOutEdgesFilteredSingle_short').hide(); $('#generalGraphFluentAQLOutEdgesFilteredSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.outEdges({type: <span class="hljs-string">"married"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered outbound edges by multiple examples:
<br />

<div id="generalGraphFluentAQLOutEdgesFilteredMultiple_container">
<div id="generalGraphFluentAQLOutEdgesFilteredMultiple_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.outEdges([{type: <span class="hljs-string">"married"</span>}, {type: <span class="hljs-string">"friend"</span>}]).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1430603905"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1430866049"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1431259265"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLOutEdgesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLOutEdgesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLOutEdgesFilteredMultiple_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.outEdges([{type: <span class="hljs-string">"married"</span>}, {type: <span class="hljs-string">"friend"</span>}]).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_inEdges

@brief Select all inbound edges for the vertices selected before.
<br />
`graph_query.inEdges(examples)`
<br />
<br />
Creates an AQL statement to select all *inbound* edges for each of the vertices selected
in the step before.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
To request unfiltered inbound edges:
<br />

<div id="generalGraphFluentAQLInEdgesUnfiltered_container">
<div id="generalGraphFluentAQLInEdgesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.inEdges().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1408911489"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLInEdgesUnfiltered_short" onclick="$('#generalGraphFluentAQLInEdgesUnfiltered_short').hide(); $('#generalGraphFluentAQLInEdgesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.inEdges().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered inbound edges by a single example:
<br />

<div id="generalGraphFluentAQLInEdgesFilteredSingle_container">
<div id="generalGraphFluentAQLInEdgesFilteredSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.inEdges({type: <span class="hljs-string">"married"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1405307009"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLInEdgesFilteredSingle_short" onclick="$('#generalGraphFluentAQLInEdgesFilteredSingle_short').hide(); $('#generalGraphFluentAQLInEdgesFilteredSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.inEdges({type: <span class="hljs-string">"married"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered inbound edges by multiple examples:
<br />

<div id="generalGraphFluentAQLInEdgesFilteredMultiple_container">
<div id="generalGraphFluentAQLInEdgesFilteredMultiple_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.inEdges([{type: <span class="hljs-string">"married"</span>}, {type: <span class="hljs-string">"friend"</span>}]).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1401702529"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLInEdgesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLInEdgesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLInEdgesFilteredMultiple_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]);
arangosh&gt; query.inEdges([{type: <span class="hljs-string">"married"</span>}, {type: <span class="hljs-string">"friend"</span>}]).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_vertices

@brief Select all vertices connected to the edges selected before.
<br />
`graph_query.vertices(examples)`
<br />
Creates an AQL statement to select all vertices for each of the edges selected
in the step before.
This includes all vertices contained in *_from* as well as *_to* attribute of the edges.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
To request unfiltered vertices:
<br />

<div id="generalGraphFluentAQLVerticesUnfiltered_container">
<div id="generalGraphFluentAQLVerticesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.vertices().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1487161473"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1487489153"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1487882369"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1487685761"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLVerticesUnfiltered_short" onclick="$('#generalGraphFluentAQLVerticesUnfiltered_short').hide(); $('#generalGraphFluentAQLVerticesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.vertices().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered vertices by a single example:
<br />

<div id="generalGraphFluentAQLVerticesFilteredSingle_container">
<div id="generalGraphFluentAQLVerticesFilteredSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.vertices({name: <span class="hljs-string">"Alice"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1483556993"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLVerticesFilteredSingle_short" onclick="$('#generalGraphFluentAQLVerticesFilteredSingle_short').hide(); $('#generalGraphFluentAQLVerticesFilteredSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.vertices({name: <span class="hljs-string">"Alice"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered vertices by multiple examples:
<br />

<div id="generalGraphFluentAQLVerticesFilteredMultiple_container">
<div id="generalGraphFluentAQLVerticesFilteredMultiple_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Charly"</span>}]).toArray();
[ ]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_fromVertices

@brief Select all source vertices of the edges selected before.
<br />
`graph_query.fromVertices(examples)`
<br />
Creates an AQL statement to select the set of vertices where the edges selected
in the step before start at.
This includes all vertices contained in *_from* attribute of the edges.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
To request unfiltered source vertices:
<br />

<div id="generalGraphFluentAQLFromVerticesUnfiltered_container">
<div id="generalGraphFluentAQLFromVerticesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.fromVertices().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1389840513"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1390364801"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLFromVerticesUnfiltered_short" onclick="$('#generalGraphFluentAQLFromVerticesUnfiltered_short').hide(); $('#generalGraphFluentAQLFromVerticesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.fromVertices().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered source vertices by a single example:
<br />

<div id="generalGraphFluentAQLFromVerticesFilteredSingle_container">
<div id="generalGraphFluentAQLFromVerticesFilteredSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.fromVertices({name: <span class="hljs-string">"Alice"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1386236033"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLFromVerticesFilteredSingle_short" onclick="$('#generalGraphFluentAQLFromVerticesFilteredSingle_short').hide(); $('#generalGraphFluentAQLFromVerticesFilteredSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.fromVertices({name: <span class="hljs-string">"Alice"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered source vertices by multiple examples:
<br />

<div id="generalGraphFluentAQLFromVerticesFilteredMultiple_container">
<div id="generalGraphFluentAQLFromVerticesFilteredMultiple_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.fromVertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Charly"</span>}]).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1382631553"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1383155841"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLFromVerticesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLFromVerticesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLFromVerticesFilteredMultiple_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.fromVertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Charly"</span>}]).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_toVertices

@brief Select all vertices targeted by the edges selected before.
<br />
`graph_query.toVertices(examples)`
<br />
Creates an AQL statement to select the set of vertices where the edges selected
in the step before end in.
This includes all vertices contained in *_to* attribute of the edges.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
To request unfiltered target vertices:
<br />

<div id="generalGraphFluentAQLToVerticesUnfiltered_container">
<div id="generalGraphFluentAQLToVerticesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1465862273"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1466255489"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLToVerticesUnfiltered_short" onclick="$('#generalGraphFluentAQLToVerticesUnfiltered_short').hide(); $('#generalGraphFluentAQLToVerticesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered target vertices by a single example:
<br />

<div id="generalGraphFluentAQLToVerticesFilteredSingle_container">
<div id="generalGraphFluentAQLToVerticesFilteredSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices({name: <span class="hljs-string">"Bob"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1462257793"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLToVerticesFilteredSingle_short" onclick="$('#generalGraphFluentAQLToVerticesFilteredSingle_short').hide(); $('#generalGraphFluentAQLToVerticesFilteredSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices({name: <span class="hljs-string">"Bob"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered target vertices by multiple examples:
<br />

<div id="generalGraphFluentAQLToVerticesFilteredMultiple_container">
<div id="generalGraphFluentAQLToVerticesFilteredMultiple_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices([{name: <span class="hljs-string">"Bob"</span>}, {name: <span class="hljs-string">"Diana"</span>}]).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1458653313"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1459046529"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLToVerticesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLToVerticesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLToVerticesFilteredMultiple_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices([{name: <span class="hljs-string">"Bob"</span>}, {name: <span class="hljs-string">"Diana"</span>}]).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_path

@brief The result of the query is the path to all elements.
<br />
`graph_query.path()`
<br />
By defaut the result of the generated AQL query is the set of elements passing the last matches.
So having a `vertices()` query as the last step the result will be set of vertices.
Using `path()` as the last action before requesting the result
will modify the result such that the path required to find the set vertices is returned.
<br />
@EXAMPLES
<br />
Request the iteratively explored path using vertices and edges:
<br />

<div id="generalGraphFluentAQLPathSimple_container">
<div id="generalGraphFluentAQLPathSimple_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.outEdges().toVertices().path().toArray();
[ 
  [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1443973249"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1445021825"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1444300929"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
    } 
  ], 
  [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1443973249"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1445283969"</span>, 
      <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
      <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1444497537"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphFluentAQLPathSimple_short" onclick="$('#generalGraphFluentAQLPathSimple_short').hide(); $('#generalGraphFluentAQLPathSimple_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.outEdges().toVertices().path().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
When requesting neighbors the path to these neighbors is expanded:
<br />

<div id="generalGraphFluentAQLPathNeighbors_container">
<div id="generalGraphFluentAQLPathNeighbors_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.neighbors().path().toArray();
[ 
  [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1440368769"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1440893057"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
    } 
  ], 
  [ 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1440368769"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
    }, 
    { 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1440696449"</span>, 
      <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphFluentAQLPathNeighbors_short" onclick="$('#generalGraphFluentAQLPathNeighbors_short').hide(); $('#generalGraphFluentAQLPathNeighbors_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.neighbors().path().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_neighbors

@brief Select all neighbors of the vertices selected in the step before.
<br />
`graph_query.neighbors(examples, options)`
<br />
Creates an AQL statement to select all neighbors for each of the vertices selected
in the step before.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@PARAM{options, object, optional}
  An object defining further options. Can have the following values:
  * *direction*: The direction of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeExamples*: Filter the edges to be followed, see [Definition of examples](#definition-of-examples)
  * *edgeCollectionRestriction* : One or a list of edge-collection names that should be
      considered to be on the path.
  * *vertexCollectionRestriction* : One or a list of vertex-collection names that should be
      considered on the intermediate vertex steps.
  * *minDepth*: Defines the minimal number of intermediate steps to neighbors (default is 1).
  * *maxDepth*: Defines the maximal number of intermediate steps to neighbors (default is 1).
<br />
@EXAMPLES
<br />
To request unfiltered neighbors:
<br />

<div id="generalGraphFluentAQLNeighborsUnfiltered_container">
<div id="generalGraphFluentAQLNeighborsUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.neighbors().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1419200641"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1419004033"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLNeighborsUnfiltered_short" onclick="$('#generalGraphFluentAQLNeighborsUnfiltered_short').hide(); $('#generalGraphFluentAQLNeighborsUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.neighbors().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered neighbors by a single example:
<br />

<div id="generalGraphFluentAQLNeighborsFilteredSingle_container">
<div id="generalGraphFluentAQLNeighborsFilteredSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.neighbors({name: <span class="hljs-string">"Bob"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1415399553"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLNeighborsFilteredSingle_short" onclick="$('#generalGraphFluentAQLNeighborsFilteredSingle_short').hide(); $('#generalGraphFluentAQLNeighborsFilteredSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.neighbors({name: <span class="hljs-string">"Bob"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered neighbors by multiple examples:
<br />

<div id="generalGraphFluentAQLNeighborsFilteredMultiple_container">
<div id="generalGraphFluentAQLNeighborsFilteredMultiple_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.vertices([{name: <span class="hljs-string">"Bob"</span>}, {name: <span class="hljs-string">"Charly"</span>}]).toArray();
[ ]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_restrict

@brief Restricts the last statement in the chain to return
only elements of a specified set of collections
<br />
`graph_query.restrict(restrictions)`
<br />
By default all collections in the graph are searched for matching elements
whenever vertices and edges are requested.
Using *restrict* after such a statement allows to restrict the search
to a specific set of collections within the graph.
Restriction is only applied to this one part of the query.
It does not effect earlier or later statements.
<br />
@PARAMS
<br />
@PARAM{restrictions, array, optional}
Define either one or a list of collections in the graph.
Only elements from these collections are taken into account for the result.
<br />
@EXAMPLES
<br />
Request all directly connected vertices unrestricted:
<br />

<div id="generalGraphFluentAQLUnrestricted_container">
<div id="generalGraphFluentAQLUnrestricted_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.edges().vertices().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1476348033"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1476675713"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1476348033"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1476872321"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLUnrestricted_short" onclick="$('#generalGraphFluentAQLUnrestricted_short').hide(); $('#generalGraphFluentAQLUnrestricted_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.edges().vertices().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Apply a restriction to the directly connected vertices:
<br />

<div id="generalGraphFluentAQLRestricted_container">
<div id="generalGraphFluentAQLRestricted_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.edges().vertices().restrict(<span class="hljs-string">"female"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1447577729"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1447577729"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLRestricted_short" onclick="$('#generalGraphFluentAQLRestricted_short').hide(); $('#generalGraphFluentAQLRestricted_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.edges().vertices().restrict(<span class="hljs-string">"female"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Restriction of a query is only valid for collections known to the graph:
<br />

<div id="generalGraphFluentAQLRestrictedUnknown_container">
<div id="generalGraphFluentAQLRestrictedUnknown_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices({name: <span class="hljs-string">"Alice"</span>});
arangosh&gt; query.edges().vertices().restrict([<span class="hljs-string">"female"</span>, <span class="hljs-string">"male"</span>, <span class="hljs-string">"products"</span>]).toArray();
[ArangoError <span class="hljs-number">10</span>: vertex collections: products are not known to the graph]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_filter

@brief Filter the result of the query
<br />
`graph_query.filter(examples)`
<br />
This can be used to further specfiy the expected result of the query.
The result set is reduced to the set of elements that matches the given *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
Request vertices unfiltered:
<br />

<div id="generalGraphFluentAQLUnfilteredVertices_container">
<div id="generalGraphFluentAQLUnfilteredVertices_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1473071233"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1473464449"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLUnfilteredVertices_short" onclick="$('#generalGraphFluentAQLUnfilteredVertices_short').hide(); $('#generalGraphFluentAQLUnfilteredVertices_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Request vertices filtered:
<br />

<div id="generalGraphFluentAQLFilteredVertices_container">
<div id="generalGraphFluentAQLFilteredVertices_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().filter({name: <span class="hljs-string">"Alice"</span>}).toArray();
[ ]
</pre>
</div>
</div>

<br />
Request edges unfiltered:
<br />

<div id="generalGraphFluentAQLUnfilteredEdges_container">
<div id="generalGraphFluentAQLUnfilteredEdges_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().outEdges().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1470843009"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLUnfilteredEdges_short" onclick="$('#generalGraphFluentAQLUnfilteredEdges_short').hide(); $('#generalGraphFluentAQLUnfilteredEdges_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().outEdges().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Request edges filtered:
<br />

<div id="generalGraphFluentAQLFilteredEdges_container">
<div id="generalGraphFluentAQLFilteredEdges_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._edges({type: <span class="hljs-string">"married"</span>});
arangosh&gt; query.toVertices().outEdges().filter({type: <span class="hljs-string">"married"</span>}).toArray();
[ ]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_toArray

@brief Returns an array containing the complete result.
<br />
`graph_query.toArray()`
<br />
This function executes the generated query and returns the
entire result as one array.
ToArray does not return the generated query anymore and
hence can only be the endpoint of a query.
However keeping a reference to the query before
executing allows to chain further statements to it.
<br />
@EXAMPLES
<br />
To collect the entire result of a query toArray can be used:
<br />

<div id="generalGraphFluentAQLToArray_container">
<div id="generalGraphFluentAQLToArray_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1455442049"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1454721153"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1455048833"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1455245441"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphFluentAQLToArray_short" onclick="$('#generalGraphFluentAQLToArray_short').hide(); $('#generalGraphFluentAQLToArray_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_count

@brief Returns the number of returned elements if the query is executed.
<br />
`graph_query.count()`
<br />
This function determines the amount of elements to be expected within the result of the query.
It can be used at the beginning of execution of the query
before using *next()* or in between *next()* calls.
The query object maintains a cursor of the query for you.
*count()* does not change the cursor position.
<br />
@EXAMPLES
<br />
To count the number of matched elements:
<br />

<div id="generalGraphFluentAQLCount_container">
<div id="generalGraphFluentAQLCount_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.count();
<span class="hljs-number">4</span>
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_hasNext

@brief Checks if the query has further results.
<br />
`graph_query.hasNext()`
<br />
The generated statement maintains a cursor for you.
If this cursor is already present *hasNext()* will
use this cursors position to determine if there are
further results available.
If the query has not yet been executed *hasNext()*
will execute it and create the cursor for you.
<br />
@EXAMPLES
<br />
Start query execution with hasNext:
<br />

<div id="generalGraphFluentAQLHasNext_container">
<div id="generalGraphFluentAQLHasNext_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.hasNext();
<span class="hljs-literal">true</span>
</pre>
</div>
</div>

<br />
Iterate over the result as long as it has more elements:
<br />

<div id="generalGraphFluentAQLHasNextIteration_container">
<div id="generalGraphFluentAQLHasNextIteration_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; <span class="hljs-keyword">while</span> (query.hasNext()) {
........&gt;   <span class="hljs-keyword">var</span> entry = query.next();
........&gt;   <span class="hljs-comment">// Do something with the entry</span>
........&gt; }
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_next

@brief Request the next element in the result.
<br />
`graph_query.next()`
<br />
The generated statement maintains a cursor for you.
If this cursor is already present *next()* will
use this cursors position to deliver the next result.
Also the cursor position will be moved by one.
If the query has not yet been executed *next()*
will execute it and create the cursor for you.
It will throw an error of your query has no further results.
<br />
@EXAMPLES
<br />
Request some elements with next:
<br />

<div id="generalGraphFluentAQLNext_container">
<div id="generalGraphFluentAQLNext_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.next();
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1423001729"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
}
arangosh&gt; query.next();
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1422280833"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
}
arangosh&gt; query.next();
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1422608513"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
}
arangosh&gt; query.next();
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1422805121"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
}
</pre>
</div>
<div id="generalGraphFluentAQLNext_short" onclick="$('#generalGraphFluentAQLNext_short').hide(); $('#generalGraphFluentAQLNext_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.next();
arangosh&gt; query.next();
arangosh&gt; query.next();
arangosh&gt; query.next();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
The cursor is recreated if the query is changed:
<br />

<div id="generalGraphFluentAQLNextRecreate_container">
<div id="generalGraphFluentAQLNextRecreate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.next();
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1426606209"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
}
arangosh&gt; query.edges();
[ GraphAQL social
.vertices()
.edges() ] 
arangosh&gt; query.next();
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1427392641"</span>, 
  <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
  <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
}
</pre>
</div>
<div id="generalGraphFluentAQLNextRecreate_short" onclick="$('#generalGraphFluentAQLNextRecreate_short').hide(); $('#generalGraphFluentAQLNextRecreate_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> query = graph._vertices();
arangosh&gt; query.next();
arangosh&gt; query.edges();
arangosh&gt; query.next();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_undirectedRelation

@brief Define an undirected relation.
<br />
`graph_module._undirectedRelation(relationName, vertexCollections)`
<br />
Defines an undirected relation with the name *relationName* using the
list of *vertexCollections*. This relation allows the user to store
edges in any direction between any pair of vertices within the
*vertexCollections*.
<br />
@PARAMS
<br />
@PARAM{relationName, string, required}
  The name of the edge collection where the edges should be stored.
  Will be created if it does not yet exist.
<br />
@PARAM{vertexCollections, array, required}
  One or a list of collection names for which connections are allowed.
  Will be created if they do not exist.
<br />
@EXAMPLES
<br />
To define simple relation with only one vertex collection:
<br />

<div id="generalGraphUndirectedRelationDefinition1_container">
<div id="generalGraphUndirectedRelationDefinition1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._undirectedRelation(<span class="hljs-string">"friend"</span>, <span class="hljs-string">"user"</span>);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"friend"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ] 
}
</pre>
</div>
<div id="generalGraphUndirectedRelationDefinition1_short" onclick="$('#generalGraphUndirectedRelationDefinition1_short').hide(); $('#generalGraphUndirectedRelationDefinition1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._undirectedRelation(<span class="hljs-string">"friend"</span>, <span class="hljs-string">"user"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To define a relation between several vertex collections:
<br />

<div id="generalGraphUndirectedRelationDefinition2_container">
<div id="generalGraphUndirectedRelationDefinition2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._undirectedRelation(<span class="hljs-string">"marriage"</span>, [<span class="hljs-string">"female"</span>, <span class="hljs-string">"male"</span>]);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"marriage"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"female"</span>, 
    <span class="hljs-string">"male"</span> 
  ] 
}
</pre>
</div>
<div id="generalGraphUndirectedRelationDefinition2_short" onclick="$('#generalGraphUndirectedRelationDefinition2_short').hide(); $('#generalGraphUndirectedRelationDefinition2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._undirectedRelation(<span class="hljs-string">"marriage"</span>, [<span class="hljs-string">"female"</span>, <span class="hljs-string">"male"</span>]);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_directedRelation

@brief Define a directed relation.
<br />
`graph_module._directedRelation(relationName, fromVertexCollections, toVertexCollections)`
<br />
The *relationName* defines the name of this relation and references to the underlying edge collection.
The *fromVertexCollections* is an Array of document collections holding the start vertices.
The *toVertexCollections* is an Array of document collections holding the target vertices.
Relations are only allowed in the direction from any collection in *fromVertexCollections*
to any collection in *toVertexCollections*.
<br />
@PARAMS
<br />
@PARAM{relationName, string, required}
  The name of the edge collection where the edges should be stored.
  Will be created if it does not yet exist.
<br />
@PARAM{fromVertexCollections, array, required}
  One or a list of collection names. Source vertices for the edges
  have to be stored in these collections. Collections will be created if they do not exist.
<br />
@PARAM{toVertexCollections, array, required}
  One or a list of collection names. Target vertices for the edges
  have to be stored in these collections. Collections will be created if they do not exist.
<br />
@EXAMPLES
<br />

<div id="generalGraphDirectedRelationDefinition_container">
<div id="generalGraphDirectedRelationDefinition_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._directedRelation(<span class="hljs-string">"has_bought"</span>, [<span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Company"</span>], [<span class="hljs-string">"Groceries"</span>, <span class="hljs-string">"Electronics"</span>]);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"has_bought"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"Customer"</span>, 
    <span class="hljs-string">"Company"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"Groceries"</span>, 
    <span class="hljs-string">"Electronics"</span> 
  ] 
}
</pre>
</div>
<div id="generalGraphDirectedRelationDefinition_short" onclick="$('#generalGraphDirectedRelationDefinition_short').hide(); $('#generalGraphDirectedRelationDefinition_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._directedRelation(<span class="hljs-string">"has_bought"</span>, [<span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Company"</span>], [<span class="hljs-string">"Groceries"</span>, <span class="hljs-string">"Electronics"</span>]);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_relation

@brief Define a directed relation.
<br />
`graph_module._relation(relationName, fromVertexCollections, toVertexCollections)`
<br />
The *relationName* defines the name of this relation and references to the underlying edge collection.
The *fromVertexCollections* is an Array of document collections holding the start vertices.
The *toVertexCollections* is an Array of document collections holding the target vertices.
Relations are only allowed in the direction from any collection in *fromVertexCollections*
to any collection in *toVertexCollections*.
<br />
@PARAMS
<br />
@PARAM{relationName, string, required}
  The name of the edge collection where the edges should be stored.
  Will be created if it does not yet exist.
<br />
@PARAM{fromVertexCollections, array, required}
  One or a list of collection names. Source vertices for the edges
  have to be stored in these collections. Collections will be created if they do not exist.
<br />
@PARAM{toVertexCollections, array, required}
  One or a list of collection names. Target vertices for the edges
  have to be stored in these collections. Collections will be created if they do not exist.
<br />
@EXAMPLES
<br />

<div id="generalGraphRelationDefinition_container">
<div id="generalGraphRelationDefinition_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._relation(<span class="hljs-string">"has_bought"</span>, [<span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Company"</span>], [<span class="hljs-string">"Groceries"</span>, <span class="hljs-string">"Electronics"</span>]);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"has_bought"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"Customer"</span>, 
    <span class="hljs-string">"Company"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"Groceries"</span>, 
    <span class="hljs-string">"Electronics"</span> 
  ] 
}
</pre>
</div>
<div id="generalGraphRelationDefinition_short" onclick="$('#generalGraphRelationDefinition_short').hide(); $('#generalGraphRelationDefinition_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._relation(<span class="hljs-string">"has_bought"</span>, [<span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Company"</span>], [<span class="hljs-string">"Groceries"</span>, <span class="hljs-string">"Electronics"</span>]);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />

<div id="generalGraphRelationDefinitionSingle_container">
<div id="generalGraphRelationDefinitionSingle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._relation(<span class="hljs-string">"has_bought"</span>, <span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Product"</span>);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"has_bought"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"Customer"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"Product"</span> 
  ] 
}
</pre>
</div>
<div id="generalGraphRelationDefinitionSingle_short" onclick="$('#generalGraphRelationDefinitionSingle_short').hide(); $('#generalGraphRelationDefinitionSingle_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._relation(<span class="hljs-string">"has_bought"</span>, <span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Product"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_list

@brief List all graphs.
<br />
`graph_module._list()`
<br />
Lists all graph names stored in this database.
<br />
@EXAMPLES
<br />

<div id="generalGraphList_container">
<div id="generalGraphList_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._list();
[ ]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_edge_definitions

@brief Create a list of edge definitions to construct a graph.
<br />
`graph_module._edgeDefinitions(relation1, relation2, ..., relationN)`
<br />
The list of edge definitions of a graph can be managed by the graph module itself.
This function is the entry point for the management and will return the correct list.
<br />
@PARAMS
<br />
@PARAM{relationX, object, optional}
An object representing a definition of one relation in the graph
<br />
@EXAMPLES
<br />

<div id="generalGraphEdgeDefinitions_container">
<div id="generalGraphEdgeDefinitions_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; directed_relation = graph_module._relation(<span class="hljs-string">"lives_in"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"city"</span>);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"lives_in"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"city"</span> 
  ] 
}
arangosh&gt; undirected_relation = graph_module._relation(<span class="hljs-string">"knows"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"user"</span>);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"knows"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ] 
}
arangosh&gt; edgedefinitions = graph_module._edgeDefinitions(directed_relation, undirected_relation);
[ 
  { 
    <span class="hljs-string">"collection"</span> : <span class="hljs-string">"lives_in"</span>, 
    <span class="hljs-string">"from"</span> : [ 
      <span class="hljs-string">"user"</span> 
    ], 
    <span class="hljs-string">"to"</span> : [ 
      <span class="hljs-string">"city"</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"collection"</span> : <span class="hljs-string">"knows"</span>, 
    <span class="hljs-string">"from"</span> : [ 
      <span class="hljs-string">"user"</span> 
    ], 
    <span class="hljs-string">"to"</span> : [ 
      <span class="hljs-string">"user"</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphEdgeDefinitions_short" onclick="$('#generalGraphEdgeDefinitions_short').hide(); $('#generalGraphEdgeDefinitions_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; directed_relation = graph_module._relation(<span class="hljs-string">"lives_in"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"city"</span>);
arangosh&gt; undirected_relation = graph_module._relation(<span class="hljs-string">"knows"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"user"</span>);
arangosh&gt; edgedefinitions = graph_module._edgeDefinitions(directed_relation, undirected_relation);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_extend_edge_definitions

@brief Extend the list of edge definitions to construct a graph.
<br />
`graph_module._extendEdgeDefinitions(edgeDefinitions, relation1, relation2, ..., relationN)`
<br />
In order to add more edge definitions to the graph before creating
this function can be used to add more definitions to the initial list.
<br />
@PARAMS
<br />
@PARAM{edgeDefinitions, array, required}
A list of relation definition objects.
<br />
@PARAM{relationX, object, required}
An object representing a definition of one relation in the graph
<br />
@EXAMPLES
<br />

<div id="generalGraphEdgeDefinitionsExtend_container">
<div id="generalGraphEdgeDefinitionsExtend_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; directed_relation = graph_module._relation(<span class="hljs-string">"lives_in"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"city"</span>);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"lives_in"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"city"</span> 
  ] 
}
arangosh&gt; undirected_relation = graph_module._relation(<span class="hljs-string">"knows"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"user"</span>);
{ 
  <span class="hljs-string">"collection"</span> : <span class="hljs-string">"knows"</span>, 
  <span class="hljs-string">"from"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ], 
  <span class="hljs-string">"to"</span> : [ 
    <span class="hljs-string">"user"</span> 
  ] 
}
arangosh&gt; edgedefinitions = graph_module._edgeDefinitions(directed_relation);
[ 
  { 
    <span class="hljs-string">"collection"</span> : <span class="hljs-string">"lives_in"</span>, 
    <span class="hljs-string">"from"</span> : [ 
      <span class="hljs-string">"user"</span> 
    ], 
    <span class="hljs-string">"to"</span> : [ 
      <span class="hljs-string">"city"</span> 
    ] 
  } 
]
arangosh&gt; edgedefinitions = graph_module._extendEdgeDefinitions(undirected_relation);
</pre>
</div>
<div id="generalGraphEdgeDefinitionsExtend_short" onclick="$('#generalGraphEdgeDefinitionsExtend_short').hide(); $('#generalGraphEdgeDefinitionsExtend_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; directed_relation = graph_module._relation(<span class="hljs-string">"lives_in"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"city"</span>);
arangosh&gt; undirected_relation = graph_module._relation(<span class="hljs-string">"knows"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"user"</span>);
arangosh&gt; edgedefinitions = graph_module._edgeDefinitions(directed_relation);
arangosh&gt; edgedefinitions = graph_module._extendEdgeDefinitions(undirected_relation);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_create

@brief Create a graph
<br />
`graph_module._create(graphName, edgeDefinitions, orphanCollections)`
<br />
The creation of a graph requires the name of the graph and a definition of its edges.
<br />
For every type of edge definition a convenience method exists that can be used to create a graph.
Optionally a list of vertex collections can be added, which are not used in any edge definition.
These collections are referred to as orphan collections within this chapter.
All collections used within the creation process are created if they do not exist.
<br />
@PARAMS
<br />
@PARAM{graphName, string, required}
Unique identifier of the graph
<br />
@PARAM{edgeDefinitions, array, optional}
List of relation definition objects
<br />
@PARAM{orphanCollections, array, optional}
List of additional vertex collection names
<br />
@EXAMPLES
<br />
Create an empty graph, edge definitions can be added at runtime:
<br />

<div id="generalGraphCreateGraph_container">
<div id="generalGraphCreateGraph_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph = graph_module._create(<span class="hljs-string">"myGraph"</span>);
[ Graph myGraph EdgeDefinitions: [ ] VertexCollections: [ ] ]
</pre>
</div>
</div>

<br />
Create a graph using an edge collection `edges` and a single vertex collection `vertices` 
<br />

<div id="generalGraphCreateGraphSingle_container">
<div id="generalGraphCreateGraphSingle_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> edgeDefinitions = [ { collection: <span class="hljs-string">"edges"</span>, <span class="hljs-string">"from"</span>: [ <span class="hljs-string">"vertices"</span> ], <span class="hljs-string">"to"</span> : [ <span class="hljs-string">"vertices"</span> ] } ];
arangosh&gt; graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, edgeDefinitions);
[ Graph myGraph EdgeDefinitions: [ 
  <span class="hljs-string">"edges: [vertices] -&gt; [vertices]"</span> 
] VertexCollections: [ ] ]
</pre>
</div>
</div>

<br />
Create a graph with edge definitions and orphan collections:
<br />

<div id="generalGraphCreateGraph2_container">
<div id="generalGraphCreateGraph2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph = graph_module._create(<span class="hljs-string">"myGraph"</span>,
........&gt; [graph_module._relation(<span class="hljs-string">"myRelation"</span>, [<span class="hljs-string">"male"</span>, <span class="hljs-string">"female"</span>], [<span class="hljs-string">"male"</span>, <span class="hljs-string">"female"</span>])], [<span class="hljs-string">"sessions"</span>]);
[ Graph myGraph EdgeDefinitions: [ 
  <span class="hljs-string">"myRelation: [female, male] -&gt; [female, male]"</span> 
] VertexCollections: [ 
  <span class="hljs-string">"sessions"</span> 
] ]
</pre>
</div>
<div id="generalGraphCreateGraph2_short" onclick="$('#generalGraphCreateGraph2_short').hide(); $('#generalGraphCreateGraph2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph = graph_module._create(<span class="hljs-string">"myGraph"</span>,
........&gt; [graph_module._relation(<span class="hljs-string">"myRelation"</span>, [<span class="hljs-string">"male"</span>, <span class="hljs-string">"female"</span>], [<span class="hljs-string">"male"</span>, <span class="hljs-string">"female"</span>])], [<span class="hljs-string">"sessions"</span>]);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_save

@brief Create a new vertex in vertexCollectionName
<br />
`graph.vertexCollectionName.save(data)`
<br />
@PARAMS
<br />
@PARAM{data, object, required}
JSON data of vertex.
<br />
@EXAMPLES
<br />

<div id="generalGraphVertexCollectionSave_container">
<div id="generalGraphVertexCollectionSave_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.male.save({name: <span class="hljs-string">"Floyd"</span>, _key: <span class="hljs-string">"floyd"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/floyd"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1857833089"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"floyd"</span> 
}
</pre>
</div>
<div id="generalGraphVertexCollectionSave_short" onclick="$('#generalGraphVertexCollectionSave_short').hide(); $('#generalGraphVertexCollectionSave_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.male.save({name: <span class="hljs-string">"Floyd"</span>, _key: <span class="hljs-string">"floyd"</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_replace

@brief Replaces the data of a vertex in collection vertexCollectionName
<br />
`graph.vertexCollectionName.replace(vertexId, data, options)`
<br />
@PARAMS
<br />
@PARAM{vertexId, string, required}
*_id* attribute of the vertex
<br />
@PARAM{data, object, required}
JSON data of vertex.
<br />
@PARAM{options, object, optional}
See [collection documentation](../Documents/DocumentMethods.md)
<br />
@EXAMPLES
<br />

<div id="generalGraphVertexCollectionReplace_container">
<div id="generalGraphVertexCollectionReplace_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.male.save({neym: <span class="hljs-string">"Jon"</span>, _key: <span class="hljs-string">"john"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/john"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1853900929"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"john"</span> 
}
arangosh&gt; graph.male.replace(<span class="hljs-string">"male/john"</span>, {name: <span class="hljs-string">"John"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/john"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1854097537"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"john"</span> 
}
</pre>
</div>
<div id="generalGraphVertexCollectionReplace_short" onclick="$('#generalGraphVertexCollectionReplace_short').hide(); $('#generalGraphVertexCollectionReplace_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.male.save({neym: <span class="hljs-string">"Jon"</span>, _key: <span class="hljs-string">"john"</span>});
arangosh&gt; graph.male.replace(<span class="hljs-string">"male/john"</span>, {name: <span class="hljs-string">"John"</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_update

@brief Updates the data of a vertex in collection vertexCollectionName
<br />
`graph.vertexCollectionName.update(vertexId, data, options)`
<br />
@PARAMS
<br />
@PARAM{vertexId, string, required}
*_id* attribute of the vertex
<br />
@PARAM{data, object, required}
JSON data of vertex.
<br />
@PARAM{options, object, optional}
See [collection documentation](../Documents/DocumentMethods.md)
<br />
@EXAMPLES
<br />

<div id="generalGraphVertexCollectionUpdate_container">
<div id="generalGraphVertexCollectionUpdate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.female.save({name: <span class="hljs-string">"Lynda"</span>, _key: <span class="hljs-string">"linda"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/linda"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1861568641"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"linda"</span> 
}
arangosh&gt; graph.female.update(<span class="hljs-string">"female/linda"</span>, {name: <span class="hljs-string">"Linda"</span>, _key: <span class="hljs-string">"linda"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/linda"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1861765249"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"linda"</span> 
}
</pre>
</div>
<div id="generalGraphVertexCollectionUpdate_short" onclick="$('#generalGraphVertexCollectionUpdate_short').hide(); $('#generalGraphVertexCollectionUpdate_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.female.save({name: <span class="hljs-string">"Lynda"</span>, _key: <span class="hljs-string">"linda"</span>});
arangosh&gt; graph.female.update(<span class="hljs-string">"female/linda"</span>, {name: <span class="hljs-string">"Linda"</span>, _key: <span class="hljs-string">"linda"</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_remove

@brief Removes a vertex in collection *vertexCollectionName*
<br />
`graph.vertexCollectionName.remove(vertexId, options)`
<br />
Additionally removes all ingoing and outgoing edges of the vertex recursively
(see [edge remove](#remove-an-edge)).
<br />
@PARAMS
<br />
@PARAM{vertexId, string, required}
*_id* attribute of the vertex
<br />
@PARAM{options, object, optional}
See [collection documentation](../Documents/DocumentMethods.md)
<br />
@EXAMPLES
<br />

<div id="generalGraphVertexCollectionRemove_container">
<div id="generalGraphVertexCollectionRemove_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.male.save({name: <span class="hljs-string">"Kermit"</span>, _key: <span class="hljs-string">"kermit"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/kermit"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1849444481"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"kermit"</span> 
}
arangosh&gt; db._exists(<span class="hljs-string">"male/kermit"</span>)
<span class="hljs-literal">true</span>
arangosh&gt; graph.male.remove(<span class="hljs-string">"male/kermit"</span>)
<span class="hljs-literal">true</span>
arangosh&gt; db._exists(<span class="hljs-string">"male/kermit"</span>)
<span class="hljs-literal">false</span>
</pre>
</div>
<div id="generalGraphVertexCollectionRemove_short" onclick="$('#generalGraphVertexCollectionRemove_short').hide(); $('#generalGraphVertexCollectionRemove_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.male.save({name: <span class="hljs-string">"Kermit"</span>, _key: <span class="hljs-string">"kermit"</span>});
arangosh&gt; db._exists(<span class="hljs-string">"male/kermit"</span>)
arangosh&gt; graph.male.remove(<span class="hljs-string">"male/kermit"</span>)
arangosh&gt; db._exists(<span class="hljs-string">"male/kermit"</span>)
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_save

@brief Creates an edge from vertex *from* to vertex *to* in collection edgeCollectionName
<br />
`graph.edgeCollectionName.save(from, to, data, options)`
<br />
@PARAMS
<br />
@PARAM{from, string, required}
*_id* attribute of the source vertex
<br />
@PARAM{to, string, required}
*_id* attribute of the target vertex
<br />
@PARAM{data, object, required}
JSON data of the edge
<br />
@PARAM{options, object, optional}
See [collection documentation](../Edges/README.md)
<br />
@EXAMPLES
<br />

<div id="generalGraphEdgeCollectionSave1_container">
<div id="generalGraphEdgeCollectionSave1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"male/bob"</span>, <span class="hljs-string">"female/alice"</span>, {type: <span class="hljs-string">"married"</span>, _key: <span class="hljs-string">"bobAndAlice"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndAlice"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1325025409"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndAlice"</span> 
}
</pre>
</div>
<div id="generalGraphEdgeCollectionSave1_short" onclick="$('#generalGraphEdgeCollectionSave1_short').hide(); $('#generalGraphEdgeCollectionSave1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"male/bob"</span>, <span class="hljs-string">"female/alice"</span>, {type: <span class="hljs-string">"married"</span>, _key: <span class="hljs-string">"bobAndAlice"</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
If the collections of *from* and *to* are not defined in an edge definition of the graph,
the edge will not be stored.
<br />

<div id="generalGraphEdgeCollectionSave2_container">
<div id="generalGraphEdgeCollectionSave2_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(
........&gt;  <span class="hljs-string">"relation/aliceAndBob"</span>,
........&gt;   <span class="hljs-string">"female/alice"</span>,
........&gt; {type: <span class="hljs-string">"married"</span>, _key: <span class="hljs-string">"bobAndAlice"</span>});
[ArangoError <span class="hljs-number">1906</span>: invalid edge between relation/aliceAndBob and female/alice.]
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_replace

@brief Replaces the data of an edge in collection edgeCollectionName
<br />
`graph.edgeCollectionName.replace(edgeId, data, options)`
<br />
@PARAMS
<br />
@PARAM{edgeId, string, required}
*_id* attribute of the edge
<br />
@PARAM{data, object, required}
JSON data of the edge
<br />
@PARAM{options, object, optional}
See [collection documentation](../Documents/DocumentMethods.md)
<br />
@EXAMPLES
<br />

<div id="generalGraphEdgeCollectionReplace_container">
<div id="generalGraphEdgeCollectionReplace_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"female/alice"</span>, <span class="hljs-string">"female/diana"</span>, {typo: <span class="hljs-string">"nose"</span>, _key: <span class="hljs-string">"aliceAndDiana"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndDiana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1321093249"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndDiana"</span> 
}
arangosh&gt; graph.relation.replace(<span class="hljs-string">"relation/aliceAndDiana"</span>, {type: <span class="hljs-string">"knows"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndDiana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1321289857"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndDiana"</span> 
}
</pre>
</div>
<div id="generalGraphEdgeCollectionReplace_short" onclick="$('#generalGraphEdgeCollectionReplace_short').hide(); $('#generalGraphEdgeCollectionReplace_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"female/alice"</span>, <span class="hljs-string">"female/diana"</span>, {typo: <span class="hljs-string">"nose"</span>, _key: <span class="hljs-string">"aliceAndDiana"</span>});
arangosh&gt; graph.relation.replace(<span class="hljs-string">"relation/aliceAndDiana"</span>, {type: <span class="hljs-string">"knows"</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_update

@brief Updates the data of an edge in collection edgeCollectionName
<br />
`graph.edgeCollectionName.update(edgeId, data, options)`
<br />
@PARAMS
<br />
@PARAM{edgeId, string, required}
*_id* attribute of the edge
<br />
@PARAM{data, object, required}
JSON data of the edge
<br />
@PARAM{options, object, optional}
See [collection documentation](../Documents/DocumentMethods.md)
<br />
@EXAMPLES
<br />

<div id="generalGraphEdgeCollectionUpdate_container">
<div id="generalGraphEdgeCollectionUpdate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"female/alice"</span>, <span class="hljs-string">"female/diana"</span>, {type: <span class="hljs-string">"knows"</span>, _key: <span class="hljs-string">"aliceAndDiana"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndDiana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1332299905"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndDiana"</span> 
}
arangosh&gt; graph.relation.update(<span class="hljs-string">"relation/aliceAndDiana"</span>, {type: <span class="hljs-string">"quarrelled"</span>, _key: <span class="hljs-string">"aliceAndDiana"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndDiana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1332496513"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndDiana"</span> 
}
</pre>
</div>
<div id="generalGraphEdgeCollectionUpdate_short" onclick="$('#generalGraphEdgeCollectionUpdate_short').hide(); $('#generalGraphEdgeCollectionUpdate_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"female/alice"</span>, <span class="hljs-string">"female/diana"</span>, {type: <span class="hljs-string">"knows"</span>, _key: <span class="hljs-string">"aliceAndDiana"</span>});
arangosh&gt; graph.relation.update(<span class="hljs-string">"relation/aliceAndDiana"</span>, {type: <span class="hljs-string">"quarrelled"</span>, _key: <span class="hljs-string">"aliceAndDiana"</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_remove

@brief Removes an edge in collection edgeCollectionName
<br />
`graph.edgeCollectionName.remove(edgeId, options)`
<br />
If this edge is used as a vertex by another edge, the other edge will be removed (recursively).
<br />
@PARAMS
<br />
@PARAM{edgeId, string, required}
*_id* attribute of the edge
<br />
@PARAM{options, object, optional}
See [collection documentation](../Documents/DocumentMethods.md)
<br />
@EXAMPLES
<br />

<div id="generalGraphEdgeCollectionRemove_container">
<div id="generalGraphEdgeCollectionRemove_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"female/alice"</span>, <span class="hljs-string">"female/diana"</span>, {_key: <span class="hljs-string">"aliceAndDiana"</span>});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndDiana"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1316702337"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndDiana"</span> 
}
arangosh&gt; db._exists(<span class="hljs-string">"relation/aliceAndDiana"</span>)
<span class="hljs-literal">true</span>
arangosh&gt; graph.relation.remove(<span class="hljs-string">"relation/aliceAndDiana"</span>)
<span class="hljs-literal">true</span>
arangosh&gt; db._exists(<span class="hljs-string">"relation/aliceAndDiana"</span>)
<span class="hljs-literal">false</span>
</pre>
</div>
<div id="generalGraphEdgeCollectionRemove_short" onclick="$('#generalGraphEdgeCollectionRemove_short').hide(); $('#generalGraphEdgeCollectionRemove_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph.relation.save(<span class="hljs-string">"female/alice"</span>, <span class="hljs-string">"female/diana"</span>, {_key: <span class="hljs-string">"aliceAndDiana"</span>});
arangosh&gt; db._exists(<span class="hljs-string">"relation/aliceAndDiana"</span>)
arangosh&gt; graph.relation.remove(<span class="hljs-string">"relation/aliceAndDiana"</span>)
arangosh&gt; db._exists(<span class="hljs-string">"relation/aliceAndDiana"</span>)
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_graph

@brief Get a graph
<br />
`graph_module._graph(graphName)`
<br />
A graph can be get by its name.
<br />
@PARAMS
<br />
@PARAM{graphName, string, required}
Unique identifier of the graph
<br />
@EXAMPLES
<br />
Get a graph:
<br />

<div id="generalGraphLoadGraph_container">
<div id="generalGraphLoadGraph_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph = graph_module._graph(<span class="hljs-string">"social"</span>);
[ Graph social EdgeDefinitions: [ 
  <span class="hljs-string">"relation: [female, male] -&gt; [female, male]"</span> 
] VertexCollections: [ ] ]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_drop

@brief Remove a graph
<br />
`graph_module._drop(graphName, dropCollections)`
<br />
A graph can be dropped by its name.
This will automatically drop all collections contained in the graph as
long as they are not used within other graphs.
To drop the collections, the optional parameter *drop-collections* can be set to *true*.
<br />
@PARAMS
<br />
@PARAM{graphName, string, required}
Unique identifier of the graph
<br />
@PARAM{dropCollections, boolean, optional}
Define if collections should be dropped (default: false)
<br />
@EXAMPLES
<br />
Drop a graph and keep collections:
<br />

<div id="generalGraphDropGraphKeep_container">
<div id="generalGraphDropGraphKeep_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._drop(<span class="hljs-string">"social"</span>);
<span class="hljs-literal">true</span>
arangosh&gt; db._collection(<span class="hljs-string">"female"</span>);
[ArangoCollection <span class="hljs-number">1297631361</span>, <span class="hljs-string">"female"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._collection(<span class="hljs-string">"male"</span>);
[ArangoCollection <span class="hljs-number">1297762433</span>, <span class="hljs-string">"male"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._collection(<span class="hljs-string">"relation"</span>);
[ArangoCollection <span class="hljs-number">1297893505</span>, <span class="hljs-string">"relation"</span> (type edge, status loaded)]
</pre>
</div>
</div>

<br />

<div id="generalGraphDropGraphDropCollections_container">
<div id="generalGraphDropGraphDropCollections_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; graph_module._drop(<span class="hljs-string">"social"</span>, <span class="hljs-literal">true</span>);
<span class="hljs-literal">true</span>
arangosh&gt; db._collection(<span class="hljs-string">"female"</span>);
<span class="hljs-literal">null</span>
arangosh&gt; db._collection(<span class="hljs-string">"male"</span>);
<span class="hljs-literal">null</span>
arangosh&gt; db._collection(<span class="hljs-string">"relation"</span>);
<span class="hljs-literal">null</span>
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_edges

@brief Select some edges from the graph.
<br />
`graph._edges(examples)`
<br />
Creates an AQL statement to select a subset of the edges stored in the graph.
This is one of the entry points for the fluent AQL interface.
It will return a mutable AQL statement which can be further refined, using the
functions described below.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
In the examples the *toArray* function is used to print the result.
The description of this function can be found below.
<br />

<div id="generalGraphEdgesUnfiltered_container">
<div id="generalGraphEdgesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._edges().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1358448769"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1358710913"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1359104129"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1358907521"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphEdgesUnfiltered_short" onclick="$('#generalGraphEdgesUnfiltered_short').hide(); $('#generalGraphEdgesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._edges().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered edges:
<br />

<div id="generalGraphEdgesFiltered_container">
<div id="generalGraphEdgesFiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._edges({type: <span class="hljs-string">"married"</span>}).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1354844289"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1355303041"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphEdgesFiltered_short" onclick="$('#generalGraphEdgesFiltered_short').hide(); $('#generalGraphEdgesFiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._edges({type: <span class="hljs-string">"married"</span>}).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_vertices

@brief Select some vertices from the graph.
<br />
`graph._vertices(examples)`
<br />
Creates an AQL statement to select a subset of the vertices stored in the graph.
This is one of the entry points for the fluent AQL interface.
It will return a mutable AQL statement which can be further refined, using the
functions described below.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
@PARAMS
<br />
@PARAM{examples, object, optional}
See [Definition of examples](#definition-of-examples)
<br />
@EXAMPLES
<br />
In the examples the *toArray* function is used to print the result.
The description of this function can be found below.
<br />
To request unfiltered vertices:
<br />

<div id="generalGraphVerticesUnfiltered_container">
<div id="generalGraphVerticesUnfiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._vertices().toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1880901761"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1880180865"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1880508545"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1880705153"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphVerticesUnfiltered_short" onclick="$('#generalGraphVerticesUnfiltered_short').hide(); $('#generalGraphVerticesUnfiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._vertices().toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered vertices:
<br />

<div id="generalGraphVerticesFiltered_container">
<div id="generalGraphVerticesFiltered_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1876576385"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1876904065"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
  } 
]
</pre>
</div>
<div id="generalGraphVerticesFiltered_short" onclick="$('#generalGraphVerticesFiltered_short').hide(); $('#generalGraphVerticesFiltered_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._vertices([{name: <span class="hljs-string">"Alice"</span>}, {name: <span class="hljs-string">"Bob"</span>}]).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_fromVertex

@brief Get the source vertex of an edge
<br />
`graph._fromVertex(edgeId)`
<br />
Returns the vertex defined with the attribute *_from* of the edge with *edgeId* as its *_id*.
<br />
@PARAMS
<br />
@PARAM{edgeId, string, required}
*_id* attribute of the edge
<br />
@EXAMPLES
<br />

<div id="generalGraphGetFromVertex_container">
<div id="generalGraphGetFromVertex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._fromVertex(<span class="hljs-string">"relation/aliceAndBob"</span>)
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1490765953"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span> 
}
</pre>
</div>
<div id="generalGraphGetFromVertex_short" onclick="$('#generalGraphGetFromVertex_short').hide(); $('#generalGraphGetFromVertex_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._fromVertex(<span class="hljs-string">"relation/aliceAndBob"</span>)
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_toVertex

@brief Get the target vertex of an edge
<br />
`graph._toVertex(edgeId)`
<br />
Returns the vertex defined with the attribute *_to* of the edge with *edgeId* as its *_id*.
<br />
@PARAMS
<br />
@PARAM{edgeId, string, required}
*_id* attribute of the edge
<br />
@EXAMPLES
<br />

<div id="generalGraphGetToVertex_container">
<div id="generalGraphGetToVertex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._toVertex(<span class="hljs-string">"relation/aliceAndBob"</span>)
{ 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span>, 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1494763649"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span> 
}
</pre>
</div>
<div id="generalGraphGetToVertex_short" onclick="$('#generalGraphGetToVertex_short').hide(); $('#generalGraphGetToVertex_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; graph._toVertex(<span class="hljs-string">"relation/aliceAndBob"</span>)
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_neighbors

@brief Get all neighbors of the vertices defined by the example
<br />
`graph._neighbors(vertexExample, options)`
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertexExample.
The complexity of this method is **O(n\*m^x)** with *n* being the vertices defined by the
parameter vertexExamplex, *m* the average amount of neighbors and *x* the maximal depths.
Hence the default call would have a complexity of **O(n\*m)**;
<br />
@PARAMS
<br />
@PARAM{vertexExample, object, optional}
See [Definition of examples](#definition-of-examples)
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *direction*: The direction of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeExamples*: Filter the edges, see [Definition of examples](#definition-of-examples)
  * *neighborExamples*: Filter the neighbor vertices, see [Definition of examples](#definition-of-examples)
  * *edgeCollectionRestriction* : One or a list of edge-collection names that should be
      considered to be on the path.
  * *vertexCollectionRestriction* : One or a list of vertex-collection names that should be
      considered on the intermediate vertex steps.
  * *minDepth*: Defines the minimal number of intermediate steps to neighbors (default is 1).
  * *maxDepth*: Defines the maximal number of intermediate steps to neighbors (default is 1).
<br />
@EXAMPLES
<br />
A route planner example, all neighbors of capitals.
<br />

<div id="generalGraphModuleNeighbors1_container">
<div id="generalGraphModuleNeighbors1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._neighbors({isCapital : <span class="hljs-literal">true</span>});
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1691240577"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">53.5653</span>, 
      <span class="hljs-number">10.0014</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1691043969"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">50.9364</span>, 
      <span class="hljs-number">6.9528</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1691961473"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">48.8567</span>, 
      <span class="hljs-number">2.3508</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1691764865"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">45.76</span>, 
      <span class="hljs-number">4.84</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1691764865"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">45.76</span>, 
      <span class="hljs-number">4.84</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1691240577"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">53.5653</span>, 
      <span class="hljs-number">10.0014</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1691043969"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">50.9364</span>, 
      <span class="hljs-number">6.9528</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Berlin"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1690847361"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">3000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">52.5167</span>, 
      <span class="hljs-number">13.3833</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleNeighbors1_short" onclick="$('#generalGraphModuleNeighbors1_short').hide(); $('#generalGraphModuleNeighbors1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._neighbors({isCapital : <span class="hljs-literal">true</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all outbound neighbors of Hamburg.
<br />

<div id="generalGraphModuleNeighbors2_container">
<div id="generalGraphModuleNeighbors2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._neighbors(<span class="hljs-string">'germanCity/Hamburg'</span>, {direction : <span class="hljs-string">'outbound'</span>, maxDepth : <span class="hljs-number">2</span>});
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1698252929"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">45.76</span>, 
      <span class="hljs-number">4.84</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1697532033"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">50.9364</span>, 
      <span class="hljs-number">6.9528</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1698449537"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">48.8567</span>, 
      <span class="hljs-number">2.3508</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleNeighbors2_short" onclick="$('#generalGraphModuleNeighbors2_short').hide(); $('#generalGraphModuleNeighbors2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._neighbors(<span class="hljs-string">'germanCity/Hamburg'</span>, {direction : <span class="hljs-string">'outbound'</span>, maxDepth : <span class="hljs-number">2</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_common_neighbors

@brief Get all common neighbors of the vertices defined by the examples.
<br />
`graph._commonNeighbors(vertex1Example, vertex2Examples, optionsVertex1, optionsVertex2)`
<br />
This function returns the intersection of *graph_module._neighbors(vertex1Example, optionsVertex1)*
and *graph_module._neighbors(vertex2Example, optionsVertex2)*.
For parameter documentation see [_neighbors](#neighbors).
<br />
The complexity of this method is **O(n\*m^x)** with *n* being the maximal amount of vertices
defined by the parameters vertexExamples, *m* the average amount of neighbors and *x* the
maximal depths.
Hence the default call would have a complexity of **O(n\*m)**;
<br />
@EXAMPLES
<br />
A route planner example, all common neighbors of capitals.
<br />

<div id="generalGraphModuleCommonNeighbors1_container">
<div id="generalGraphModuleCommonNeighbors1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonNeighbors({isCapital : <span class="hljs-literal">true</span>}, {isCapital : <span class="hljs-literal">true</span>});
[ 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"germanCity/Hamburg"</span>, 
      <span class="hljs-string">"germanCity/Cologne"</span>, 
      <span class="hljs-string">"frenchCity/Lyon"</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"germanCity/Cologne"</span>, 
      <span class="hljs-string">"germanCity/Hamburg"</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleCommonNeighbors1_short" onclick="$('#generalGraphModuleCommonNeighbors1_short').hide(); $('#generalGraphModuleCommonNeighbors1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonNeighbors({isCapital : <span class="hljs-literal">true</span>}, {isCapital : <span class="hljs-literal">true</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all common outbound neighbors of Hamburg with any other location
which have a maximal depth of 2 :
<br />

<div id="generalGraphModuleCommonNeighbors2_container">
<div id="generalGraphModuleCommonNeighbors2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonNeighbors(
........&gt;   <span class="hljs-string">'germanCity/Hamburg'</span>,
........&gt;   {},
........&gt;   {direction : <span class="hljs-string">'outbound'</span>, maxDepth : <span class="hljs-number">2</span>},
........&gt; {direction : <span class="hljs-string">'outbound'</span>, maxDepth : <span class="hljs-number">2</span>});
[ 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"germanCity/Cologne"</span>, 
      <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"frenchCity/Paris"</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"frenchCity/Paris"</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"frenchCity/Lyon"</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleCommonNeighbors2_short" onclick="$('#generalGraphModuleCommonNeighbors2_short').hide(); $('#generalGraphModuleCommonNeighbors2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonNeighbors(
........&gt;   <span class="hljs-string">'germanCity/Hamburg'</span>,
........&gt;   {},
........&gt;   {direction : <span class="hljs-string">'outbound'</span>, maxDepth : <span class="hljs-number">2</span>},
........&gt; {direction : <span class="hljs-string">'outbound'</span>, maxDepth : <span class="hljs-number">2</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_count_common_neighbors

@brief Get the amount of common neighbors of the vertices defined by the examples.
<br />
`graph._countCommonNeighbors(vertex1Example, vertex2Examples, optionsVertex1, optionsVertex2)`
<br />
Similar to [_commonNeighbors](#commonneighbors) but returns count instead of the elements.
<br />
@EXAMPLES
<br />
A route planner example, all common neighbors of capitals.
<br />

<div id="generalGraphModuleCommonNeighborsAmount1_container">
<div id="generalGraphModuleCommonNeighborsAmount1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> example = { isCapital: <span class="hljs-literal">true</span> };
arangosh&gt; <span class="hljs-keyword">var</span> options = { includeData: <span class="hljs-literal">true</span> };
arangosh&gt; graph._countCommonNeighbors(example, example, options, options);
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : [ 
      { 
        <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">3</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Paris"</span> : [ 
      { 
        <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">3</span> 
      } 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleCommonNeighborsAmount1_short" onclick="$('#generalGraphModuleCommonNeighborsAmount1_short').hide(); $('#generalGraphModuleCommonNeighborsAmount1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> example = { isCapital: <span class="hljs-literal">true</span> };
arangosh&gt; <span class="hljs-keyword">var</span> options = { includeData: <span class="hljs-literal">true</span> };
arangosh&gt; graph._countCommonNeighbors(example, example, options, options);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all common outbound neighbors of Hamburg with any other location
which have a maximal depth of 2 :
<br />

<div id="generalGraphModuleCommonNeighborsAmount2_container">
<div id="generalGraphModuleCommonNeighborsAmount2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> options = { direction: <span class="hljs-string">'outbound'</span>, maxDepth: <span class="hljs-number">2</span>, includeData: <span class="hljs-literal">true</span> };
arangosh&gt; graph._countCommonNeighbors(<span class="hljs-string">'germanCity/Hamburg'</span>, {}, options, options);
[ 
  { 
    <span class="hljs-string">"germanCity/Hamburg"</span> : [ 
      { 
        <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">3</span> 
      }, 
      { 
        <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">2</span> 
      }, 
      { 
        <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span> 
      } 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleCommonNeighborsAmount2_short" onclick="$('#generalGraphModuleCommonNeighborsAmount2_short').hide(); $('#generalGraphModuleCommonNeighborsAmount2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> options = { direction: <span class="hljs-string">'outbound'</span>, maxDepth: <span class="hljs-number">2</span>, includeData: <span class="hljs-literal">true</span> };
arangosh&gt; graph._countCommonNeighbors(<span class="hljs-string">'germanCity/Hamburg'</span>, {}, options, options);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_common_properties

@brief Get the vertices of the graph that share common properties.
<br />
`graph._commonProperties(vertex1Example, vertex2Examples, options)`
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex1Example and vertex2Example.
<br />
The complexity of this method is **O(n)** with *n* being the maximal amount of vertices
defined by the parameters vertexExamples.
<br />
@PARAMS
<br />
@PARAM{vertex1Examples, object, optional}
Filter the set of source vertices, see [Definition of examples](#definition-of-examples)
<br />
@PARAM{vertex2Examples, object, optional}
Filter the set of vertices compared to, see [Definition of examples](#definition-of-examples)
<br />
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *vertex1CollectionRestriction* : One or a list of vertex-collection names that should be
      searched for source vertices.
  * *vertex2CollectionRestriction* : One or a list of vertex-collection names that should be
      searched for compare vertices.
  * *ignoreProperties* : One or a list of attribute names of a document that should be ignored.
<br />
@EXAMPLES
<br />
A route planner example, all locations with the same properties:
<br />

<div id="generalGraphModuleProperties1_container">
<div id="generalGraphModuleProperties1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonProperties({}, {});
[ 
  { 
    <span class="hljs-string">"frenchCity/Lyon"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Paris"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Cologne"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Hamburg"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleProperties1_short" onclick="$('#generalGraphModuleProperties1_short').hide(); $('#generalGraphModuleProperties1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonProperties({}, {});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all cities which share same properties except for population.
<br />

<div id="generalGraphModuleProperties2_container">
<div id="generalGraphModuleProperties2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonProperties({}, {}, {ignoreProperties: <span class="hljs-string">'population'</span>});
[ 
  { 
    <span class="hljs-string">"frenchCity/Lyon"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Paris"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Cologne"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Hamburg"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphModuleProperties2_short" onclick="$('#generalGraphModuleProperties2_short').hide(); $('#generalGraphModuleProperties2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._commonProperties({}, {}, {ignoreProperties: <span class="hljs-string">'population'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_count_common_properties

@brief Get the amount of vertices of the graph that share common properties.
<br />
`graph._countCommonProperties(vertex1Example, vertex2Examples, options)`
<br />
Similar to [_commonProperties](#commonproperties) but returns count instead of
the objects.
<br />
@EXAMPLES
<br />
A route planner example, all locations with the same properties:
<br />

<div id="generalGraphModuleAmountProperties1_container">
<div id="generalGraphModuleAmountProperties1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._countCommonProperties({}, {});
[ 
  { 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">2</span> 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">2</span> 
  }, 
  { 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">2</span> 
  } 
]
</pre>
</div>
<div id="generalGraphModuleAmountProperties1_short" onclick="$('#generalGraphModuleAmountProperties1_short').hide(); $('#generalGraphModuleAmountProperties1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._countCommonProperties({}, {});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all German cities which share same properties except for population.
<br />

<div id="generalGraphModuleAmountProperties2_container">
<div id="generalGraphModuleAmountProperties2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._countCommonProperties({}, {}, {vertex1CollectionRestriction : <span class="hljs-string">'germanCity'</span>,
........&gt; vertex2CollectionRestriction : <span class="hljs-string">'germanCity'</span> ,ignoreProperties: <span class="hljs-string">'population'</span>});
[ 
  { 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1</span> 
  } 
]
</pre>
</div>
<div id="generalGraphModuleAmountProperties2_short" onclick="$('#generalGraphModuleAmountProperties2_short').hide(); $('#generalGraphModuleAmountProperties2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._countCommonProperties({}, {}, {vertex1CollectionRestriction : <span class="hljs-string">'germanCity'</span>,
........&gt; vertex2CollectionRestriction : <span class="hljs-string">'germanCity'</span> ,ignoreProperties: <span class="hljs-string">'population'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_paths

@brief The _paths function returns all paths of a graph.
<br />
`graph._paths(options)`
<br />
This function determines all available paths in a graph.
<br />
The complexity of this method is **O(n\*n\*m)** with *n* being the amount of vertices in
the graph and *m* the average amount of connected edges;
<br />
@PARAMS
<br />
@PARAM{options, object, optional}
An object containing options, see below:
  * *direction*        : The direction of the edges. Possible values are *any*,
  *inbound* and *outbound* (default).
  * *followCycles* (optional) : If set to *true* the query follows cycles in the graph,
    default is false.
  * *minLength* (optional)     : Defines the minimal length a path must
    have to be returned (default is 0).
  * *maxLength* (optional)     : Defines the maximal length a path must
     have to be returned (default is 10).
<br />
@EXAMPLES
<br />
Return all paths of the graph "social":
<br />

<div id="generalGraphModulePaths_container">
<div id="generalGraphModulePaths_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; g._paths();
[ 
  [ 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704413313"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704413313"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1705068673"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704675457"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704675457"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704872065"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703364737"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1705068673"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703692417"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704872065"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1703889025"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1704085633"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphModulePaths_short" onclick="$('#generalGraphModulePaths_short').hide(); $('#generalGraphModulePaths_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; g._paths();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Return all inbound paths of the graph "social" with a maximal
length of 1 and a minimal length of 2:
<br />

<div id="generalGraphModulePaths2_container">
<div id="generalGraphModulePaths2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; g._paths({direction : <span class="hljs-string">'inbound'</span>, minLength : <span class="hljs-number">1</span>, maxLength :  <span class="hljs-number">2</span>});
[ 
  [ 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707493505"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708476545"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707493505"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707493505"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708476545"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708279937"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707296897"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708673153"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707296897"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707296897"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708673153"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708017793"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707690113"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707296897"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708017793"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707296897"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707493505"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1708279937"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1707493505"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1706969217"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphModulePaths2_short" onclick="$('#generalGraphModulePaths2_short').hide(); $('#generalGraphModulePaths2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; g._paths({direction : <span class="hljs-string">'inbound'</span>, minLength : <span class="hljs-number">1</span>, maxLength :  <span class="hljs-number">2</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_shortest_path

@brief The _shortestPath function returns all shortest paths of a graph.
<br />
`graph._shortestPath(startVertexExample, endVertexExample, options)`
<br />
This function determines all shortest paths in a graph.
The function accepts an id, an example, a list of examples
or even an empty example as parameter for
start and end vertex. If one wants to call this function to receive nearly all
shortest paths for a graph the option *algorithm* should be set to
[Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm)
to increase performance.
If no algorithm is provided in the options the function chooses the appropriate
one (either [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm)
or [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm)) according to its parameters.
The length of a path is by default the amount of edges from one start vertex to
an end vertex. The option weight allows the user to define an edge attribute
representing the length.
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@PARAMS
<br />
@PARAM{startVertexExample, object, optional}
An example for the desired start Vertices
(see [Definition of examples](#definition-of-examples)).
<br />
@PARAM{endVertexExample, object, optional}
An example for the desired
end Vertices (see [Definition of examples](#definition-of-examples)).
<br />
@PARAM{options, object, optional}
An object containing options, see below:
  * *direction*                        : The direction of the edges as a string.
  Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeCollectionRestriction*        : One or multiple edge
  collection names. Only edges from these collections will be considered for the path.
  * *startVertexCollectionRestriction* : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  start vertex of a path.
  * *endVertexCollectionRestriction*   : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  end vertex of a path.
  * *edgeExamples*                     : A filter example for the
  edges in the shortest paths
  (see [example](#definition-of-examples)).
  * *algorithm*                        : The algorithm to calculate
  the shortest paths. If both start and end vertex examples are empty
  [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) is
  used, otherwise the default is [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm)
  * *weight*                           : The name of the attribute of
  the edges containing the length as a string.
  * *defaultWeight*                    : Only used with the option *weight*.
  If an edge does not have the attribute named as defined in option *weight* this default
  is used as length.
  If no default is supplied the default would be positive Infinity so the path could
  not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, shortest path from all german to all french cities:
<br />

<div id="generalGraphModuleShortestPaths1_container">
<div id="generalGraphModuleShortestPaths1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._shortestPath({}, {}, {weight : <span class="hljs-string">'distance'</span>, endVertexCollectionRestriction : <span class="hljs-string">'frenchCity'</span>,
........&gt; startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>});
[ 
  [ 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"germanCity/Berlin"</span>, 
        <span class="hljs-string">"frenchCity/Paris"</span> 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        <span class="hljs-string">"internationalHighway/1746552961"</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"germanCity/Berlin"</span>, 
        <span class="hljs-string">"frenchCity/Lyon"</span> 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        <span class="hljs-string">"internationalHighway/1746356353"</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"frenchCity/Paris"</span> 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        <span class="hljs-string">"internationalHighway/1747339393"</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"frenchCity/Lyon"</span> 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        <span class="hljs-string">"internationalHighway/1747142785"</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"frenchCity/Paris"</span> 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        <span class="hljs-string">"internationalHighway/1746749569"</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"frenchCity/Lyon"</span> 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        <span class="hljs-string">"internationalHighway/1746946177"</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphModuleShortestPaths1_short" onclick="$('#generalGraphModuleShortestPaths1_short').hide(); $('#generalGraphModuleShortestPaths1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._shortestPath({}, {}, {weight : <span class="hljs-string">'distance'</span>, endVertexCollectionRestriction : <span class="hljs-string">'frenchCity'</span>,
........&gt; startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, shortest path from Hamburg and Cologne to Lyon:
<br />

<div id="generalGraphModuleShortestPaths2_container">
<div id="generalGraphModuleShortestPaths2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._shortestPath([{_id: <span class="hljs-string">'germanCity/Cologne'</span>},{_id: <span class="hljs-string">'germanCity/Munich'</span>}], <span class="hljs-string">'frenchCity/Lyon'</span>,
........&gt; {weight : <span class="hljs-string">'distance'</span>});
[ 
  [ 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"frenchCity/Lyon"</span> 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        <span class="hljs-string">"internationalHighway/1753630849"</span> 
      ], 
      <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphModuleShortestPaths2_short" onclick="$('#generalGraphModuleShortestPaths2_short').hide(); $('#generalGraphModuleShortestPaths2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._shortestPath([{_id: <span class="hljs-string">'germanCity/Cologne'</span>},{_id: <span class="hljs-string">'germanCity/Munich'</span>}], <span class="hljs-string">'frenchCity/Lyon'</span>,
........&gt; {weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_distance_to

@brief The _distanceTo function returns all paths and there distance within a graph.
<br />
`graph._distanceTo(startVertexExample, endVertexExample, options)`
<br />
This function is a wrapper of [graph._shortestPath](#shortestpath).
It does not return the actual path but only the distance between two vertices.
<br />
@EXAMPLES
<br />
A route planner example, shortest distance from all german to all french cities:
<br />

<div id="generalGraphModuleDistanceTo1_container">
<div id="generalGraphModuleDistanceTo1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._distanceTo({}, {}, {weight : <span class="hljs-string">'distance'</span>, endVertexCollectionRestriction : <span class="hljs-string">'frenchCity'</span>,
........&gt; startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>});
[ 
  { 
    <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"vertex"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"vertex"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"vertex"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"vertex"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"vertex"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
  }, 
  { 
    <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"vertex"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
  } 
]
</pre>
</div>
<div id="generalGraphModuleDistanceTo1_short" onclick="$('#generalGraphModuleDistanceTo1_short').hide(); $('#generalGraphModuleDistanceTo1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._distanceTo({}, {}, {weight : <span class="hljs-string">'distance'</span>, endVertexCollectionRestriction : <span class="hljs-string">'frenchCity'</span>,
........&gt; startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, shortest distance from Hamburg and Cologne to Lyon:
<br />

<div id="generalGraphModuleDistanceTo2_container">
<div id="generalGraphModuleDistanceTo2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._distanceTo([{_id: <span class="hljs-string">'germanCity/Cologne'</span>},{_id: <span class="hljs-string">'germanCity/Munich'</span>}], <span class="hljs-string">'frenchCity/Lyon'</span>,
........&gt; {weight : <span class="hljs-string">'distance'</span>});
[ 
  { 
    <span class="hljs-string">"startVertex"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"vertex"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1</span> 
  } 
]
</pre>
</div>
<div id="generalGraphModuleDistanceTo2_short" onclick="$('#generalGraphModuleDistanceTo2_short').hide(); $('#generalGraphModuleDistanceTo2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; g._distanceTo([{_id: <span class="hljs-string">'germanCity/Cologne'</span>},{_id: <span class="hljs-string">'germanCity/Munich'</span>}], <span class="hljs-string">'frenchCity/Lyon'</span>,
........&gt; {weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_absolute_eccentricity

@brief Get the
[eccentricity](http://en.wikipedia.org/wiki/Distance_%28graph_theory%29)
of the vertices defined by the examples.
<br />
`graph._absoluteEccentricity(vertexExample, options)`
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertexExample.
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@PARAMS
<br />
@PARAM{vertexExample, object, optional}
Filter the vertices, see [Definition of examples](#definition-of-examples)
<br />
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *direction*: The direction of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeCollectionRestriction* : One or a list of edge-collection names that should be
      considered to be on the path.
  * *startVertexCollectionRestriction* : One or a list of vertex-collection names that should be
      considered for source vertices.
  * *endVertexCollectionRestriction* : One or a list of vertex-collection names that should be
      considered for target vertices.
  * *edgeExamples*: Filter the edges to be followed, see [Definition of examples](#definition-of-examples)
  * *algorithm*: The algorithm to calculate the shortest paths, possible values are
      [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) and
      [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*: The name of the attribute of the edges containing the weight.
  * *defaultWeight*: Only used with the option *weight*.
      If an edge does not have the attribute named as defined in option *weight* this default
      is used as weight.
      If no default is supplied the default would be positive infinity so the path and
      hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the absolute eccentricity of all locations.
<br />

<div id="generalGraphModuleAbsEccentricity1_container">
<div id="generalGraphModuleAbsEccentricity1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY("</span>
........&gt;   + <span class="hljs-string">"'routeplanner', {})"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1</span> 
  } 
]
</pre>
</div>
<div id="generalGraphModuleAbsEccentricity1_short" onclick="$('#generalGraphModuleAbsEccentricity1_short').hide(); $('#generalGraphModuleAbsEccentricity1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY("</span>
........&gt;   + <span class="hljs-string">"'routeplanner', {})"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute eccentricity of all locations.
This considers the actual distances.
<br />

<div id="generalGraphModuleAbsEccentricity2_container">
<div id="generalGraphModuleAbsEccentricity2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteEccentricity({}, {weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1200</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">850</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1200</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1200</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1200</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsEccentricity2_short" onclick="$('#generalGraphModuleAbsEccentricity2_short').hide(); $('#generalGraphModuleAbsEccentricity2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteEccentricity({}, {weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute eccentricity of all cities regarding only
outbound paths.
<br />

<div id="generalGraphModuleAbsEccentricity3_container">
<div id="generalGraphModuleAbsEccentricity3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteEccentricity({}, {startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>,
........&gt; direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1200</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">700</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1200</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsEccentricity3_short" onclick="$('#generalGraphModuleAbsEccentricity3_short').hide(); $('#generalGraphModuleAbsEccentricity3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteEccentricity({}, {startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>,
........&gt; direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_eccentricity

@brief Get the normalized
[eccentricity](http://en.wikipedia.org/wiki/Distance_%28graph_theory%29)
of the vertices defined by the examples.
<br />
`graph._eccentricity(vertexExample, options)`
<br />
Similar to [_absoluteEccentricity](#absoluteeccentricity) but returns a normalized result.
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@EXAMPLES
<br />
A route planner example, the eccentricity of all locations.
<br />

<div id="generalGraphModuleEccentricity2_container">
<div id="generalGraphModuleEccentricity2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._eccentricity();
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1</span> 
}
</pre>
</div>
<div id="generalGraphModuleEccentricity2_short" onclick="$('#generalGraphModuleEccentricity2_short').hide(); $('#generalGraphModuleEccentricity2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._eccentricity();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the weighted eccentricity.
<br />

<div id="generalGraphModuleEccentricity3_container">
<div id="generalGraphModuleEccentricity3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._eccentricity({weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0.7083333333333335</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0.7083333333333335</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0.7083333333333335</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0.7083333333333335</span> 
}
</pre>
</div>
<div id="generalGraphModuleEccentricity3_short" onclick="$('#generalGraphModuleEccentricity3_short').hide(); $('#generalGraphModuleEccentricity3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._eccentricity({weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_absolute_closeness

@brief Get the
[closeness](http://en.wikipedia.org/wiki/Centrality#Closeness_centrality)
of the vertices defined by the examples.
<br />
`graph._absoluteCloseness(vertexExample, options)`
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for *vertexExample*.
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@PARAMS
<br />
@PARAM{vertexExample, object, optional}
Filter the vertices, see [Definition of examples](#definition-of-examples)
<br />
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *direction*: The direction of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeCollectionRestriction* : One or a list of edge-collection names that should be
      considered to be on the path.
  * *startVertexCollectionRestriction* : One or a list of vertex-collection names that should be
      considered for source vertices.
  * *endVertexCollectionRestriction* : One or a list of vertex-collection names that should be
      considered for target vertices.
  * *edgeExamples*: Filter the edges to be followed, see [Definition of examples](#definition-of-examples)
  * *algorithm*: The algorithm to calculate the shortest paths, possible values are
      [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) and
      [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*: The name of the attribute of the edges containing the weight.
  * *defaultWeight*: Only used with the option *weight*.
      If an edge does not have the attribute named as defined in option *weight* this default
      is used as weight.
      If no default is supplied the default would be positive infinity so the path and
      hence the closeness can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the absolute closeness of all locations.
<br />

<div id="generalGraphModuleAbsCloseness1_container">
<div id="generalGraphModuleAbsCloseness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteCloseness({});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">4</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">4</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">4</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">4</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">4</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsCloseness1_short" onclick="$('#generalGraphModuleAbsCloseness1_short').hide(); $('#generalGraphModuleAbsCloseness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteCloseness({});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphModuleAbsCloseness2_container">
<div id="generalGraphModuleAbsCloseness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteCloseness({}, {weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">3550</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">2600</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">3000</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">3200</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">3550</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsCloseness2_short" onclick="$('#generalGraphModuleAbsCloseness2_short').hide(); $('#generalGraphModuleAbsCloseness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteCloseness({}, {weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all German Cities regarding only
outbound paths.
<br />

<div id="generalGraphModuleAbsCloseness3_container">
<div id="generalGraphModuleAbsCloseness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteCloseness({}, {startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>,
........&gt; direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">3550</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1250</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">2600</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsCloseness3_short" onclick="$('#generalGraphModuleAbsCloseness3_short').hide(); $('#generalGraphModuleAbsCloseness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteCloseness({}, {startVertexCollectionRestriction : <span class="hljs-string">'germanCity'</span>,
........&gt; direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_closeness

@brief Get the normalized
[closeness](http://en.wikipedia.org/wiki/Centrality#Closeness_centrality)
of graphs vertices.
<br />
`graph._closeness(options)`
<br />
Similar to [_absoluteCloseness](#absolutecloseness) but returns a normalized value.
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@EXAMPLES
<br />
A route planner example, the normalized closeness of all locations.
<br />

<div id="generalGraphModuleCloseness1_container">
<div id="generalGraphModuleCloseness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._closeness();
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1</span> 
}
</pre>
</div>
<div id="generalGraphModuleCloseness1_short" onclick="$('#generalGraphModuleCloseness1_short').hide(); $('#generalGraphModuleCloseness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._closeness();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the closeness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphModuleCloseness2_container">
<div id="generalGraphModuleCloseness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._closeness({weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0.7323943661971831</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0.8666666666666666</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0.8125</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0.7323943661971831</span> 
}
</pre>
</div>
<div id="generalGraphModuleCloseness2_short" onclick="$('#generalGraphModuleCloseness2_short').hide(); $('#generalGraphModuleCloseness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._closeness({weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the closeness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphModuleCloseness3_container">
<div id="generalGraphModuleCloseness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._closeness({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0.15492957746478875</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0.44</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0.21153846153846154</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="generalGraphModuleCloseness3_short" onclick="$('#generalGraphModuleCloseness3_short').hide(); $('#generalGraphModuleCloseness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._closeness({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_absolute_betweenness

@brief Get the
[betweenness](http://en.wikipedia.org/wiki/Betweenness_centrality)
of all vertices in the graph.
<br />
`graph._absoluteBetweenness(vertexExample, options)`
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@PARAMS
<br />
@PARAM{vertexExample, object, optional}
Filter the vertices, see [Definition of examples](#definition-of-examples)
<br />
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *direction*: The direction of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *weight*: The name of the attribute of the edges containing the weight.
  * *defaultWeight*: Only used with the option *weight*.
      If an edge does not have the attribute named as defined in option *weight* this default
      is used as weight.
      If no default is supplied the default would be positive infinity so the path and
      hence the betweeness can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the absolute betweenness of all locations.
<br />

<div id="generalGraphModuleAbsBetweenness1_container">
<div id="generalGraphModuleAbsBetweenness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteBetweenness({});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsBetweenness1_short" onclick="$('#generalGraphModuleAbsBetweenness1_short').hide(); $('#generalGraphModuleAbsBetweenness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteBetweenness({});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute betweenness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphModuleAbsBetweenness2_container">
<div id="generalGraphModuleAbsBetweenness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteBetweenness({weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsBetweenness2_short" onclick="$('#generalGraphModuleAbsBetweenness2_short').hide(); $('#generalGraphModuleAbsBetweenness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteBetweenness({weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute betweenness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphModuleAbsBetweenness3_container">
<div id="generalGraphModuleAbsBetweenness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteBetweenness({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="generalGraphModuleAbsBetweenness3_short" onclick="$('#generalGraphModuleAbsBetweenness3_short').hide(); $('#generalGraphModuleAbsBetweenness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._absoluteBetweenness({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_betweenness

@brief Get the normalized
[betweenness](http://en.wikipedia.org/wiki/Betweenness_centrality)
of graphs vertices.
<br />
`graph_module._betweenness(options)`
<br />
Similar to [_absoluteBetweeness](#absolutebetweenness) but returns normalized values.
<br />
@EXAMPLES
<br />
A route planner example, the betweenness of all locations.
<br />

<div id="generalGraphModuleBetweenness1_container">
<div id="generalGraphModuleBetweenness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._betweenness();
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="generalGraphModuleBetweenness1_short" onclick="$('#generalGraphModuleBetweenness1_short').hide(); $('#generalGraphModuleBetweenness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._betweenness();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the betweenness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphModuleBetweenness2_container">
<div id="generalGraphModuleBetweenness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._betweenness({weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="generalGraphModuleBetweenness2_short" onclick="$('#generalGraphModuleBetweenness2_short').hide(); $('#generalGraphModuleBetweenness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._betweenness({weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the betweenness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphModuleBetweenness3_container">
<div id="generalGraphModuleBetweenness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._betweenness({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
{ 
  <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
}
</pre>
</div>
<div id="generalGraphModuleBetweenness3_short" onclick="$('#generalGraphModuleBetweenness3_short').hide(); $('#generalGraphModuleBetweenness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._betweenness({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_radius

@brief Get the
[radius](http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29)
of a graph.
<br />
`graph._radius(options)`
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@PARAMS
<br />
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *direction*: The direction of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *algorithm*: The algorithm to calculate the shortest paths, possible values are
      [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) and
      [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*: The name of the attribute of the edges containing the weight.
  * *defaultWeight*: Only used with the option *weight*.
      If an edge does not have the attribute named as defined in option *weight* this default
      is used as weight.
      If no default is supplied the default would be positive infinity so the path and
      hence the radius can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the radius of the graph.
<br />

<div id="generalGraphModuleRadius1_container">
<div id="generalGraphModuleRadius1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._radius();
<span class="hljs-number">1</span>
</pre>
</div>
</div>

<br />
A route planner example, the radius of the graph.
This considers the actual distances.
<br />

<div id="generalGraphModuleRadius2_container">
<div id="generalGraphModuleRadius2_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._radius({weight : <span class="hljs-string">'distance'</span>});
<span class="hljs-number">850</span>
</pre>
</div>
</div>

<br />
A route planner example, the radius of the graph regarding only
outbound paths.
<br />

<div id="generalGraphModuleRadius3_container">
<div id="generalGraphModuleRadius3_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._radius({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
<span class="hljs-number">550</span>
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_diameter

@brief Get the
[diameter](http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29)
of a graph.
<br />
`graph._diameter(graphName, options)`
<br />
The complexity of the function is described
[here](../Aql/GraphOperations.md#the-complexity-of-the-shortest-path-algorithms).
<br />
@PARAMS
<br />
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *direction*: The direction of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *algorithm*: The algorithm to calculate the shortest paths, possible values are
      [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) and
      [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*: The name of the attribute of the edges containing the weight.
  * *defaultWeight*: Only used with the option *weight*.
      If an edge does not have the attribute named as defined in option *weight* this default
      is used as weight.
      If no default is supplied the default would be positive infinity so the path and
      hence the radius can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the diameter of the graph.
<br />

<div id="generalGraphModuleDiameter1_container">
<div id="generalGraphModuleDiameter1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._diameter();
<span class="hljs-number">1</span>
</pre>
</div>
</div>

<br />
A route planner example, the diameter of the graph.
This considers the actual distances.
<br />

<div id="generalGraphModuleDiameter2_container">
<div id="generalGraphModuleDiameter2_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._diameter({weight : <span class="hljs-string">'distance'</span>});
<span class="hljs-number">1200</span>
</pre>
</div>
</div>

<br />
A route planner example, the diameter of the graph regarding only
outbound paths.
<br />

<div id="generalGraphModuleDiameter3_container">
<div id="generalGraphModuleDiameter3_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._diameter({direction : <span class="hljs-string">'outbound'</span>, weight : <span class="hljs-string">'distance'</span>});
<span class="hljs-number">1200</span>
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph__extendEdgeDefinitions

@brief Add another edge definition to the graph
<br />
`graph._extendEdgeDefinitions(edgeDefinition)`
<br />
Extends the edge definitions of a graph. If an orphan collection is used in this
edge definition, it will be removed from the orphanage. If the edge collection of
the edge definition to add is already used in the graph or used in a different
graph with different *from* and/or *to* collections an error is thrown.
<br />
@PARAMS
<br />
@PARAM{edgeDefinition, object, required}
The relation definition to extend the graph
<br />
@EXAMPLES
<br />

<div id="general_graph__extendEdgeDefinitions_container">
<div id="general_graph__extendEdgeDefinitions_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>)
arangosh&gt; <span class="hljs-keyword">var</span> ed1 = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> ed2 = graph_module._relation(<span class="hljs-string">"myEC2"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC3"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [ed1]);
arangosh&gt; graph._extendEdgeDefinitions(ed2);
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph__editEdgeDefinition

@brief Modify an relation definition
<br />
`graph_module._editEdgeDefinition(edgeDefinition)`
<br />
Edits one relation definition of a graph. The edge definition used as argument will
replace the existing edge definition of the graph which has the same collection.
Vertex Collections of the replaced edge definition that are not used in the new
definition will transform to an orphan. Orphans that are used in this new edge
definition will be deleted from the list of orphans. Other graphs with the same edge
definition will be modified, too.
<br />
@PARAMS
<br />
@PARAM{edgeDefinition, object, required}
The edge definition to replace the existing edge
definition with the same attribute *collection*.
<br />
@EXAMPLES
<br />

<div id="general_graph__editEdgeDefinition_container">
<div id="general_graph__editEdgeDefinition_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>)
arangosh&gt; <span class="hljs-keyword">var</span> original = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> modified = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC2"</span>], [<span class="hljs-string">"myVC3"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [original]);
arangosh&gt; graph._editEdgeDefinitions(modified);
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph__deleteEdgeDefinition

@brief Delete one relation definition
<br />
`graph_module._deleteEdgeDefinition(edgeCollectionName, dropCollection)`
<br />
Deletes a relation definition defined by the edge collection of a graph. If the
collections defined in the edge definition (collection, from, to) are not used
in another edge definition of the graph, they will be moved to the orphanage.
<br />
@PARAMS
<br />
@PARAM{edgeCollectionName, string, required}
Name of edge collection in the relation definition.
@PARAM{dropCollection, boolean, optional}
Define if the edge collection should be dropped. Default false.
<br />
@EXAMPLES
<br />
Remove an edge definition but keep the edge collection:
<br />

<div id="general_graph__deleteEdgeDefinition_container">
<div id="general_graph__deleteEdgeDefinition_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>)
arangosh&gt; <span class="hljs-keyword">var</span> ed1 = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> ed2 = graph_module._relation(<span class="hljs-string">"myEC2"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC3"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [ed1, ed2]);
arangosh&gt; graph._deleteEdgeDefinition(<span class="hljs-string">"myEC1"</span>);
arangosh&gt; db._collection(<span class="hljs-string">"myEC1"</span>);
[ArangoCollection <span class="hljs-number">1885227137</span>, <span class="hljs-string">"myEC1"</span> (type edge, status loaded)]
</pre>
</div>
</div>

<br />
Remove an edge definition and drop the edge collection:
<br />

<div id="general_graph__deleteEdgeDefinitionWithDrop_container">
<div id="general_graph__deleteEdgeDefinitionWithDrop_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>)
arangosh&gt; <span class="hljs-keyword">var</span> ed1 = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> ed2 = graph_module._relation(<span class="hljs-string">"myEC2"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC3"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [ed1, ed2]);
arangosh&gt; graph._deleteEdgeDefinition(<span class="hljs-string">"myEC1"</span>, <span class="hljs-literal">true</span>);
arangosh&gt; db._collection(<span class="hljs-string">"myEC1"</span>);
<span class="hljs-literal">null</span>
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph__addVertexCollection

@brief Add a vertex collection to the graph
<br />
`graph._addVertexCollection(vertexCollectionName, createCollection)`
<br />
Adds a vertex collection to the set of orphan collections of the graph. If the
collection does not exist, it will be created. If it is already used by any edge
definition of the graph, an error will be thrown.
<br />
@PARAMS
<br />
@PARAM{vertexCollectionName, string, required}
Name of vertex collection.
<br />
@PARAM{createCollection, boolean, optional}
If true the collection will be created if it does not exist. Default: true.
<br />
@EXAMPLES
<br />

<div id="general_graph__addVertexCollection_container">
<div id="general_graph__addVertexCollection_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> ed1 = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [ed1]);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"myVC3"</span>, <span class="hljs-literal">true</span>);
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph__orphanCollections

@brief Get all orphan collections
<br />
`graph._orphanCollections()`
<br />
Returns all vertex collections of the graph that are not used in any edge definition.
<br />
@EXAMPLES
<br />

<div id="general_graph__orphanCollections_container">
<div id="general_graph__orphanCollections_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>)
arangosh&gt; <span class="hljs-keyword">var</span> ed1 = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [ed1]);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"myVC3"</span>, <span class="hljs-literal">true</span>);
arangosh&gt; graph._orphanCollections();
[ 
  <span class="hljs-string">"myVC3"</span> 
]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph__removeVertexCollection

@brief Remove a vertex collection from the graph
<br />
`graph._removeVertexCollection(vertexCollectionName, dropCollection)`
<br />
Removes a vertex collection from the graph.
Only collections not used in any relation definition can be removed.
Optionally the collection can be deleted, if it is not used in any other graph.
<br />
@PARAMS
<br />
@PARAM{vertexCollectionName, string, required}
Name of vertex collection.
<br />
@PARAM{dropCollection, boolean, optional}
If true the collection will be dropped if it is
not used in any other graph. Default: false.
<br />
@EXAMPLES
<br />

<div id="general_graph__removeVertexCollections_container">
<div id="general_graph__removeVertexCollections_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>)
arangosh&gt; <span class="hljs-keyword">var</span> ed1 = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [ed1]);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"myVC3"</span>, <span class="hljs-literal">true</span>);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"myVC4"</span>, <span class="hljs-literal">true</span>);
arangosh&gt; graph._orphanCollections();
[ 
  <span class="hljs-string">"myVC3"</span>, 
  <span class="hljs-string">"myVC4"</span> 
]
arangosh&gt; graph._removeVertexCollection(<span class="hljs-string">"myVC3"</span>);
arangosh&gt; graph._orphanCollections();
[ 
  <span class="hljs-string">"myVC4"</span> 
]
</pre>
</div>
<div id="general_graph__removeVertexCollections_short" onclick="$('#general_graph__removeVertexCollections_short').hide(); $('#general_graph__removeVertexCollections_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>)
arangosh&gt; <span class="hljs-keyword">var</span> ed1 = graph_module._relation(<span class="hljs-string">"myEC1"</span>, [<span class="hljs-string">"myVC1"</span>], [<span class="hljs-string">"myVC2"</span>]);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>, [ed1]);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"myVC3"</span>, <span class="hljs-literal">true</span>);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"myVC4"</span>, <span class="hljs-literal">true</span>);
arangosh&gt; graph._orphanCollections();
arangosh&gt; graph._removeVertexCollection(<span class="hljs-string">"myVC3"</span>);
arangosh&gt; graph._orphanCollections();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_connectingEdges

@brief Get all connecting edges between 2 groups of vertices defined by the examples
<br />
`graph._connectingEdges(vertexExample, vertexExample2, options)`
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertexExample.
<br />
@PARAMS
<br />
@PARAM{vertexExample1, object, optional}
See [Definition of examples](general-graphs-functions.md#definition-of-examples)
@PARAM{vertexExample2, object, optional}
See [Definition of examples](general-graphs-functions.md#definition-of-examples)
@PARAM{options, object, optional}
An object defining further options. Can have the following values:
  * *edgeExamples*: Filter the edges, see [Definition of examples](general-graphs-functions.md#definition-of-examples)
  * *edgeCollectionRestriction* : One or a list of edge-collection names that should be
      considered to be on the path.
  * *vertex1CollectionRestriction* : One or a list of vertex-collection names that should be
      considered on the intermediate vertex steps.
  * *vertex2CollectionRestriction* : One or a list of vertex-collection names that should be
      considered on the intermediate vertex steps.
<br />
@EXAMPLES
<br />
A route planner example, all connecting edges between capitals.
<br />

<div id="generalGraphModuleConnectingEdges1_container">
<div id="generalGraphModuleConnectingEdges1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._getConnectingEdges({isCapital : <span class="hljs-literal">true</span>}, {isCapital : <span class="hljs-literal">true</span>});
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/1641564289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1641564289"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1641564289"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1200</span> 
  } 
]
</pre>
</div>
<div id="generalGraphModuleConnectingEdges1_short" onclick="$('#generalGraphModuleConnectingEdges1_short').hide(); $('#generalGraphModuleConnectingEdges1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; graph._getConnectingEdges({isCapital : <span class="hljs-literal">true</span>}, {isCapital : <span class="hljs-literal">true</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_create_graph_example1


<div id="general_graph_create_graph_example1_container">
<div id="general_graph_create_graph_example1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> edgeDefinitions = graph_module._edgeDefinitions();
arangosh&gt; graph_module._extendEdgeDefinitions(edgeDefinitions, graph_module._relation(<span class="hljs-string">"friend_of"</span>, <span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Customer"</span>));
arangosh&gt; graph_module._extendEdgeDefinitions(
........&gt; edgeDefinitions, graph_module._relation(
........&gt; <span class="hljs-string">"has_bought"</span>, [<span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Company"</span>], [<span class="hljs-string">"Groceries"</span>, <span class="hljs-string">"Electronics"</span>]));
arangosh&gt; graph_module._create(<span class="hljs-string">"myStore"</span>, edgeDefinitions);
[ Graph myStore EdgeDefinitions: [ 
  <span class="hljs-string">"friend_of: [Customer] -&gt; [Customer]"</span>, 
  <span class="hljs-string">"has_bought: [Company, Customer] -&gt; [Electronics, Groceries]"</span> 
] VertexCollections: [ ] ]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/general-graph.js -->
@startDocuBlock JSF_general_graph_create_graph_example2


<div id="general_graph_create_graph_example2_container">
<div id="general_graph_create_graph_example2_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/general-graph"</span>);
arangosh&gt;  <span class="hljs-keyword">var</span> edgeDefinitions = graph_module._edgeDefinitions(
........&gt;  graph_module._relation(<span class="hljs-string">"friend_of"</span>, [<span class="hljs-string">"Customer"</span>], [<span class="hljs-string">"Customer"</span>]), graph_module._relation(
........&gt; <span class="hljs-string">"has_bought"</span>, [<span class="hljs-string">"Customer"</span>, <span class="hljs-string">"Company"</span>], [<span class="hljs-string">"Groceries"</span>, <span class="hljs-string">"Electronics"</span>]));
arangosh&gt; graph_module._create(<span class="hljs-string">"myStore"</span>, edgeDefinitions);
[ Graph myStore EdgeDefinitions: [ 
  <span class="hljs-string">"friend_of: [Customer] -&gt; [Customer]"</span>, 
  <span class="hljs-string">"has_bought: [Company, Customer] -&gt; [Electronics, Groceries]"</span> 
] VertexCollections: [ ] ]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/aql/functions.js -->
@startDocuBlock aqlFunctionsUnregister

@brief delete an existing AQL user function
`aqlfunctions.unregister(name)`
<br />
Unregisters an existing AQL user function, identified by the fully qualified
function name.
<br />
Trying to unregister a function that does not exist will result in an
exception.
<br />
@EXAMPLES
<br />
```js
  require("org/arangodb/aql/functions").unregister("myfunctions::temperature::celsiustofahrenheit");
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/aql/functions.js -->
@startDocuBlock aqlFunctionsUnregisterGroup

@brief delete a group of AQL user functions
`aqlfunctions.unregisterGroup(prefix)`
<br />
Unregisters a group of AQL user function, identified by a common function
group prefix.
<br />
This will return the number of functions unregistered.
<br />
@EXAMPLES
<br />
```js
  require("org/arangodb/aql/functions").unregisterGroup("myfunctions::temperature");
<br />
  require("org/arangodb/aql/functions").unregisterGroup("myfunctions");
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/aql/functions.js -->
@startDocuBlock aqlFunctionsRegister

@brief register an AQL user function
`aqlfunctions.register(name, code, isDeterministic)`
<br />
Registers an AQL user function, identified by a fully qualified function
name. The function code in *code* must be specified as a JavaScript
function or a string representation of a JavaScript function.
If the function code in *code* is passed as a string, it is required that
the string evaluates to a JavaScript function definition.
<br />
If a function identified by *name* already exists, the previous function
definition will be updated. Please also make sure that the function code
does not violate the [Conventions](../AqlExtending/Conventions.md) for AQL 
functions.
<br />
The *isDeterministic* attribute can be used to specify whether the
function results are fully deterministic (i.e. depend solely on the input
and are the same for repeated calls with the same input values). It is not
used at the moment but may be used for optimizations later.
<br />
The registered function is stored in the selected database's system 
collection *_aqlfunctions*.
<br />
The function returns *true* when it updates/replaces an existing AQL 
function of the same name, and *false* otherwise. It will throw an exception
when it detects syntactially invalid function code.
<br />
@EXAMPLES
<br />
```js
  require("org/arangodb/aql/functions").register("myfunctions::temperature::celsiustofahrenheit",
  function (celsius) {
    return celsius * 1.8 + 32;
  });
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/common/modules/org/arangodb/aql/functions.js -->
@startDocuBlock aqlFunctionsToArray

@brief list all AQL user functions
`aqlfunctions.toArray()`
<br />
Returns all previously registered AQL user functions, with their fully
qualified names and function code.
<br />
The result may optionally be restricted to a specified group of functions
by specifying a group prefix:
<br />
`aqlfunctions.toArray(prefix)`
<br />
@EXAMPLES
<br />
To list all available user functions:
<br />
```js
  require("org/arangodb/aql/functions").toArray();
```
<br />
To list all available user functions in the *myfunctions* namespace:
<br />
```js
  require("org/arangodb/aql/functions").toArray("myfunctions");
```
<br />
To list all available user functions in the *myfunctions::temperature* namespace:
<br />
```js
  require("org/arangodb/aql/functions").toArray("myfunctions::temperature");
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsDefineHttp

<br />
`actions.defineHttp(options)`
<br />
Defines a new action. The *options* are as follows:
<br />
`options.url`
<br />
The URL, which can be used to access the action. This path might contain
slashes. Note that this action will also be called, if a url is given such that
*options.url* is a prefix of the given url and no longer definition
matches.
<br />
`options.prefix`
<br />
If *false*, then only use the action for exact matches. The default is
*true*.
<br />
`options.callback(request, response)`
<br />
The request argument contains a description of the request. A request
parameter *foo* is accessible as *request.parametrs.foo*. A request
header *bar* is accessible as *request.headers.bar*. Assume that
the action is defined for the url */foo/bar* and the request url is
*/foo/bar/hugo/egon*. Then the suffix parts *[ "hugo", "egon" ]*
are availible in *request.suffix*.
<br />
The callback must define fill the *response*.
<br />
* *response.responseCode*: the response code
* *response.contentType*: the content type of the response
* *response.body*: the body of the response
<br />
You can use the functions *ResultOk* and *ResultError* to easily
generate a response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsGetErrorMessage

<br />
`actions.getErrorMessage(code)`
<br />
Returns the error message for an error code.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultError

<br />
*actions.resultError(*req*, *res*, *code*, *errorNum*,
  *errorMessage*, *headers*, *keyvals)*
<br />
The function generates an error response. The response body is an array
with an attribute *errorMessage* containing the error message
*errorMessage*, *error* containing *true*, *code* containing
*code*, *errorNum* containing *errorNum*, and *errorMessage*
containing the error message *errorMessage*. *keyvals* are mixed
into the result.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultOk

<br />
`actions.resultOk(req, res, code, result, headers)`
<br />
The function defines a response. *code* is the status code to
return. *result* is the result object, which will be returned as JSON
object in the body. *headers* is an array of headers to returned.
The function adds the attribute *error* with value *false*
and *code* with value *code* to the *result*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultBad

<br />
`actions.resultBad(req, res, error-code, msg, headers)`
<br />
The function generates an error response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultNotFound

<br />
`actions.resultNotFound(req, res, code, msg, headers)`
<br />
The function generates an error response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultNotImplemented

<br />
`actions.resultNotImplemented(req, res, msg, headers)`
<br />
The function generates an error response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultUnsupported

<br />
`actions.resultUnsupported(req, res, headers)`
<br />
The function generates an error response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultPermanentRedirect

<br />
`actions.resultPermanentRedirect(req, res, options, headers)`
<br />
The function generates a redirect response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultTemporaryRedirect

<br />
`actions.resultTemporaryRedirect(req, res, options, headers)`
<br />
The function generates a redirect response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsCollectionNotFound

<br />
`actions.collectionNotFound(req, res, collection, headers)`
<br />
The function generates an error response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsIndexNotFound

<br />
`actions.indexNotFound(req, res, collection, index, headers)`
<br />
The function generates an error response.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/actions.js -->
@startDocuBlock actionsResultException

<br />
`actions.resultException(req, res, err, headers, verbose)`
<br />
The function generates an error response. If @FA{verbose} is set to
*true* or not specified (the default), then the error stack trace will
be included in the error message if available. If @FA{verbose} is a string
it will be prepended before the error message and the stacktrace will also
be included.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-database.js -->
@startDocuBlock executeTransaction

`db._executeTransaction(object)`
<br />
Executes a server-side transaction, as specified by *object*.
<br />
*object* must have the following attributes:
- *collections*: a sub-object that defines which collections will be
  used in the transaction. *collections* can have these attributes:
  - *read*: a single collection or a list of collections that will be
    used in the transaction in read-only mode
  - *write*: a single collection or a list of collections that will be
    used in the transaction in write or read mode.
- *action*: a Javascript function or a string with Javascript code
  containing all the instructions to be executed inside the transaction.
  If the code runs through successfully, the transaction will be committed
  at the end. If the code throws an exception, the transaction will be
  rolled back and all database operations will be rolled back.
<br />
Additionally, *object* can have the following optional attributes:
- *waitForSync*: boolean flag indicating whether the transaction
  is forced to be synchronous.
- *lockTimeout*: a numeric value that can be used to set a timeout for
  waiting on collection locks. If not specified, a default value will be
  used. Setting *lockTimeout* to *0* will make ArangoDB not time
  out waiting for a lock.
- *params*: optional arguments passed to the function specified in
  *action*.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-database.js -->
@startDocuBlock collectionDatabaseDrop

`db._drop(collection)`
<br />
Drops a *collection* and all its indexes.
<br />
`db._drop(collection-identifier)`
<br />
Drops a collection identified by *collection-identifier* and all its
indexes. No error is thrown if there is no such collection.
<br />
`db._drop(collection-name)`
<br />
Drops a collection named *collection-name* and all its indexes. No error
is thrown if there is no such collection.
<br />
*Examples*
<br />
Drops a collection:
<br />

<div id="collectionDatabaseDrop_container">
<div id="collectionDatabaseDrop_long">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">1079003265</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._drop(col);
arangosh&gt; col;
[ArangoCollection <span class="hljs-number">1079003265</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
</pre>
</div>
</div>

<br />
Drops a collection identified by name:
<br />

<div id="collectionDatabaseDropName_container">
<div id="collectionDatabaseDropName_long">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">1079199873</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db._drop(<span class="hljs-string">"example"</span>);
arangosh&gt; col;
[ArangoCollection <span class="hljs-number">1079199873</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status deleted)]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-database.js -->
@startDocuBlock collectionDatabaseTruncate

`db._truncate(collection)`
<br />
Truncates a *collection*, removing all documents but keeping all its
indexes.
<br />
`db._truncate(collection-identifier)`
<br />
Truncates a collection identified by *collection-identified*. No error is
thrown if there is no such collection.
<br />
`db._truncate(collection-name)`
<br />
Truncates a collection named *collection-name*. No error is thrown if
there is no such collection.
<br />
@EXAMPLES
<br />
Truncates a collection:
<br />

<div id="collectionDatabaseTruncate_container">
<div id="collectionDatabaseTruncate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">1079396481</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; col.save({ <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1079724161"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1079724161"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1079724161"</span> 
}
arangosh&gt; col.count();
<span class="hljs-number">1</span>
arangosh&gt; db._truncate(col);
arangosh&gt; col.count();
<span class="hljs-number">0</span>
</pre>
</div>
<div id="collectionDatabaseTruncate_short" onclick="$('#collectionDatabaseTruncate_short').hide(); $('#collectionDatabaseTruncate_long').show();">
<pre>
arangosh&gt; col = db.example;
arangosh&gt; col.save({ <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span> });
arangosh&gt; col.count();
arangosh&gt; db._truncate(col);
arangosh&gt; col.count();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Truncates a collection identified by name:
<br />

<div id="collectionDatabaseTruncateName_container">
<div id="collectionDatabaseTruncateName_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">1080379521</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; col.save({ <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1080707201"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1080707201"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1080707201"</span> 
}
arangosh&gt; col.count();
<span class="hljs-number">1</span>
arangosh&gt; db._truncate(<span class="hljs-string">"example"</span>);
arangosh&gt; col.count();
<span class="hljs-number">0</span>
</pre>
</div>
<div id="collectionDatabaseTruncateName_short" onclick="$('#collectionDatabaseTruncateName_short').hide(); $('#collectionDatabaseTruncateName_long').show();">
<pre>
arangosh&gt; col = db.example;
arangosh&gt; col.save({ <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span> });
arangosh&gt; col.count();
arangosh&gt; db._truncate(<span class="hljs-string">"example"</span>);
arangosh&gt; col.count();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-database.js -->
@startDocuBlock IndexVerify

<br />
So you've created an index, and since its maintainance isn't for free,
you definitely want to know whether your query can utilize it.
<br />
You can use explain to verify whether **skiplists** or **hash indexes** are 
used (if you omit `colors: false` you will get nice colors in ArangoShell):
<br />

<div id="IndexVerify_container">
<div id="IndexVerify_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> explain = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/aql/explainer"</span>).explain;
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/622741633"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; explain(<span class="hljs-string">"FOR doc IN example FILTER doc.a &lt; 23 RETURN doc"</span>, {colors:<span class="hljs-literal">false</span>});
Query string:
 FOR doc IN example FILTER doc.a &lt; <span class="hljs-number">23</span> RETURN doc

Execution plan:
 Id   NodeType        Est.   Comment
  <span class="hljs-number">1</span>   SingletonNode      <span class="hljs-number">1</span>   * ROOT
  <span class="hljs-number">6</span>   IndexNode          <span class="hljs-number">1</span>     - FOR doc IN example   <span class="hljs-comment">/* skiplist index scan */</span>
  <span class="hljs-number">5</span>   ReturnNode         <span class="hljs-number">1</span>       - RETURN doc

Indexes used:
 By   Type       Collection   Unique   Sparse   Selectivity   Fields         Ranges
  <span class="hljs-number">6</span>   skiplist   example      <span class="hljs-literal">false</span>    <span class="hljs-literal">false</span>            n/a   [ <span class="hljs-string">`a`</span>, <span class="hljs-string">`b`</span> ]   ((doc.<span class="hljs-string">`a`</span> &lt; <span class="hljs-number">23</span>))

Optimization rules applied:
 Id   RuleName
  <span class="hljs-number">1</span>   use-indexes
  <span class="hljs-number">2</span>   remove-filter-covered-by-index


</pre>
</div>
<div id="IndexVerify_short" onclick="$('#IndexVerify_short').hide(); $('#IndexVerify_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> explain = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/aql/explainer"</span>).explain;
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ] });
arangosh&gt; explain(<span class="hljs-string">"FOR doc IN example FILTER doc.a &lt; 23 RETURN doc"</span>, {colors:<span class="hljs-literal">false</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-database.js -->
@startDocuBlock IndexHandle

`db._index(index-handle)`
<br />
Returns the index with *index-handle* or null if no such index exists.
<br />

<div id="IndexHandle_container">
<div id="IndexHandle_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/622020737"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">var</span> indexInfo = db.example.getIndexes().map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x.id; });
arangosh&gt; indexInfo;
[ 
  <span class="hljs-string">"example/0"</span>, 
  <span class="hljs-string">"example/622020737"</span> 
]
arangosh&gt; db._index(indexInfo[<span class="hljs-number">0</span>])
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/0"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"_key"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
arangosh&gt; db._index(indexInfo[<span class="hljs-number">1</span>])
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/622020737"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="IndexHandle_short" onclick="$('#IndexHandle_short').hide(); $('#IndexHandle_long').show();">
<pre>
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ] });
arangosh&gt; <span class="hljs-keyword">var</span> indexInfo = db.example.getIndexes().map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x.id; });
arangosh&gt; indexInfo;
arangosh&gt; db._index(indexInfo[<span class="hljs-number">0</span>])
arangosh&gt; db._index(indexInfo[<span class="hljs-number">1</span>])
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-database.js -->
@startDocuBlock dropIndex

`db._dropIndex(index)`
<br />
Drops the *index*.  If the index does not exist, then *false* is
returned. If the index existed and was dropped, then *true* is
returned.
<br />
`db._dropIndex(index-handle)`
<br />
Drops the index with *index-handle*.
<br />

<div id="dropIndex_container">
<div id="dropIndex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/1127499905"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">var</span> indexInfo = db.example.getIndexes();
arangosh&gt; indexInfo;
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/0"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"_key"</span> 
    ], 
    <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/1127499905"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"a"</span>, 
      <span class="hljs-string">"b"</span> 
    ], 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  } 
]
arangosh&gt; db._dropIndex(indexInfo[<span class="hljs-number">0</span>])
<span class="hljs-literal">false</span>
arangosh&gt; db._dropIndex(indexInfo[<span class="hljs-number">1</span>].id)
<span class="hljs-literal">true</span>
arangosh&gt; indexInfo = db.example.getIndexes();
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/0"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"primary"</span>, 
    <span class="hljs-string">"fields"</span> : [ 
      <span class="hljs-string">"_key"</span> 
    ], 
    <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span> 
  } 
]
</pre>
</div>
<div id="dropIndex_short" onclick="$('#dropIndex_short').hide(); $('#dropIndex_long').show();">
<pre>
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> ] });
arangosh&gt; <span class="hljs-keyword">var</span> indexInfo = db.example.getIndexes();
arangosh&gt; indexInfo;
arangosh&gt; db._dropIndex(indexInfo[<span class="hljs-number">0</span>])
arangosh&gt; db._dropIndex(indexInfo[<span class="hljs-number">1</span>].id)
arangosh&gt; indexInfo = db.example.getIndexes();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-database.js -->
@startDocuBlock listEndpoints

`db._listEndpoints()`
<br />
Returns a list of all endpoints and their mapped databases.
<br />
Please note that managing endpoints can only be performed from out of the
*_system* database. When not in the default database, you must first switch
to it using the "db._useDatabase" method.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_paths

The GRAPH\_PATHS function returns all paths of a graph.
<br />
`GRAPH_PATHS (graphName, options)`
<br />
The complexity of this method is **O(n\*n\*m)** with *n* being the amount of vertices in
the graph and *m* the average amount of connected edges;
<br />
*Parameters*
<br />
* *graphName*     : The name of the graph as a string.
* *options*     : An object containing the following options:
  * *direction*        : The direction of the edges. Possible values are *any*,
*inbound* and *outbound* (default).
  * *followCycles* (optional) : If set to *true* the query follows cycles in the graph,
default is false.
  * *minLength* (optional)     : Defines the minimal length a path must
have to be returned (default is 0).
  * *maxLength* (optional)     : Defines the maximal length a path must
have to be returned (default is 10).
<br />
@EXAMPLES
<br />
Return all paths of the graph "social":
<br />

<div id="generalGraphPaths_container">
<div id="generalGraphPaths_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_PATHS('social')"</span>).toArray();
[ 
  [ 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770014849"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770014849"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770670209"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770276993"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770276993"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770473601"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1768966273"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770670209"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769293953"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1770473601"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769490561"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1769687169"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      } 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphPaths_short" onclick="$('#generalGraphPaths_short').hide(); $('#generalGraphPaths_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_PATHS('social')"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Return all inbound paths of the graph "social" with a maximal
length of 1 and a minimal length of 2:
<br />

<div id="generalGraphPaths2_container">
<div id="generalGraphPaths2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; db._query(
........&gt; <span class="hljs-string">"RETURN GRAPH_PATHS('social', {direction : 'inbound', minLength : 1, maxLength :  2})"</span>
........&gt; ).toArray();
[ 
  [ 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773095041"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1774078081"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773095041"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773095041"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1774078081"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773881473"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772898433"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1774274689"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772898433"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772898433"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1774274689"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773619329"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773291649"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772898433"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773619329"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772898433"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    }, 
    { 
      <span class="hljs-string">"vertices"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773095041"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
        }, 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
        } 
      ], 
      <span class="hljs-string">"edges"</span> : [ 
        { 
          <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
          <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
          <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773881473"</span>, 
          <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
          <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span> 
        } 
      ], 
      <span class="hljs-string">"source"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1773095041"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span> 
      }, 
      <span class="hljs-string">"destination"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1772570753"</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span> 
      } 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphPaths2_short" onclick="$('#generalGraphPaths2_short').hide(); $('#generalGraphPaths2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; db._query(
........&gt; <span class="hljs-string">"RETURN GRAPH_PATHS('social', {direction : 'inbound', minLength : 1, maxLength :  2})"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_shortest_paths

The GRAPH\_SHORTEST\_PATH function returns all shortest paths of a graph.
<br />
`GRAPH_SHORTEST_PATH (graphName, startVertexExample, endVertexExample, options)`
<br />
This function determines all shortest paths in a graph identified by *graphName*.
If one wants to call this function to receive nearly all shortest paths for a
graph the option *algorithm* should be set to
[Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) to
increase performance.
If no algorithm is provided in the options the function chooses the appropriate
one (either [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm)
 or [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm)) according to its parameters.
The length of a path is by default the amount of edges from one start vertex to
an end vertex. The option weight allows the user to define an edge attribute
representing the length.
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *startVertexExample* : An example for the desired start Vertices
  (see [example](#short-explanation-of-the-example-parameter)).
* *endVertexExample*   : An example for the desired
  end Vertices (see [example](#short-explanation-of-the-example-parameter)).
* *options* (optional) : An object containing the following options:
  * *direction*                        : The direction of the edges as a string.
    Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeCollectionRestriction*        : One or multiple edge
    collection names. Only edges from these collections will be considered for the path.
  * *startVertexCollectionRestriction* : One or multiple vertex
    collection names. Only vertices from these collections will be considered as
    start vertex of a path.
  * *endVertexCollectionRestriction*   : One or multiple vertex
    collection names. Only vertices from these collections will be considered as
    end vertex of a path.
  * *edgeExamples*                     : A filter example for the
    edges in the shortest paths
    (see [example](#short-explanation-of-the-example-parameter)).
  * *algorithm*                        : The algorithm to calculate
    the shortest paths. If both start and end vertex examples are empty
    [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) is
    used, otherwise the default is [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*                           : The name of the attribute of
    the edges containing the length as a string.
  * *defaultWeight*                    : Only used with the option *weight*.
    If an edge does not have the attribute named as defined in option *weight* this default
    is used as length.
    If no default is supplied the default would be positive Infinity so the path could
    not be calculated.
  * *stopAtFirstMatch*                 : Only useful if targetVertices is an example that matches 
    to more than one vertex. If so only the shortest path to
    the closest of these target vertices is returned.
    This flag is of special use if you have target pattern and
    you want to know which vertex with this pattern is matched first.
  * *includeData*                      : Triggers if only *_id*'s are returned (*false*, default)
    or if data is included for all objects as well (*true*)
    This will modify the content of *vertex*, *path.vertices*
    and *path.edges*. 
<br />
NOTE: Since version 2.6 we have included a new optional parameter *includeData*.
This parameter triggers if the result contains the real data object *true* or
it just includes the *_id* values *false*.
The default value is *false* as it yields performance benefits.
<br />
@EXAMPLES
<br />
A route planner example, shortest distance from all german to all french cities:
<br />

<div id="generalGraphShortestPaths1_container">
<div id="generalGraphShortestPaths1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_SHORTEST_PATH("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {}, {}, {"</span> +
........&gt; <span class="hljs-string">"weight : 'distance', endVertexCollectionRestriction : 'frenchCity', "</span> +
........&gt; <span class="hljs-string">"includeData: true, "</span> +
........&gt; <span class="hljs-string">"startVertexCollectionRestriction : 'germanCity'}) RETURN [e.startVertex, e.vertex._id, "</span> +
........&gt; <span class="hljs-string">"e.distance, LENGTH(e.paths)]"</span>
........&gt; ).toArray();
[ 
  [ 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">0</span> 
  ], 
  [ 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">0</span> 
  ], 
  [ 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">0</span> 
  ], 
  [ 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">0</span> 
  ], 
  [ 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">0</span> 
  ], 
  [ 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">0</span> 
  ] 
]
</pre>
</div>
<div id="generalGraphShortestPaths1_short" onclick="$('#generalGraphShortestPaths1_short').hide(); $('#generalGraphShortestPaths1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_SHORTEST_PATH("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {}, {}, {"</span> +
........&gt; <span class="hljs-string">"weight : 'distance', endVertexCollectionRestriction : 'frenchCity', "</span> +
........&gt; <span class="hljs-string">"includeData: true, "</span> +
........&gt; <span class="hljs-string">"startVertexCollectionRestriction : 'germanCity'}) RETURN [e.startVertex, e.vertex._id, "</span> +
........&gt; <span class="hljs-string">"e.distance, LENGTH(e.paths)]"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, shortest distance from Hamburg and Cologne to Lyon:
<br />

<div id="generalGraphShortestPaths2_container">
<div id="generalGraphShortestPaths2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_SHORTEST_PATH("</span>
........&gt; +<span class="hljs-string">"'routeplanner', [{_id: 'germanCity/Cologne'},{_id: 'germanCity/Munich'}], "</span> +
........&gt; <span class="hljs-string">"'frenchCity/Lyon', "</span> +
........&gt; <span class="hljs-string">"{weight : 'distance'}) RETURN [e.startVertex, e.vertex, e.distance, LENGTH(e.paths)]"</span>
........&gt; ).toArray();
[ 
  [ 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-literal">null</span>, 
    <span class="hljs-number">1</span>, 
    <span class="hljs-number">0</span> 
  ] 
]
</pre>
</div>
<div id="generalGraphShortestPaths2_short" onclick="$('#generalGraphShortestPaths2_short').hide(); $('#generalGraphShortestPaths2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_SHORTEST_PATH("</span>
........&gt; +<span class="hljs-string">"'routeplanner', [{_id: 'germanCity/Cologne'},{_id: 'germanCity/Munich'}], "</span> +
........&gt; <span class="hljs-string">"'frenchCity/Lyon', "</span> +
........&gt; <span class="hljs-string">"{weight : 'distance'}) RETURN [e.startVertex, e.vertex, e.distance, LENGTH(e.paths)]"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_traversal

The GRAPH\_TRAVERSAL function traverses through the graph.
<br />
`GRAPH_TRAVERSAL (graphName, startVertexExample, direction, options)`
<br />
This function performs traversals on the given graph.
<br />
The complexity of this function strongly depends on the usage.
<br />
*Parameters*
* *graphName*          : The name of the graph as a string.
* *startVertexExample*        : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *direction*          : The direction of the edges as a string. Possible values
are *outbound*, *inbound* and *any* (default).
* *options*: Object containing optional options.
<br />
*Options*:
<br />
* *strategy*: determines the visitation strategy. Possible values are 
*depthfirst* and *breadthfirst*. Default is *breadthfirst*.
* *order*: determines the visitation order. Possible values are 
*preorder* and *postorder*.
* *itemOrder*: determines the order in which connections returned by the 
expander will be processed. Possible values are *forward* and *backward*.
* *maxDepth*: if set to a value greater than *0*, this will limit the 
traversal to this maximum depth. 
* *minDepth*: if set to a value greater than *0*, all vertices found on 
a level below the *minDepth* level will not be included in the result.
* *maxIterations*: the maximum number of iterations that the traversal is 
allowed to perform. It is sensible to set this number so unbounded traversals 
will terminate at some point.
* *uniqueness*: an object that defines how repeated visitations of vertices should 
be handled. The *uniqueness* object can have a sub-attribute *vertices*, and a
sub-attribute *edges*. Each sub-attribute can have one of the following values:
  * *"none"*: no uniqueness constraints
  * *"path"*: element is excluded if it is already contained in the current path.
   This setting may be sensible for graphs that contain cycles (e.g. A -> B -> C -> A).
  * *"global"*: element is excluded if it was already found/visited at any 
  point during the traversal.
* *filterVertices*  An optional array of example vertex documents that the traversal will treat specially.
    If no examples are given, the traversal will handle all encountered vertices equally.
    If one or many vertex examples are given, the traversal will exclude any non-matching vertex from the
    result and/or not descend into it. Optionally, filterVertices can contain a string containing the name
    of a user-defined AQL function that should be responsible for filtering.
    If so, the AQL function is expected to have the following signature:
<br />
    `function (config, vertex, path)`
<br />
    If a custom AQL function is used for filterVertices, it is expected to return one of the following values:
<br />
  * [ ]: Include the vertex in the result and descend into its connected edges
  * [ "prune" ]: Will include the vertex in the result but not descend into its connected edges
  * [ "exclude" ]: Will not include the vertex in the result but descend into its connected edges
  * [ "prune", "exclude" ]: Will completely ignore the vertex and its connected edges
<br />
* *vertexFilterMethod:* Only useful in conjunction with filterVertices and if no user-defined AQL function is used.
    If specified, it will influence how vertices are handled that don't match the examples in filterVertices:
<br />
  * [ "prune" ]: Will include non-matching vertices in the result but not descend into them
  * [ "exclude" ]: Will not include non-matching vertices in the result but descend into them
  * [ "prune", "exclude" ]: Will completely ignore the vertex and its connected edges
<br />
@EXAMPLES
<br />
A route planner example, start a traversal from Hamburg :
<br />

<div id="generalGraphTraversal1_container">
<div id="generalGraphTraversal1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL('routeplanner', 'germanCity/Hamburg',"</span> +
........&gt; <span class="hljs-string">" 'outbound') RETURN e"</span>
........&gt; ).toArray();
[ 
  [ 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1822443649"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">53.5653</span>, 
          <span class="hljs-number">10.0014</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1822247041"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">50.9364</span>, 
          <span class="hljs-number">6.9528</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1822967937"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">45.76</span>, 
          <span class="hljs-number">4.84</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1823164545"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">48.8567</span>, 
          <span class="hljs-number">2.3508</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1822967937"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">45.76</span>, 
          <span class="hljs-number">4.84</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1823164545"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">48.8567</span>, 
          <span class="hljs-number">2.3508</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1822967937"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">45.76</span>, 
          <span class="hljs-number">4.84</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1822967937"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">45.76</span>, 
          <span class="hljs-number">4.84</span> 
        ] 
      } 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphTraversal1_short" onclick="$('#generalGraphTraversal1_short').hide(); $('#generalGraphTraversal1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL('routeplanner', 'germanCity/Hamburg',"</span> +
........&gt; <span class="hljs-string">" 'outbound') RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, start a traversal from Hamburg with a max depth of 1
so only the direct neighbors of Hamburg are returned:
<br />

<div id="generalGraphTraversal2_container">
<div id="generalGraphTraversal2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL('routeplanner', 'germanCity/Hamburg',"</span> +
........&gt; <span class="hljs-string">" 'outbound', {maxDepth : 1}) RETURN e"</span>
........&gt; ).toArray();
[ 
  [ 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1828931713"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">53.5653</span>, 
          <span class="hljs-number">10.0014</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1828735105"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">50.9364</span>, 
          <span class="hljs-number">6.9528</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1829652609"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">48.8567</span>, 
          <span class="hljs-number">2.3508</span> 
        ] 
      } 
    }, 
    { 
      <span class="hljs-string">"vertex"</span> : { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1829456001"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">45.76</span>, 
          <span class="hljs-number">4.84</span> 
        ] 
      } 
    } 
  ] 
]
</pre>
</div>
<div id="generalGraphTraversal2_short" onclick="$('#generalGraphTraversal2_short').hide(); $('#generalGraphTraversal2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL('routeplanner', 'germanCity/Hamburg',"</span> +
........&gt; <span class="hljs-string">" 'outbound', {maxDepth : 1}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_distance

The GRAPH\_DISTANCE\_TO function returns all paths and there distance within a graph.
<br />
`GRAPH_DISTANCE_TO (graphName, startVertexExample, endVertexExample, options)`
<br />
This function is a wrapper of [GRAPH\_SHORTEST\_PATH](#graphshortestpath).
It does not return the actual path but only the distance between two vertices.
<br />
@EXAMPLES
<br />
A route planner example, distance from all french to all german cities:
<br />

<div id="generalGraphDistanceTo1_container">
<div id="generalGraphDistanceTo1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_DISTANCE_TO("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {}, { "</span> +
........&gt; <span class="hljs-string">" weight : 'distance', endVertexCollectionRestriction : 'germanCity', "</span> +
........&gt; <span class="hljs-string">"startVertexCollectionRestriction : 'frenchCity'}) RETURN [e.startVertex, e.vertex, "</span> +
........&gt; <span class="hljs-string">"e.distance]"</span>
........&gt; ).toArray();
[ 
  [ 
    <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-number">1</span> 
  ], 
  [ 
    <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-number">1</span> 
  ], 
  [ 
    <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-number">1</span> 
  ], 
  [ 
    <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-number">1</span> 
  ], 
  [ 
    <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-number">1</span> 
  ], 
  [ 
    <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-number">1</span> 
  ] 
]
</pre>
</div>
<div id="generalGraphDistanceTo1_short" onclick="$('#generalGraphDistanceTo1_short').hide(); $('#generalGraphDistanceTo1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_DISTANCE_TO("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {}, { "</span> +
........&gt; <span class="hljs-string">" weight : 'distance', endVertexCollectionRestriction : 'germanCity', "</span> +
........&gt; <span class="hljs-string">"startVertexCollectionRestriction : 'frenchCity'}) RETURN [e.startVertex, e.vertex, "</span> +
........&gt; <span class="hljs-string">"e.distance]"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, distance from Hamburg and Cologne to Lyon:
<br />

<div id="generalGraphDistanceTo2_container">
<div id="generalGraphDistanceTo2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_DISTANCE_TO("</span>
........&gt; + <span class="hljs-string">"'routeplanner', [{_id: 'germanCity/Cologne'},{_id: 'germanCity/Hamburg'}], "</span> +
........&gt; <span class="hljs-string">"'frenchCity/Lyon', "</span> +
........&gt; <span class="hljs-string">"{weight : 'distance'}) RETURN [e.startVertex, e.vertex, e.distance]"</span>
........&gt; ).toArray();
[ 
  [ 
    <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-number">1</span> 
  ], 
  [ 
    <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-number">1</span> 
  ] 
]
</pre>
</div>
<div id="generalGraphDistanceTo2_short" onclick="$('#generalGraphDistanceTo2_short').hide(); $('#generalGraphDistanceTo2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_DISTANCE_TO("</span>
........&gt; + <span class="hljs-string">"'routeplanner', [{_id: 'germanCity/Cologne'},{_id: 'germanCity/Hamburg'}], "</span> +
........&gt; <span class="hljs-string">"'frenchCity/Lyon', "</span> +
........&gt; <span class="hljs-string">"{weight : 'distance'}) RETURN [e.startVertex, e.vertex, e.distance]"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_traversal_tree

The GRAPH\_TRAVERSAL\_TREE function traverses through the graph.
<br />
`GRAPH_TRAVERSAL_TREE (graphName, startVertexExample, direction, connectName, options)`
This function creates a tree format from the result for a better visualization of
the path.
This function performs traversals on the given graph.
<br />
The complexity of this function strongly depends on the usage.
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *startVertexExample*         : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *direction*          : The direction of the edges as a string.
 Possible values are *outbound*, *inbound* and *any* (default).
* *connectName*        : The result attribute which
 contains the connection.
* *options* (optional) : An object containing options, see
 [Graph Traversals](../Aql/GraphOperations.md#graphtraversal):
<br />
@EXAMPLES
<br />
A route planner example, start a traversal from Hamburg :
<br />

<div id="generalGraphTraversalTree1_container">
<div id="generalGraphTraversalTree1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'germanCity/Hamburg',"</span> +
........&gt; <span class="hljs-string">" 'outbound', 'connnection') RETURN e"</span>
........&gt; ).toArray();
[ 
  [ 
    [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1835419777"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">53.5653</span>, 
          <span class="hljs-number">10.0014</span> 
        ], 
        <span class="hljs-string">"connnection"</span> : [ 
          { 
            <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
            <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
            <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1835223169"</span>, 
            <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
            <span class="hljs-string">"loc"</span> : [ 
              <span class="hljs-number">50.9364</span>, 
              <span class="hljs-number">6.9528</span> 
            ], 
            <span class="hljs-string">"connnection"</span> : [ 
              { 
                <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
                <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
                <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1835944065"</span>, 
                <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
                <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
                <span class="hljs-string">"loc"</span> : [ 
                  <span class="hljs-number">45.76</span>, 
                  <span class="hljs-number">4.84</span> 
                ] 
              }, 
              { 
                <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
                <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
                <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1836140673"</span>, 
                <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
                <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
                <span class="hljs-string">"loc"</span> : [ 
                  <span class="hljs-number">48.8567</span>, 
                  <span class="hljs-number">2.3508</span> 
                ], 
                <span class="hljs-string">"connnection"</span> : [ 
                  { 
                    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
                    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
                    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1835944065"</span>, 
                    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
                    <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
                    <span class="hljs-string">"loc"</span> : [ 
                      <span class="hljs-number">45.76</span>, 
                      <span class="hljs-number">4.84</span> 
                    ] 
                  } 
                ] 
              } 
            ] 
          }, 
          { 
            <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
            <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
            <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1836140673"</span>, 
            <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
            <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
            <span class="hljs-string">"loc"</span> : [ 
              <span class="hljs-number">48.8567</span>, 
              <span class="hljs-number">2.3508</span> 
            ], 
            <span class="hljs-string">"connnection"</span> : [ 
              { 
                <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
                <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
                <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1835944065"</span>, 
                <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
                <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
                <span class="hljs-string">"loc"</span> : [ 
                  <span class="hljs-number">45.76</span>, 
                  <span class="hljs-number">4.84</span> 
                ] 
              } 
            ] 
          }, 
          { 
            <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
            <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
            <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1835944065"</span>, 
            <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
            <span class="hljs-string">"loc"</span> : [ 
              <span class="hljs-number">45.76</span>, 
              <span class="hljs-number">4.84</span> 
            ] 
          } 
        ] 
      } 
    ] 
  ] 
]
</pre>
</div>
<div id="generalGraphTraversalTree1_short" onclick="$('#generalGraphTraversalTree1_short').hide(); $('#generalGraphTraversalTree1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'germanCity/Hamburg',"</span> +
........&gt; <span class="hljs-string">" 'outbound', 'connnection') RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, start a traversal from Hamburg with a max depth of 1 so
 only the direct neighbors of Hamburg are returned:
<br />

<div id="generalGraphTraversalTree2_container">
<div id="generalGraphTraversalTree2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'germanCity/Hamburg',"</span>+
........&gt; <span class="hljs-string">" 'outbound', 'connnection', {maxDepth : 1}) RETURN e"</span>
........&gt; ).toArray();
[ 
  [ 
    [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1841907841"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">53.5653</span>, 
          <span class="hljs-number">10.0014</span> 
        ], 
        <span class="hljs-string">"connnection"</span> : [ 
          { 
            <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
            <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
            <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1841711233"</span>, 
            <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
            <span class="hljs-string">"loc"</span> : [ 
              <span class="hljs-number">50.9364</span>, 
              <span class="hljs-number">6.9528</span> 
            ] 
          }, 
          { 
            <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
            <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
            <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1842628737"</span>, 
            <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
            <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
            <span class="hljs-string">"loc"</span> : [ 
              <span class="hljs-number">48.8567</span>, 
              <span class="hljs-number">2.3508</span> 
            ] 
          }, 
          { 
            <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
            <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
            <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1842432129"</span>, 
            <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
            <span class="hljs-string">"loc"</span> : [ 
              <span class="hljs-number">45.76</span>, 
              <span class="hljs-number">4.84</span> 
            ] 
          } 
        ] 
      } 
    ] 
  ] 
]
</pre>
</div>
<div id="generalGraphTraversalTree2_short" onclick="$('#generalGraphTraversalTree2_short').hide(); $('#generalGraphTraversalTree2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'germanCity/Hamburg',"</span>+
........&gt; <span class="hljs-string">" 'outbound', 'connnection', {maxDepth : 1}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_neighbors

The GRAPH\_NEIGHBORS function returns all neighbors of vertices.
<br />
`GRAPH_NEIGHBORS (graphName, vertexExample, options)`
<br />
By default only the direct neighbors (path length equals 1) are returned, but one can define
the range of the path length to the neighbors with the options *minDepth* and *maxDepth*.
The complexity of this method is **O(n\*m^x)** with *n* being the vertices defined by the
parameter vertexExamplex, *m* the average amount of neighbors and *x* the maximal depths.
Hence the default call would have a complexity of **O(n\*m)**;
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *vertexExample*      : An example for the desired
  vertices (see [example](#short-explanation-of-the-example-parameter)).
* *options*            : An object containing the following options:
  * *direction*                        : The direction
    of the edges. Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeExamples*                     : A filter example for the edges to
    the neighbors (see [example](#short-explanation-of-the-example-parameter)).
  * *neighborExamples*                 : An example for the desired neighbors
    (see [example](#short-explanation-of-the-example-parameter)).
  * *edgeCollectionRestriction*        : One or multiple edge
  collection names. Only edges from these collections will be considered for the path.
  * *vertexCollectionRestriction* : One or multiple vertex
    collection names. Only vertices from these collections will be contained in the
  result. This does not effect vertices on the path.
  * *minDepth*                         : Defines the minimal
    depth a path to a neighbor must have to be returned (default is 1).
  * *maxDepth*                         : Defines the maximal
    depth a path to a neighbor must have to be returned (default is 1).
  * *maxIterations*: the maximum number of iterations that the traversal is
    allowed to perform. It is sensible to set this number so unbounded traversals
    will terminate at some point.
  * *includeData* is a boolean value to define if the returned documents should be extracted 
    instead of returning their ids only. The default is *false*.
<br />
Note: in ArangoDB versions prior to 2.6 *NEIGHBORS* returned the array of neighbor vertices with 
all attributes and not just the vertex ids. To return to the same behavior, set the *includeData*
option to *true* in 2.6 and above.
<br />
@EXAMPLES
<br />
A route planner example, all neighbors of locations with a distance of either
700 or 600.:
<br />

<div id="generalGraphNeighbors1_container">
<div id="generalGraphNeighbors1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_NEIGHBORS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {edgeExamples : [{distance: 600}, {distance: 700}]}) RETURN e"</span>
........&gt; ).toArray();
[ 
  <span class="hljs-string">"germanCity/Cologne"</span>, 
  <span class="hljs-string">"frenchCity/Lyon"</span> 
]
</pre>
</div>
</div>

<br />
A route planner example, all outbound neighbors of Hamburg with a maximal depth of 2 :
<br />

<div id="generalGraphNeighbors2_container">
<div id="generalGraphNeighbors2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_NEIGHBORS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {direction : 'outbound', maxDepth : 2}) RETURN e"</span>
........&gt; ).toArray();
[ 
  <span class="hljs-string">"frenchCity/Lyon"</span>, 
  <span class="hljs-string">"germanCity/Cologne"</span>, 
  <span class="hljs-string">"frenchCity/Paris"</span> 
]
</pre>
</div>
<div id="generalGraphNeighbors2_short" onclick="$('#generalGraphNeighbors2_short').hide(); $('#generalGraphNeighbors2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_NEIGHBORS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {direction : 'outbound', maxDepth : 2}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_edges

<br />
`GRAPH_EDGES (graphName, vertexExample, options)`
<br />
The GRAPH\_EDGES function returns all edges of the graph connected to the vertices
defined by the example.
<br />
The complexity of this method is **O(n\*m^x)** with *n* being the vertices defined by the
parameter vertexExamplex, *m* the average amount of edges of a vertex and *x* the maximal
depths.
Hence the default call would have a complexity of **O(n\*m)**;
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *vertexExample*      : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *options* (optional) : An object containing the following options:
  * *direction*                        : The direction
of the edges as a string. Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeCollectionRestriction*        : One or multiple edge
  collection names. Only edges from these collections will be considered for the path.
  * *startVertexCollectionRestriction* : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  start vertex of a path.
  * *endVertexCollectionRestriction*   : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  end vertex of a path.
  * *edgeExamples*                     : A filter example
for the edges (see [example](#short-explanation-of-the-example-parameter)).
  * *minDepth*                         : Defines the minimal length of a path from an edge
 to a vertex (default is 1, which means only the edges directly connected to a vertex would
 be returned).
  * *maxDepth*                         : Defines the maximal length of a path from an edge
 to a vertex (default is 1, which means only the edges directly connected to a vertex would
 be returned).
  * *maxIterations*: the maximum number of iterations that the traversal is
     allowed to perform. It is sensible to set this number so unbounded traversals
     will terminate.
  * *includeData*: Defines if the result should contain only ids (false) or if all documents
    should be fully extracted (true). By default this parameter is set to false, so only ids
    will be returned.
<br />
@EXAMPLES
<br />
A route planner example, all edges to locations with a distance of either 700 or 600.:
<br />

<div id="generalGraphEdges1_container">
<div id="generalGraphEdges1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_EDGES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {edgeExamples : [{distance: 600}, {distance: 700}]}) RETURN e"</span>
........&gt; ).toArray();
[ 
  <span class="hljs-string">"internationalHighway/1338460289"</span> 
]
</pre>
</div>
</div>

<br />
A route planner example, all outbound edges of Hamburg with a maximal depth of 2 :
<br />

<div id="generalGraphEdges2_container">
<div id="generalGraphEdges2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_EDGES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {direction : 'outbound', maxDepth : 2}) RETURN e"</span>
........&gt; ).toArray();
[ 
  <span class="hljs-string">"germanHighway/1343506561"</span>, 
  <span class="hljs-string">"internationalHighway/1344948353"</span>, 
  <span class="hljs-string">"internationalHighway/1345144961"</span>, 
  <span class="hljs-string">"internationalHighway/1344555137"</span>, 
  <span class="hljs-string">"frenchHighway/1343834241"</span>, 
  <span class="hljs-string">"internationalHighway/1344751745"</span> 
]
</pre>
</div>
<div id="generalGraphEdges2_short" onclick="$('#generalGraphEdges2_short').hide(); $('#generalGraphEdges2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_EDGES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {direction : 'outbound', maxDepth : 2}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Including the data:
<br />

<div id="generalGraphEdges3_container">
<div id="generalGraphEdges3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_EDGES("</span>
........&gt; + <span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {direction : 'outbound',"</span>
........&gt; + <span class="hljs-string">"maxDepth : 2, includeData: true}) RETURN e"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanHighway/1349994625"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1349994625"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1349994625"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">500</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/1351436417"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1351436417"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1351436417"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">700</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/1351633025"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1351633025"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1351633025"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">550</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/1351043201"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1351043201"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1351043201"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">900</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchHighway/1350322305"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1350322305"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1350322305"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">550</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/1351239809"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1351239809"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1351239809"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1300</span> 
  } 
]
</pre>
</div>
<div id="generalGraphEdges3_short" onclick="$('#generalGraphEdges3_short').hide(); $('#generalGraphEdges3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_EDGES("</span>
........&gt; + <span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {direction : 'outbound',"</span>
........&gt; + <span class="hljs-string">"maxDepth : 2, includeData: true}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_vertices

The GRAPH\_VERTICES function returns all vertices.
<br />
`GRAPH_VERTICES (graphName, vertexExample, options)`
<br />
According to the optional filters it will only return vertices that have
outbound, inbound or any (default) edges.
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *vertexExample*      : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *options* (optional)           : An object containing the following options:
  * *direction*        : The direction of the edges as a string. Possible values are
  *outbound*, *inbound* and *any* (default).
  * *vertexCollectionRestriction*      : One or multiple
vertex collections that should be considered.
<br />
@EXAMPLES
<br />
A route planner example, all vertices of the graph
<br />

<div id="generalGraphVertices1_container">
<div id="generalGraphVertices1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_VERTICES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}) RETURN e"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Berlin"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1864059009"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">3000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">52.5167</span>, 
      <span class="hljs-number">13.3833</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1864255617"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">50.9364</span>, 
      <span class="hljs-number">6.9528</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1864452225"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">53.5653</span>, 
      <span class="hljs-number">10.0014</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1865173121"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">48.8567</span>, 
      <span class="hljs-number">2.3508</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1864976513"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">45.76</span>, 
      <span class="hljs-number">4.84</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphVertices1_short" onclick="$('#generalGraphVertices1_short').hide(); $('#generalGraphVertices1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_VERTICES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}) RETURN e"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all vertices from collection *germanCity*.
<br />

<div id="generalGraphVertices2_container">
<div id="generalGraphVertices2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_VERTICES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {direction : 'any', vertexCollectionRestriction"</span> +
........&gt; <span class="hljs-string">" : 'germanCity'}) RETURN e"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Berlin"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1870547073"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">3000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">52.5167</span>, 
      <span class="hljs-number">13.3833</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1870743681"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">50.9364</span>, 
      <span class="hljs-number">6.9528</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1870940289"</span>, 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">53.5653</span>, 
      <span class="hljs-number">10.0014</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphVertices2_short" onclick="$('#generalGraphVertices2_short').hide(); $('#generalGraphVertices2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_VERTICES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {direction : 'any', vertexCollectionRestriction"</span> +
........&gt; <span class="hljs-string">" : 'germanCity'}) RETURN e"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_common_neighbors

The GRAPH\_COMMON\_NEIGHBORS function returns all common neighbors of the vertices
defined by the examples.
<br />
`GRAPH_COMMON_NEIGHBORS (graphName, vertex1Example, vertex2Examples,
optionsVertex1, optionsVertex2)`
<br />
This function returns the intersection of *GRAPH_NEIGHBORS(vertex1Example, optionsVertex1)*
and *GRAPH_NEIGHBORS(vertex2Example, optionsVertex2)*.
The complexity of this method is **O(n\*m^x)** with *n* being the maximal amount of vertices
defined by the parameters vertexExamples, *m* the average amount of neighbors and *x* the
maximal depths.
Hence the default call would have a complexity of **O(n\*m)**;
<br />
For parameter documentation read the documentation of
[GRAPH_NEIGHBORS](#graphneighbors).
<br />
@EXAMPLES
<br />
A route planner example, all common neighbors of capitals.
<br />

<div id="generalGraphCommonNeighbors1_container">
<div id="generalGraphCommonNeighbors1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_NEIGHBORS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {isCapital : true}, {isCapital : true}) RETURN e"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"germanCity/Hamburg"</span>, 
      <span class="hljs-string">"germanCity/Cologne"</span>, 
      <span class="hljs-string">"frenchCity/Lyon"</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"germanCity/Hamburg"</span>, 
      <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"germanCity/Cologne"</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphCommonNeighbors1_short" onclick="$('#generalGraphCommonNeighbors1_short').hide(); $('#generalGraphCommonNeighbors1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_NEIGHBORS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {isCapital : true}, {isCapital : true}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all common outbound neighbors of Hamburg with any other location
which have a maximal depth of 2:
<br />

<div id="generalGraphCommonNeighbors2_container">
<div id="generalGraphCommonNeighbors2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_NEIGHBORS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {}, {direction : 'outbound', maxDepth : 2}, "</span>+
........&gt; <span class="hljs-string">"{direction : 'outbound', maxDepth : 2}) RETURN e"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"germanCity/Cologne"</span>, 
      <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"frenchCity/Paris"</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"frenchCity/Paris"</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"left"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"right"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"neighbors"</span> : [ 
      <span class="hljs-string">"frenchCity/Lyon"</span> 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphCommonNeighbors2_short" onclick="$('#generalGraphCommonNeighbors2_short').hide(); $('#generalGraphCommonNeighbors2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_NEIGHBORS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', 'germanCity/Hamburg', {}, {direction : 'outbound', maxDepth : 2}, "</span>+
........&gt; <span class="hljs-string">"{direction : 'outbound', maxDepth : 2}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_common_properties

<br />
`GRAPH_COMMON_PROPERTIES (graphName, vertex1Example, vertex2Examples, options)`
<br />
The GRAPH\_COMMON\_PROPERTIES function returns a list of objects which have the id of
the vertices defined by *vertex1Example* as keys and a list of vertices defined by
*vertex21Example*, that share common properties as value. Notice that only the
vertex id and the matching attributes are returned in the result.
<br />
The complexity of this method is **O(n)** with *n* being the maximal amount of vertices
defined by the parameters vertexExamples.
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *vertex1Example*     : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *vertex2Example*     : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *options* (optional)    : An object containing the following options:
  * *vertex1CollectionRestriction* : One or multiple vertex
  collection names. Only vertices from these collections will be considered.
  * *vertex2CollectionRestriction*   : One or multiple vertex
  collection names. Only vertices from these collections will be considered.
  * *ignoreProperties* : One or multiple
 attributes of a document that should be ignored, either a string or an array..
<br />
@EXAMPLES
<br />
A route planner example, all locations with the same properties:
<br />

<div id="generalGraphProperties1_container">
<div id="generalGraphProperties1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_PROPERTIES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {}) RETURN e"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Paris"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Cologne"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Hamburg"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Lyon"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphProperties1_short" onclick="$('#generalGraphProperties1_short').hide(); $('#generalGraphProperties1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_PROPERTIES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all cities which share same properties except for population.
<br />

<div id="generalGraphProperties2_container">
<div id="generalGraphProperties2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_PROPERTIES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {}, {ignoreProperties: 'population'}) RETURN e"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Paris"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Cologne"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"germanCity/Hamburg"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"frenchCity/Lyon"</span> : [ 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span> 
      } 
    ] 
  } 
]
</pre>
</div>
<div id="generalGraphProperties2_short" onclick="$('#generalGraphProperties2_short').hide(); $('#generalGraphProperties2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR e IN GRAPH_COMMON_PROPERTIES("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {}, {ignoreProperties: 'population'}) RETURN e"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_absolute_eccentricity

<br />
`GRAPH_ABSOLUTE_ECCENTRICITY (graphName, vertexExample, options)`
<br />
 The GRAPH\_ABSOLUTE\_ECCENTRICITY function returns the
[eccentricity](http://en.wikipedia.org/wiki/Distance_%28graph_theory%29)
of the vertices defined by the examples.
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *vertexExample*      : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *options* (optional)    : An object containing the following options:
  * *direction*                        : The direction of the edges as a string.
Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeCollectionRestriction*        : One or multiple edge
  collection names. Only edges from these collections will be considered for the path.
  * *startVertexCollectionRestriction* : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  start vertex of a path.
  * *endVertexCollectionRestriction*   : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  end vertex of a path.
  * *edgeExamples*                     : A filter example for the edges in the
 shortest paths (see [example](#short-explanation-of-the-example-parameter)).
  * *algorithm*                        : The algorithm to calculate
 the shortest paths as a string. If vertex example is empty
 [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) is
 used as default, otherwise the default is
 [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm)
  * *weight*                           : The name of the attribute of
the edges containing the length as a string.
  * *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the absolute eccentricity of all locations.
<br />

<div id="generalGraphAbsEccentricity1_container">
<div id="generalGraphAbsEccentricity1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY('routeplanner', {})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsEccentricity1_short" onclick="$('#generalGraphAbsEccentricity1_short').hide(); $('#generalGraphAbsEccentricity1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY('routeplanner', {})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute eccentricity of all locations.
This considers the actual distances.
<br />

<div id="generalGraphAbsEccentricity2_container">
<div id="generalGraphAbsEccentricity2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1200</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">850</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1200</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1200</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1200</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsEccentricity2_short" onclick="$('#generalGraphAbsEccentricity2_short').hide(); $('#generalGraphAbsEccentricity2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute eccentricity of all German cities regarding only
outbound paths.
<br />

<div id="generalGraphAbsEccentricity3_container">
<div id="generalGraphAbsEccentricity3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {}, {startVertexCollectionRestriction : 'germanCity', "</span> +
........&gt; <span class="hljs-string">"direction : 'outbound', weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1200</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">700</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1200</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsEccentricity3_short" onclick="$('#generalGraphAbsEccentricity3_short').hide(); $('#generalGraphAbsEccentricity3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_ECCENTRICITY("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {}, {startVertexCollectionRestriction : 'germanCity', "</span> +
........&gt; <span class="hljs-string">"direction : 'outbound', weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_eccentricity

<br />
`GRAPH_ECCENTRICITY (graphName, options)`
<br />
The GRAPH\_ECCENTRICITY function returns the normalized
[eccentricity](http://en.wikipedia.org/wiki/Distance_%28graph_theory%29)
of the graphs vertices
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *options* (optional) : An object containing the following options:
  * *direction*       : The direction of the edges as a string.
Possible values are *outbound*, *inbound* and *any* (default).
  * *algorithm*       : The algorithm to calculate the shortest paths as a string. Possible
values are [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm)
 (default) and [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*         : The name of the attribute of the edges containing the length as a string.
  * *defaultWeight*   : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the eccentricity of all locations.
<br />

<div id="generalGraphEccentricity1_container">
<div id="generalGraphEccentricity1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ECCENTRICITY('routeplanner')"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1</span> 
  } 
]
</pre>
</div>
<div id="generalGraphEccentricity1_short" onclick="$('#generalGraphEccentricity1_short').hide(); $('#generalGraphEccentricity1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ECCENTRICITY('routeplanner')"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the eccentricity of all locations.
This considers the actual distances.
<br />

<div id="generalGraphEccentricity2_container">
<div id="generalGraphEccentricity2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ECCENTRICITY('routeplanner', {weight : 'distance'})"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0.7083333333333335</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0.7083333333333335</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0.7083333333333335</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0.7083333333333335</span> 
  } 
]
</pre>
</div>
<div id="generalGraphEccentricity2_short" onclick="$('#generalGraphEccentricity2_short').hide(); $('#generalGraphEccentricity2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ECCENTRICITY('routeplanner', {weight : 'distance'})"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_absolute_closeness

<br />
`GRAPH_ABSOLUTE_CLOSENESS (graphName, vertexExample, options)`
<br />
The GRAPH\_ABSOLUTE\_CLOSENESS function returns the
[closeness](http://en.wikipedia.org/wiki/Centrality#Closeness-centrality)
of the vertices defined by the examples.
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *vertexExample*     : An example for the desired
vertices (see [example](#short-explanation-of-the-example-parameter)).
* *options*     : An object containing the following options:
  * *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
  * *edgeCollectionRestriction*        : One or multiple edge
  collection names. Only edges from these collections will be considered for the path.
  * *startVertexCollectionRestriction* : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  start vertex of a path.
  * *endVertexCollectionRestriction*   : One or multiple vertex
  collection names. Only vertices from these collections will be considered as
  end vertex of a path.
  * *edgeExamples*                     : A filter example for the
edges in the shortest paths (
see [example](#short-explanation-of-the-example-parameter)).
  * *algorithm*                        : The algorithm to calculate
the shortest paths. Possible values are
[Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) (default)
 and [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*                           : The name of the attribute of
the edges containing the length.
  * *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the absolute closeness of all locations.
<br />

<div id="generalGraphAbsCloseness1_container">
<div id="generalGraphAbsCloseness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_CLOSENESS('routeplanner', {})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">4</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">4</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">4</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">4</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">4</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsCloseness1_short" onclick="$('#generalGraphAbsCloseness1_short').hide(); $('#generalGraphAbsCloseness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_CLOSENESS('routeplanner', {})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphAbsCloseness2_container">
<div id="generalGraphAbsCloseness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_CLOSENESS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">3550</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">2600</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">3000</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">3200</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">3550</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsCloseness2_short" onclick="$('#generalGraphAbsCloseness2_short').hide(); $('#generalGraphAbsCloseness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_CLOSENESS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {}, {weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all German cities regarding only
outbound paths.
<br />

<div id="generalGraphAbsCloseness3_container">
<div id="generalGraphAbsCloseness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_CLOSENESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {}, {startVertexCollectionRestriction : 'germanCity', "</span> +
........&gt; <span class="hljs-string">"direction : 'outbound', weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">3550</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1250</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">2600</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsCloseness3_short" onclick="$('#generalGraphAbsCloseness3_short').hide(); $('#generalGraphAbsCloseness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_CLOSENESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {}, {startVertexCollectionRestriction : 'germanCity', "</span> +
........&gt; <span class="hljs-string">"direction : 'outbound', weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_closeness

<br />
`GRAPH_CLOSENESS (graphName, options)`
<br />
The GRAPH\_CLOSENESS function returns the normalized
[closeness](http://en.wikipedia.org/wiki/Centrality#Closeness-centrality)
of graphs vertices.
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *options*     : An object containing the following options:
  * *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
  * *algorithm*                        : The algorithm to calculate
the shortest paths. Possible values are
[Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) (default)
 and [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*                           : The name of the attribute of
the edges containing the length.
  * *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the closeness of all locations.
<br />

<div id="generalGraphCloseness1_container">
<div id="generalGraphCloseness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_CLOSENESS('routeplanner')"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">1</span> 
  } 
]
</pre>
</div>
<div id="generalGraphCloseness1_short" onclick="$('#generalGraphCloseness1_short').hide(); $('#generalGraphCloseness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_CLOSENESS('routeplanner')"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the closeness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphCloseness2_container">
<div id="generalGraphCloseness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_CLOSENESS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0.7323943661971831</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0.8666666666666666</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0.8125</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0.7323943661971831</span> 
  } 
]
</pre>
</div>
<div id="generalGraphCloseness2_short" onclick="$('#generalGraphCloseness2_short').hide(); $('#generalGraphCloseness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_CLOSENESS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphCloseness3_container">
<div id="generalGraphCloseness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_CLOSENESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner',{direction : 'outbound', weight : 'distance'})"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0.15492957746478875</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0.44</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0.21153846153846154</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
  } 
]
</pre>
</div>
<div id="generalGraphCloseness3_short" onclick="$('#generalGraphCloseness3_short').hide(); $('#generalGraphCloseness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_CLOSENESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner',{direction : 'outbound', weight : 'distance'})"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_absolute_betweenness

<br />
`GRAPH_ABSOLUTE_BETWEENNESS (graphName, options)`
<br />
The GRAPH\_ABSOLUTE\_BETWEENNESS function returns the
[betweenness](http://en.wikipedia.org/wiki/Betweenness_centrality)
of all vertices in the graph.
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
<br />
* *graphName*          : The name of the graph as a string.
* *options*            : An object containing the following options:
  * *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
  * *weight*                           : The name of the attribute of
the edges containing the length.
  * *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the betweenness can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the absolute betweenness of all locations.
<br />

<div id="generalGraphAbsBetweenness1_container">
<div id="generalGraphAbsBetweenness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_BETWEENNESS('routeplanner', {})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsBetweenness1_short" onclick="$('#generalGraphAbsBetweenness1_short').hide(); $('#generalGraphAbsBetweenness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_BETWEENNESS('routeplanner', {})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute betweenness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphAbsBetweenness2_container">
<div id="generalGraphAbsBetweenness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_BETWEENNESS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsBetweenness2_short" onclick="$('#generalGraphAbsBetweenness2_short').hide(); $('#generalGraphAbsBetweenness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_BETWEENNESS("</span>
........&gt; +<span class="hljs-string">"'routeplanner', {weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness regarding only
outbound paths.
<br />

<div id="generalGraphAbsBetweenness3_container">
<div id="generalGraphAbsBetweenness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_BETWEENNESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {direction : 'outbound', weight : 'distance'})"</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
  } 
]
</pre>
</div>
<div id="generalGraphAbsBetweenness3_short" onclick="$('#generalGraphAbsBetweenness3_short').hide(); $('#generalGraphAbsBetweenness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_ABSOLUTE_BETWEENNESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {direction : 'outbound', weight : 'distance'})"</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_betweenness

<br />
`GRAPH_BETWEENNESS (graphName, options)`
<br />
The GRAPH\_BETWEENNESS function returns the
[betweenness](http://en.wikipedia.org/wiki/Betweenness_centrality)
of graphs vertices.
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *options*     : An object containing the following options:
  * *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
  * *weight*                           : The name of the attribute of
the edges containing the length.
  * *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the betweenness of all locations.
<br />

<div id="generalGraphBetweenness1_container">
<div id="generalGraphBetweenness1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_BETWEENNESS('routeplanner')"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
  } 
]
</pre>
</div>
<div id="generalGraphBetweenness1_short" onclick="$('#generalGraphBetweenness1_short').hide(); $('#generalGraphBetweenness1_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_BETWEENNESS('routeplanner')"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the betweenness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphBetweenness2_container">
<div id="generalGraphBetweenness2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_BETWEENNESS('routeplanner', {weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
  } 
]
</pre>
</div>
<div id="generalGraphBetweenness2_short" onclick="$('#generalGraphBetweenness2_short').hide(); $('#generalGraphBetweenness2_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_BETWEENNESS('routeplanner', {weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the betweenness regarding only
outbound paths.
<br />

<div id="generalGraphBetweenness3_container">
<div id="generalGraphBetweenness3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_BETWEENNESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {direction : 'outbound', weight : 'distance'})"</span>).toArray();
[ 
  { 
    <span class="hljs-string">"germanCity/Berlin"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Cologne"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"germanCity/Hamburg"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Paris"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"frenchCity/Lyon"</span> : <span class="hljs-number">0</span> 
  } 
]
</pre>
</div>
<div id="generalGraphBetweenness3_short" onclick="$('#generalGraphBetweenness3_short').hide(); $('#generalGraphBetweenness3_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_BETWEENNESS("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {direction : 'outbound', weight : 'distance'})"</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_radius

<br />
`GRAPH_RADIUS (graphName, options)`
<br />
*The GRAPH\_RADIUS function returns the
[radius](http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29)
of a graph.*
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
* *graphName*       : The name of the graph as a string.
* *options*     : An object containing the following options:
  * *direction*     : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
  * *algorithm*     : The algorithm to calculate the shortest paths as a string. Possible
values are [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm)
 (default) and [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*           : The name of the attribute of
the edges containing the length.
  * *defaultWeight*    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the radius of the graph.
<br />

<div id="generalGraphRadius1_container">
<div id="generalGraphRadius1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_RADIUS('routeplanner')"</span>).toArray();
[ 
  <span class="hljs-number">1</span> 
]
</pre>
</div>
</div>

<br />
A route planner example, the radius of the graph.
This considers the actual distances.
<br />

<div id="generalGraphRadius2_container">
<div id="generalGraphRadius2_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_RADIUS('routeplanner', {weight : 'distance'})"</span>).toArray();
[ 
  <span class="hljs-number">850</span> 
]
</pre>
</div>
</div>

<br />
A route planner example, the radius of the graph regarding only
outbound paths.
<br />

<div id="generalGraphRadius3_container">
<div id="generalGraphRadius3_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_RADIUS("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {direction : 'outbound', weight : 'distance'})"</span>
........&gt; ).toArray();
[ 
  <span class="hljs-number">550</span> 
]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/aql.js -->
@startDocuBlock JSF_aql_general_graph_diameter

<br />
`GRAPH_DIAMETER (graphName, options)`
<br />
The GRAPH\_DIAMETER function returns the
[diameter](http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29)
of a graph.
<br />
The complexity of the function is described
[here](#the-complexity-of-the-shortest-path-algorithms).
<br />
*Parameters*
<br />
* *graphName*          : The name of the graph as a string.
* *options*     : An object containing the following options:
  * *direction*        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
  * *algorithm*        : The algorithm to calculate the shortest paths as a string. Possible
values are  [Floyd-Warshall](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm)
 (default) and [Dijkstra](http://en.wikipedia.org/wiki/Dijkstra's_algorithm).
  * *weight*           : The name of the attribute of
the edges containing the length.
  * *defaultWeight*    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
@EXAMPLES
<br />
A route planner example, the diameter of the graph.
<br />

<div id="generalGraphDiameter1_container">
<div id="generalGraphDiameter1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_DIAMETER('routeplanner')"</span>).toArray();
[ 
  <span class="hljs-number">1</span> 
]
</pre>
</div>
</div>

<br />
A route planner example, the diameter of the graph.
This considers the actual distances.
<br />

<div id="generalGraphDiameter2_container">
<div id="generalGraphDiameter2_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_DIAMETER('routeplanner', {weight : 'distance'})"</span>).toArray();
[ 
  <span class="hljs-number">1200</span> 
]
</pre>
</div>
</div>

<br />
A route planner example, the diameter of the graph regarding only
outbound paths.
<br />

<div id="generalGraphDiameter3_container">
<div id="generalGraphDiameter3_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db._query(<span class="hljs-string">"RETURN GRAPH_DIAMETER("</span>
........&gt; + <span class="hljs-string">"'routeplanner', {direction : 'outbound', weight : 'distance'})"</span>
........&gt; ).toArray();
[ 
  <span class="hljs-number">1200</span> 
]
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/graph-blueprint.js -->
@startDocuBlock edgeSetProperty

<br />
`edge.setProperty(name, value)`
<br />
Changes or sets the property *name* an *edges* to *value*.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/graph-blueprint.js -->
/*jshint strict: false, unused: false */

<br />
@brief Graph functionality
<br />
@file
<br />
DISCLAIMER
<br />
Copyright 2010-2012 triagens GmbH, Cologne, Germany
<br />
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<br />
    http://www.apache.org/licenses/LICENSE-2.0
<br />
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
<br />
Copyright holder is triAGENS GmbH, Cologne, Germany
<br />
@author Dr. Frank Celler, Lucas Dohmen
@author Copyright 2011-2012, triAGENS GmbH, Cologne, Germany
<br />

var arangodb = require("org/arangodb"),
  is = require("org/arangodb/is"),
  db = arangodb.db,
  ArangoCollection = arangodb.ArangoCollection,
  common = require("org/arangodb/graph-common"),
  newGraph = require("org/arangodb/general-graph"),
  Edge = common.Edge,
  Graph = common.Graph,
  Vertex = common.Vertex,
  GraphArray = common.GraphArray,
  Iterator = common.Iterator;

// -----------------------------------------------------------------------------
// --SECTION--                             module "org/arangodb/graph-blueprint"
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                                 private functions
// -----------------------------------------------------------------------------

<br />
@brief find or create a collection by name
<br />

var findOrCreateCollectionByName = function (name) {
  var col = db._collection(name);

  if (col === null) {
    col = db._create(name);
  } else if (!(col instanceof ArangoCollection) || col.type() !== ArangoCollection.TYPE_DOCUMENT) {
    throw "<" + name + "> must be a document collection";
  }

  if (col === null) {
    throw "collection '" + name + "' has vanished";
  }

  return col;
};

<br />
@brief find or create an edge collection by name
<br />

var findOrCreateEdgeCollectionByName = function (name) {
  var col = db._collection(name);

  if (col === null) {
    col = db._createEdgeCollection(name);
  } else if (!(col instanceof ArangoCollection) || col.type() !== ArangoCollection.TYPE_EDGE) {
    throw "<" + name + "> must be an edge collection";
  }

  if (col === null) {
    throw "collection '" + name + "' has vanished";
  }

  return col;
};

// -----------------------------------------------------------------------------
// --SECTION--                                                              Edge
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

<br />
@startDocuBlock edgeSetProperty

<br />
`edge.setProperty(name, value)`
<br />
Changes or sets the property *name* an *edges* to *value*.
<br />
@endDocuBlock

<br />

Edge.prototype.setProperty = function (name, value) {
  var shallow = this._properties._shallowCopy;
  var id;

  // Could potentially change the weight of edges
  this._graph.emptyCachedPredecessors();

  shallow.$label = this._properties.$label;
  shallow[name] = value;

  // TODO use "update" if this becomes available
  id = this._graph._edges.replace(this._properties, shallow);
  this._properties = this._graph._edges.document(id);

  return value;
};

// -----------------------------------------------------------------------------
// --SECTION--                                                            Vertex
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

<br />
@start Docu Block vertexEdges
<br />
`vertex.edges()`
<br />
Returns a list of in- or outbound edges of the *vertex*.
<br />
@end Docu Block
<br />

Vertex.prototype.edges = function () {
  var graph = this._graph;

  return graph._edges.edges(this._properties._id).map(function (result) {
    return graph.constructEdge(result);
  });
};

<br />
@start Docu Block vertexGetInEdges
<br />
///`vertex.getInEdges(label, ...)`
<br />
Returns a list of inbound edges of the *vertex* with given label(s).
<br />
@end Docu Block
<br />

Vertex.prototype.getInEdges = function () {
  var labels = Array.prototype.slice.call(arguments);
  var result = this.inbound();

  if (labels.length > 0) {
    result = result.filter(function (edge) {
      return (labels.lastIndexOf(edge.getLabel()) > -1);
    });
  }

  return result;
};

<br />
@start Docu Block vertexGetOutEdges
<br />
`vertex.getOutEdges(label, ...)`
<br />
Returns a list of outbound edges of the *vertex* with given label(s).
<br />
@end Docu Block
<br />

Vertex.prototype.getOutEdges = function () {
  var labels = Array.prototype.slice.call(arguments);
  var result = this.outbound();

  if (labels.length > 0) {
    result = result.filter(function (edge) {
      return (labels.lastIndexOf(edge.getLabel()) > -1);
    });
  }

  return result;
};

<br />
@start Docu Block vertexGetEdges
<br />
`vertex.getEdges(label, ...)`
<br />
Returns a list of in- or outbound edges of the *vertex* with given
label(s).
@end Docu Block
<br />

Vertex.prototype.getEdges = function () {
  var labels = Array.prototype.slice.call(arguments);
  var result = this.edges();

  if (labels.length > 0) {
    result = result.filter(function (edge) {
      return (labels.lastIndexOf(edge.getLabel()) > -1);
    });
  }

  return result;
};

<br />
@start Docu Block vertexInbound
<br />
`vertex.inbound()`
<br />
Returns a list of inbound edges of the *vertex*.
@end Docu Block
<br />

Vertex.prototype.inbound = function () {
  var graph = this._graph;

  return graph._edges.inEdges(this._properties._id).map(function (result) {
    return graph.constructEdge(result);
  });
};

<br />
@start Docu Block vertexOutbound
<br />
`vertex.outbound()`
<br />
Returns a list of outbound edges of the *vertex*.
<br />
@end Docu Block
<br />

Vertex.prototype.outbound = function () {
  var graph = this._graph;

  return graph._edges.outEdges(this._properties._id).map(function (result) {
    return graph.constructEdge(result);
  });
};

<br />
@start Docu Block vertexSetProperty
<br />
`vertex.setProperty(name, value)`
<br />
Changes or sets the property *name* a *vertex* to *value*.
<br />
@end Docu BLock
<br />

Vertex.prototype.setProperty = function (name, value) {
  var shallow = this._properties._shallowCopy;
  var id;

  shallow[name] = value;

  // TODO use "update" if this becomes available
  id = this._graph._vertices.replace(this._properties, shallow);
  this._properties = this._graph._vertices.document(id);

  return value;
};

// -----------------------------------------------------------------------------
// --SECTION--                                                             Graph
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                      constructors and destructors
// -----------------------------------------------------------------------------

<br />
@start Docu Block graphConstruct
<br />
`Graph(name, vertices, edges)`
<br />
Constructs a new graph object using the collection *vertices* for all
vertices and the collection *edges* for all edges. Note that it is
possible to construct two graphs with the same vertex set, but different
edge sets.
<br />
`Graph(name)`
<br />
Returns a known graph.
<br />
@end Docu Block
<br />

Graph.prototype.initialize = function (name, vertices, edges, waitForSync) {
  this._name = name;
  var gdb = db._collection("_graphs");
  var graphProperties;
  var graphPropertiesId;

  if (gdb === null) {
    throw "_graphs collection does not exist.";
  }

  if (typeof name !== "string" || name === "") {
    throw "<name> must be a string";
  }

  // convert collection objects to collection names
  if (typeof vertices === 'object' && typeof vertices.name === 'function') {
    vertices = vertices.name();
  }

  if (typeof edges === 'object' && typeof edges.name === 'function') {
    edges = edges.name();
  }

  // find an existing graph by name
  if (vertices === undefined && edges === undefined) {

    try {
      graphProperties = gdb.document(name);
    }
    catch (e) {
      throw "no graph named '" + name + "' found";
    }

    if (graphProperties === null) {
      throw "no graph named '" + name + "' found";
    }

    //check if graph can be loaded by this deprecated module
    var newGraphError = "Graph can not be loaded, "
      + "because more than 1 vertex collection is defined. "
      + "Please use the new graph module";
    var edgeDefinitions = db._graphs.document(name).edgeDefinitions;
    if (edgeDefinitions.length === 0) {
      throw newGraphError;
    }
    if (edgeDefinitions.length > 1) {
      throw newGraphError;
    } else if (edgeDefinitions.length === 1) {
      var from = edgeDefinitions[0].from;
      var to = edgeDefinitions[0].to;
      if (from.length !== 1 || to.length !== 1 || from[0] !== to[0]) {
        throw newGraphError;
      }
    }

    vertices = db._collection(edgeDefinitions[0].from[0]);

    if (vertices === null) {
      throw "vertex collection '" + edgeDefinitions[0].from[0] + "' has vanished";
    }

    edges = db._collection(edgeDefinitions[0].collection);

    if (edges === null) {
      throw "edge collection '" + edgeDefinitions[0].collection + "' has vanished";
    }
  }

  // sanity check for vertices
  else if (typeof vertices !== "string" || vertices === "") {
    throw "<vertices> must be a string or null";
  }

  // sanity check for edges
  else if (typeof edges !== "string" || edges === "") {
    throw "<edges> must be a string or null";
  }

  // create a new graph or get an existing graph
  else {
    try {
      graphProperties = gdb.document(name);
    }
    catch (e1) {
      graphProperties = null;
    }

    // graph doesn't exist yet, create it
    if (graphProperties === null) {

      // check if know that graph
      graphProperties = gdb.firstExample(
        'edgeDefintions', [{"collection": edges, "from" :[vertices], "to": [vertices]}]
      );

      if (graphProperties === null) {

        // check if edge is used in a graph
        gdb.toArray().forEach(
          function(singleGraph) {
            var sGEDs = singleGraph.edgeDefinitions;
            sGEDs.forEach(
              function(sGED) {
                if (sGED.collection === edges) {
                  graphProperties = "";
                }
              }
            );
          }
        );

        if (graphProperties === null) {
          findOrCreateCollectionByName(vertices);
          findOrCreateEdgeCollectionByName(edges);

          var newEdgeDefinition = [{"collection": edges, "from" :[vertices], "to": [vertices]}];

          graphPropertiesId = gdb.save(
            {
              'edgeDefinitions' : newEdgeDefinition,
              '_key' : name
            },
            waitForSync
          );

          graphProperties = gdb.document(graphPropertiesId._key);
        }
        else {
          throw "edge collection already used";
        }
      }
      else {
        throw "found graph but has different <name>";
      }
    }
    else {
      if (graphProperties.edgeDefinitions[0].from[0] !== vertices
        || graphProperties.edgeDefinitions[0].to[0] !== vertices
        || graphProperties.edgeDefinitions[0].collection !== edges) {
        throw "graph with that name already exists!";
      }
    }

    vertices = db._collection(graphProperties.edgeDefinitions[0].from[0]);
    edges = db._collection(graphProperties.edgeDefinitions[0].collection);
  }
  this._properties = graphProperties;

  // and store the collections
  this._gdb = gdb;
  this._vertices = vertices;
  this._edges = edges;

  // and dictionary for vertices and edges
  this._verticesCache = {};
  this._edgesCache = {};

  // and store the caches
  this.predecessors = {};
  this.distances = {};
};

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

<br />
@start Docu Block JSF_graph_getAll
<br />
`graph.getAll()`
<br />
Returns all available graphs.
@end Docu Block
<br />

Graph.getAll = function getAllGraphs () {
  var gdb = db._collection("_graphs"),
    graphs = [ ];

  gdb.toArray().forEach(function(doc) {
    try {
      var g = new Graph(doc._key);

      if (g._properties !== null) {
        graphs.push(g._properties);
      }
    }
    catch (err) {
      // if there's a problem, we just skip this graph
    }
  });

  return graphs;
};

<br />
@brief static drop function
<br />

Graph.drop = function (name, waitForSync) {
  var gdb = db._collection("_graphs");
  var exists = gdb.exists(name);

  try {
    var obj = new Graph(name);
    return obj.drop(waitForSync);
  }
  catch (err) {
    if (exists) {
      // if the graph exists but cannot be deleted because one of the underlying
      // collections is missing, delete from _graphs "manually"
      gdb.remove(name, true, waitForSync);
    }
  }
};

<br />
@start Docu Block graphDrop
<br />
`graph.drop(waitForSync)`
<br />
Drops the graph, the vertices, and the edges. Handle with care.
@end Docu Block
<br />

Graph.prototype.drop = function (waitForSync) {
  newGraph._drop(this._name, true);
};

<br />
@brief saves an edge to the graph
<br />

Graph.prototype._saveEdge = function(id, out_vertex_id, in_vertex_id, shallow, waitForSync) {
  this.emptyCachedPredecessors();

  if (id !== undefined && id !== null) {
    shallow._key = String(id);
  }

  var ref = this._edges.save(out_vertex_id,
                             in_vertex_id,
                             shallow,
                             waitForSync);

  return this.constructEdge(ref._id);
};

<br />
@brief saves a vertex to the graph
<br />

Graph.prototype._saveVertex = function (id, shallow, waitForSync) {
  var ref;

  if (is.existy(id)) {
    shallow._key = String(id);
  }

  ref = this._vertices.save(shallow, waitForSync);

  return this.constructVertex(ref._id);
};

<br />
@brief replaces a vertex to the graph
<br />

Graph.prototype._replaceVertex = function (vertex_id, data) {
  this._vertices.replace(vertex_id, data);
};

<br />
@brief replaces an edge in the graph
<br />

Graph.prototype._replaceEdge = function (edge_id, data) {
  this._edges.replace(edge_id, data);
};

<br />
@start Docu Block graphGetVertex
<br />
`graph.getVertex(id)`
<br />
Returns the vertex identified by *id* or *null*.
<br />
@end Docu Block
<br />

Graph.prototype.getVertex = function (id) {
  try {
    return this.constructVertex(id);
  }
  catch (e) {
    return null;
  }
};

<br />
@start Docu Block GraphGetVertices
<br />
`graph.getVertices()`
<br />
Returns an iterator for all vertices of the graph. The iterator supports the
methods *hasNext* and *next*.
<br />
@end Docu Block
<br />

Graph.prototype.getVertices = function () {
  var all = this._vertices.all(),
    graph = this,
    wrapper = function(object) {
      return graph.constructVertex(object);
    };

  return new Iterator(wrapper, all, "[edge iterator]");
};

<br />
@start Docu Block graphGetEdge
<br />
`graph.getEdge(id)`
<br />
Returns the edge identified by *id* or *null*.
<br />
@end Docu Block
<br />

Graph.prototype.getEdge = function (id) {
  var ref, edge;

  try {
    ref = this._edges.document(id);
  } catch (e) {
    ref = null;
  }

  if (ref !== null) {
    edge = this.constructEdge(ref);
  } else {
    try {
      edge = this.constructEdge(id);
    } catch (e1) {
      edge = null;
    }
  }

  return edge;
};

<br />
@startDocuBLock graphGetEdges
<br />
`graph.getEdges()`
<br />
Returns an iterator for all edges of the graph. The iterator supports the
methods *hasNext* and *next*.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionToArray

`collection.toArray()`
<br />
Converts the collection into an array of documents. Never use this call
in a production environment.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionTruncate

`collection.truncate()`
<br />
Truncates a *collection*, removing all documents but keeping all its
indexes.
<br />
@EXAMPLES
<br />
Truncates a collection:
<br />

<div id="collectionTruncate_container">
<div id="collectionTruncate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; col = db.example;
[ArangoCollection <span class="hljs-number">1099516033</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; col.save({ <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1099843713"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1099843713"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1099843713"</span> 
}
arangosh&gt; col.count();
<span class="hljs-number">1</span>
arangosh&gt; col.truncate();
arangosh&gt; col.count();
<span class="hljs-number">0</span>
</pre>
</div>
<div id="collectionTruncate_short" onclick="$('#collectionTruncate_short').hide(); $('#collectionTruncate_long').show();">
<pre>
arangosh&gt; col = db.example;
arangosh&gt; col.save({ <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span> });
arangosh&gt; col.count();
arangosh&gt; col.truncate();
arangosh&gt; col.count();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionEdgesAll

`collection.edges(vertex-id)`
<br />
Returns all edges connected to the vertex specified by *vertex-id*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionEdgesInbound

`collection.inEdges(vertex-id)`
<br />
Returns inbound edges connected to the vertex specified by *vertex-id*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionEdgesOutbound

`collection.outEdges(vertex-id)`
<br />
Returns outbound edges connected to the vertex specified by *vertex-id*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock documentsCollectionAny

`collection.any()`
<br />
Returns a random document from the collection or *null* if none exists.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock documentsCollectionFirst

`collection.first(count)`
<br />
The *first* method returns the n first documents from the collection, in
order of document insertion/update time.
<br />
If called with the *count* argument, the result is a list of up to
*count* documents. If *count* is bigger than the number of documents
in the collection, then the result will contain as many documents as there
are in the collection.
The result list is ordered, with the "oldest" documents being positioned at
the beginning of the result list.
<br />
When called without an argument, the result is the first document from the
collection. If the collection does not contain any documents, the result
returned is *null*.
<br />
**Note**: this method is not supported in sharded collections with more than
one shard.
<br />
@EXAMPLES
<br />

<div id="documentsCollectionFirst_container">
<div id="documentsCollectionFirst_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.first(<span class="hljs-number">1</span>);
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1109608577"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1109608577"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1109608577"</span>, 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"world"</span> 
  } 
]
</pre>
</div>
<div id="documentsCollectionFirst_short" onclick="$('#documentsCollectionFirst_short').hide(); $('#documentsCollectionFirst_long').show();">
<pre>
arangosh&gt; db.example.first(<span class="hljs-number">1</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />

<div id="documentsCollectionFirstNull_container">
<div id="documentsCollectionFirstNull_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.first();
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1110526081"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1110526081"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1110526081"</span>, 
  <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"world"</span> 
}
</pre>
</div>
<div id="documentsCollectionFirstNull_short" onclick="$('#documentsCollectionFirstNull_short').hide(); $('#documentsCollectionFirstNull_long').show();">
<pre>
arangosh&gt; db.example.first();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock documentsCollectionLast

`collection.last(count)`
<br />
The *last* method returns the n last documents from the collection, in
order of document insertion/update time.
<br />
If called with the *count* argument, the result is a list of up to
*count* documents. If *count* is bigger than the number of documents
in the collection, then the result will contain as many documents as there
are in the collection.
The result list is ordered, with the "latest" documents being positioned at
the beginning of the result list.
<br />
When called without an argument, the result is the last document from the
collection. If the collection does not contain any documents, the result
returned is *null*.
<br />
**Note**: this method is not supported in sharded collections with more than
one shard.
<br />
@EXAMPLES
<br />

<div id="documentsCollectionLast_container">
<div id="documentsCollectionLast_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.last(<span class="hljs-number">2</span>);
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1112164481"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1112164481"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1112164481"</span>, 
    <span class="hljs-string">"Foo"</span> : <span class="hljs-string">"bar"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1111836801"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1111836801"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1111836801"</span>, 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"world"</span> 
  } 
]
</pre>
</div>
<div id="documentsCollectionLast_short" onclick="$('#documentsCollectionLast_short').hide(); $('#documentsCollectionLast_long').show();">
<pre>
arangosh&gt; db.example.last(<span class="hljs-number">2</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />

<div id="documentsCollectionLastNull_container">
<div id="documentsCollectionLastNull_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.last(<span class="hljs-number">1</span>);
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1112754305"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1112754305"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1112754305"</span>, 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"world"</span> 
  } 
]
</pre>
</div>
<div id="documentsCollectionLastNull_short" onclick="$('#documentsCollectionLastNull_short').hide(); $('#documentsCollectionLastNull_long').show();">
<pre>
arangosh&gt; db.example.last(<span class="hljs-number">1</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionFirstExample

`collection.firstExample(example)`
<br />
Returns the first document of a collection that matches the specified
example. If no such document exists, *null* will be returned. 
The example has to be specified as paths and values.
See *byExample* for details.
<br />
`collection.firstExample(path1, value1, ...)`
<br />
As alternative you can supply an array of paths and values.
<br />
@EXAMPLES
<br />

<div id="collectionFirstExample_container">
<div id="collectionFirstExample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.users.firstExample(<span class="hljs-string">"name"</span>, <span class="hljs-string">"Angela"</span>);
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"users/1089292417"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1089292417"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1089292417"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angela"</span> 
}
</pre>
</div>
<div id="collectionFirstExample_short" onclick="$('#collectionFirstExample_short').hide(); $('#collectionFirstExample_long').show();">
<pre>
arangosh&gt; db.users.firstExample(<span class="hljs-string">"name"</span>, <span class="hljs-string">"Angela"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionEnsureCapConstraint

`collection.ensureIndex({ type: "cap", size: size, byteSize: byteSize })`
<br />
Creates a size restriction aka cap for the collection of `size`
documents and/or `byteSize` data size. If the restriction is in place
and the (`size` plus one) document is added to the collection, or the
total active data size in the collection exceeds `byteSize`, then the
least recently created or updated documents are removed until all
constraints are satisfied.
<br />
It is allowed to specify either `size` or `byteSize`, or both at
the same time. If both are specified, then the automatic document removal
will be triggered by the first non-met constraint.
<br />
Note that at most one cap constraint is allowed per collection. Trying
to create additional cap constraints will result in an error. Creating
cap constraints is also not supported in sharded collections with more
than one shard.
<br />
Note that this does not imply any restriction of the number of revisions
of documents.
<br />
@EXAMPLES
<br />
Restrict the number of document to at most 10 documents:
<br />

<div id="collectionEnsureCapConstraint_container">
<div id="collectionEnsureCapConstraint_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.examples.ensureIndex({ type: <span class="hljs-string">"cap"</span>, size: <span class="hljs-number">10</span> });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"examples/1081755777"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"cap"</span>, 
  <span class="hljs-string">"size"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"byteSize"</span> : <span class="hljs-number">0</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;  i &lt; <span class="hljs-number">20</span>;  ++i) { <span class="hljs-keyword">var</span> d = db.examples.save( { n : i } ); }
arangosh&gt; db.examples.count();
<span class="hljs-number">10</span>
</pre>
</div>
<div id="collectionEnsureCapConstraint_short" onclick="$('#collectionEnsureCapConstraint_short').hide(); $('#collectionEnsureCapConstraint_long').show();">
<pre>
arangosh&gt; db.examples.ensureIndex({ type: <span class="hljs-string">"cap"</span>, size: <span class="hljs-number">10</span> });
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;  i &lt; <span class="hljs-number">20</span>;  ++i) { <span class="hljs-keyword">var</span> d = db.examples.save( { n : i } ); }
arangosh&gt; db.examples.count();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock ensureUniqueSkiplist

`collection.ensureIndex({ type: "skiplist", fields: [ "field1", ..., "fieldn" ], unique: true })`
<br />
Creates a unique skiplist index on all documents using *field1*, ... *fieldn*
as attribute paths. At least one attribute path has to be given. The index will
be non-sparse by default.
<br />
All documents in the collection must differ in terms of the indexed 
attributes. Creating a new document or updating an existing document will
will fail if the attribute uniqueness is violated. 
<br />
To create a sparse unique index, set the *sparse* attribute to `true`:
<br />
`collection.ensureIndex({ type: "skiplist", fields: [ "field1", ..., "fieldn" ], unique: true, sparse: true })`
<br />
In a sparse index all documents will be excluded from the index that do not 
contain at least one of the specified index attributes or that have a value 
of `null` in any of the specified index attributes. Such documents will
not be indexed, and not be taken into account for uniqueness checks.
<br />
In a non-sparse index, these documents will be indexed (for non-present
indexed attributes, a value of `null` will be used) and will be taken into
account for uniqueness checks.
<br />
In case that the index was successfully created, an object with the index
details, including the index-identifier, is returned.
<br />

<div id="ensureUniqueSkiplist_container">
<div id="ensureUniqueSkiplist_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.ids.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"myId"</span> ], unique: <span class="hljs-literal">true</span> });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"ids/1138378881"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"myId"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">123</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"ids/1138641025"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1138641025"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1138641025"</span> 
}
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">456</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"ids/1138837633"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1138837633"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1138837633"</span> 
}
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">789</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"ids/1139034241"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1139034241"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1139034241"</span> 
}
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">123</span> });
[ArangoError <span class="hljs-number">1210</span>: cannot create <span class="hljs-built_in">document</span>, unique constraint violated]
</pre>
</div>
<div id="ensureUniqueSkiplist_short" onclick="$('#ensureUniqueSkiplist_short').hide(); $('#ensureUniqueSkiplist_long').show();">
<pre>
arangosh&gt; db.ids.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"myId"</span> ], unique: <span class="hljs-literal">true</span> });
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">123</span> });
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">456</span> });
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">789</span> });
arangosh&gt; db.ids.save({ <span class="hljs-string">"myId"</span>: <span class="hljs-number">123</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>


<div id="ensureUniqueSkiplistMultiColmun_container">
<div id="ensureUniqueSkiplistMultiColmun_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.ids.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"name.first"</span>, <span class="hljs-string">"name.last"</span> ], unique: <span class="hljs-literal">true</span> });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"ids/1139755137"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"name.first"</span>, 
    <span class="hljs-string">"name.last"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.ids.save({ <span class="hljs-string">"name"</span> : { <span class="hljs-string">"first"</span> : <span class="hljs-string">"hans"</span>, <span class="hljs-string">"last"</span>: <span class="hljs-string">"hansen"</span> }});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"ids/1140082817"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1140082817"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1140082817"</span> 
}
arangosh&gt; db.ids.save({ <span class="hljs-string">"name"</span> : { <span class="hljs-string">"first"</span> : <span class="hljs-string">"jens"</span>, <span class="hljs-string">"last"</span>: <span class="hljs-string">"jensen"</span> }});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"ids/1140279425"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1140279425"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1140279425"</span> 
}
arangosh&gt; db.ids.save({ <span class="hljs-string">"name"</span> : { <span class="hljs-string">"first"</span> : <span class="hljs-string">"hans"</span>, <span class="hljs-string">"last"</span>: <span class="hljs-string">"jensen"</span> }});
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"ids/1140476033"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1140476033"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1140476033"</span> 
}
[ArangoError <span class="hljs-number">1210</span>: cannot create <span class="hljs-built_in">document</span>, unique constraint violated]
</pre>
</div>
<div id="ensureUniqueSkiplistMultiColmun_short" onclick="$('#ensureUniqueSkiplistMultiColmun_short').hide(); $('#ensureUniqueSkiplistMultiColmun_long').show();">
<pre>
arangosh&gt; db.ids.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"name.first"</span>, <span class="hljs-string">"name.last"</span> ], unique: <span class="hljs-literal">true</span> });
arangosh&gt; db.ids.save({ <span class="hljs-string">"name"</span> : { <span class="hljs-string">"first"</span> : <span class="hljs-string">"hans"</span>, <span class="hljs-string">"last"</span>: <span class="hljs-string">"hansen"</span> }});
arangosh&gt; db.ids.save({ <span class="hljs-string">"name"</span> : { <span class="hljs-string">"first"</span> : <span class="hljs-string">"jens"</span>, <span class="hljs-string">"last"</span>: <span class="hljs-string">"jensen"</span> }});
arangosh&gt; db.ids.save({ <span class="hljs-string">"name"</span> : { <span class="hljs-string">"first"</span> : <span class="hljs-string">"hans"</span>, <span class="hljs-string">"last"</span>: <span class="hljs-string">"jensen"</span> }});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock ensureSkiplist

`collection.ensureIndex({ type: "skiplist", fields: [ "field1", ..., "fieldn" ] })`
<br />
Creates a non-unique skiplist index on all documents using *field1*, ...
*fieldn* as attribute paths. At least one attribute path has to be given.
The index will be non-sparse by default.
<br />
To create a sparse unique index, set the *sparse* attribute to `true`.
<br />
In case that the index was successfully created, an object with the index
details, including the index-identifier, is returned.
<br />

<div id="ensureSkiplist_container">
<div id="ensureSkiplist_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.names.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"first"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"names/1135298689"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"first"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tim"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"names/1135560833"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1135560833"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1135560833"</span> 
}
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tom"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"names/1135757441"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1135757441"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1135757441"</span> 
}
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"John"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"names/1135954049"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1135954049"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1135954049"</span> 
}
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tim"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"names/1136150657"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1136150657"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1136150657"</span> 
}
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tom"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"names/1136347265"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1136347265"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1136347265"</span> 
}
</pre>
</div>
<div id="ensureSkiplist_short" onclick="$('#ensureSkiplist_short').hide(); $('#ensureSkiplist_long').show();">
<pre>
arangosh&gt; db.names.ensureIndex({ type: <span class="hljs-string">"skiplist"</span>, fields: [ <span class="hljs-string">"first"</span> ] });
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tim"</span> });
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tom"</span> });
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"John"</span> });
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tim"</span> });
arangosh&gt; db.names.save({ <span class="hljs-string">"first"</span> : <span class="hljs-string">"Tom"</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock ensureFulltextIndex

`collection.ensureIndex({ type: "fulltext", fields: [ "field" ], minLength: minLength })`
<br />
Creates a fulltext index on all documents on attribute *field*.
<br />
Fulltext indexes are implicitly sparse: all documents which do not have 
the specified *field* attribute or that have a non-qualifying value in their 
*field* attribute will be ignored for indexing.
<br />
Only a single attribute can be indexed. Specifying multiple attributes is 
unsupported.
<br />
The minimum length of words that are indexed can be specified via the
*minLength* parameter. Words shorter than minLength characters will 
not be indexed. *minLength* has a default value of 2, but this value might
be changed in future versions of ArangoDB. It is thus recommended to explicitly
specify this value.
<br />
In case that the index was successfully created, an object with the index
details is returned.
<br />

<div id="ensureFulltextIndex_container">
<div id="ensureFulltextIndex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"fulltext"</span>, fields: [ <span class="hljs-string">"text"</span> ], minLength: <span class="hljs-number">3</span> });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"example/1131890817"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"fulltext"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"text"</span> 
  ], 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"minLength"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.example.save({ text : <span class="hljs-string">"the quick brown"</span>, b : { c : <span class="hljs-number">1</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1132415105"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1132415105"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1132415105"</span> 
}
arangosh&gt; db.example.save({ text : <span class="hljs-string">"quick brown fox"</span>, b : { c : <span class="hljs-number">2</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1132611713"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1132611713"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1132611713"</span> 
}
arangosh&gt; db.example.save({ text : <span class="hljs-string">"brown fox jums"</span>, b : { c : <span class="hljs-number">3</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1132808321"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1132808321"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1132808321"</span> 
}
arangosh&gt; db.example.save({ text : <span class="hljs-string">"fox jumps over"</span>, b : { c : <span class="hljs-number">4</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1133004929"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1133004929"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1133004929"</span> 
}
arangosh&gt; db.example.save({ text : <span class="hljs-string">"jumps over the"</span>, b : { c : <span class="hljs-number">5</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1133201537"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1133201537"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1133201537"</span> 
}
arangosh&gt; db.example.save({ text : <span class="hljs-string">"over the lazy"</span>, b : { c : <span class="hljs-number">6</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1133398145"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1133398145"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1133398145"</span> 
}
arangosh&gt; db.example.save({ text : <span class="hljs-string">"the lazy dog"</span>, b : { c : <span class="hljs-number">7</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1133594753"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1133594753"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1133594753"</span> 
}
arangosh&gt; db._query(<span class="hljs-string">"FOR document IN FULLTEXT(example, 'text', 'the') RETURN document"</span>);
[ 
  { 
    <span class="hljs-string">"b"</span> : { 
      <span class="hljs-string">"c"</span> : <span class="hljs-number">1</span> 
    }, 
    <span class="hljs-string">"text"</span> : <span class="hljs-string">"the quick brown"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1132415105"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1132415105"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1132415105"</span> 
  }, 
  { 
    <span class="hljs-string">"b"</span> : { 
      <span class="hljs-string">"c"</span> : <span class="hljs-number">5</span> 
    }, 
    <span class="hljs-string">"text"</span> : <span class="hljs-string">"jumps over the"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1133201537"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1133201537"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1133201537"</span> 
  }, 
  { 
    <span class="hljs-string">"b"</span> : { 
      <span class="hljs-string">"c"</span> : <span class="hljs-number">6</span> 
    }, 
    <span class="hljs-string">"text"</span> : <span class="hljs-string">"over the lazy"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1133398145"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1133398145"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1133398145"</span> 
  }, 
  { 
    <span class="hljs-string">"b"</span> : { 
      <span class="hljs-string">"c"</span> : <span class="hljs-number">7</span> 
    }, 
    <span class="hljs-string">"text"</span> : <span class="hljs-string">"the lazy dog"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/1133594753"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1133594753"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1133594753"</span> 
  } 
]
[object ArangoQueryCursor, count: <span class="hljs-number">4</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="ensureFulltextIndex_short" onclick="$('#ensureFulltextIndex_short').hide(); $('#ensureFulltextIndex_long').show();">
<pre>
arangosh&gt; db.example.ensureIndex({ type: <span class="hljs-string">"fulltext"</span>, fields: [ <span class="hljs-string">"text"</span> ], minLength: <span class="hljs-number">3</span> });
arangosh&gt; db.example.save({ text : <span class="hljs-string">"the quick brown"</span>, b : { c : <span class="hljs-number">1</span> } });
arangosh&gt; db.example.save({ text : <span class="hljs-string">"quick brown fox"</span>, b : { c : <span class="hljs-number">2</span> } });
arangosh&gt; db.example.save({ text : <span class="hljs-string">"brown fox jums"</span>, b : { c : <span class="hljs-number">3</span> } });
arangosh&gt; db.example.save({ text : <span class="hljs-string">"fox jumps over"</span>, b : { c : <span class="hljs-number">4</span> } });
arangosh&gt; db.example.save({ text : <span class="hljs-string">"jumps over the"</span>, b : { c : <span class="hljs-number">5</span> } });
arangosh&gt; db.example.save({ text : <span class="hljs-string">"over the lazy"</span>, b : { c : <span class="hljs-number">6</span> } });
arangosh&gt; db.example.save({ text : <span class="hljs-string">"the lazy dog"</span>, b : { c : <span class="hljs-number">7</span> } });
arangosh&gt; db._query(<span class="hljs-string">"FOR document IN FULLTEXT(example, 'text', 'the') RETURN document"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock ensureUniqueConstraint

`collection.ensureIndex({ type: "hash", fields: [ "field1", ..., "fieldn" ], unique: true })`
<br />
Creates a unique hash index on all documents using *field1*, ... *fieldn*
as attribute paths. At least one attribute path has to be given.
The index will be non-sparse by default.
<br />
All documents in the collection must differ in terms of the indexed 
attributes. Creating a new document or updating an existing document will
will fail if the attribute uniqueness is violated. 
<br />
To create a sparse unique index, set the *sparse* attribute to `true`:
<br />
`collection.ensureIndex({ type: "hash", fields: [ "field1", ..., "fieldn" ], unique: true, sparse: true })`
<br />
In case that the index was successfully created, the index identifier is returned.
<br />
Non-existing attributes will default to `null`.
In a sparse index all documents will be excluded from the index for which all
specified index attributes are `null`. Such documents will not be taken into account
for uniqueness checks.
<br />
In a non-sparse index, **all** documents regardless of `null` - attributes will be
indexed and will be taken into account for uniqueness checks.
<br />
In case that the index was successfully created, an object with the index
details, including the index-identifier, is returned.
<br />

<div id="ensureUniqueConstraint_container">
<div id="ensureUniqueConstraint_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b.c"</span> ], unique: <span class="hljs-literal">true</span> });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/1136937089"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span>, 
    <span class="hljs-string">"b.c"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span>, b : { c : <span class="hljs-number">1</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/1137264769"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1137264769"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1137264769"</span> 
}
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span>, b : { c : <span class="hljs-number">1</span> } });
[ArangoError <span class="hljs-number">1210</span>: cannot create <span class="hljs-built_in">document</span>, unique constraint violated]
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span>, b : { c : <span class="hljs-literal">null</span> } });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/1137723521"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1137723521"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1137723521"</span> 
}
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span> });
[ArangoError <span class="hljs-number">1210</span>: cannot create <span class="hljs-built_in">document</span>, unique constraint violated]
</pre>
</div>
<div id="ensureUniqueConstraint_short" onclick="$('#ensureUniqueConstraint_short').hide(); $('#ensureUniqueConstraint_long').show();">
<pre>
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span>, <span class="hljs-string">"b.c"</span> ], unique: <span class="hljs-literal">true</span> });
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span>, b : { c : <span class="hljs-number">1</span> } });
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span>, b : { c : <span class="hljs-number">1</span> } });
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span>, b : { c : <span class="hljs-literal">null</span> } });
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock ensureHashIndex

`collection.ensureIndex({ type: "hash", fields: [ "field1", ..., "fieldn" ] })`
<br />
Creates a non-unique hash index on all documents using  *field1*, ... *fieldn*
as attribute paths. At least one attribute path has to be given.
The index will be non-sparse by default.
<br />
To create a sparse unique index, set the *sparse* attribute to `true`:
<br />
`collection.ensureIndex({ type: "hash", fields: [ "field1", ..., "fieldn" ], sparse: true })`
<br />
In case that the index was successfully created, an object with the index
details, including the index-identifier, is returned.
<br />

<div id="ensureHashIndex_container">
<div id="ensureHashIndex_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"test/1134119041"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"a"</span> 
  ], 
  <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/1134381185"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1134381185"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1134381185"</span> 
}
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/1134577793"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1134577793"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1134577793"</span> 
}
arangosh&gt; db.test.save({ a : <span class="hljs-literal">null</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"test/1134839937"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1134839937"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1134839937"</span> 
}
</pre>
</div>
<div id="ensureHashIndex_short" onclick="$('#ensureHashIndex_short').hide(); $('#ensureHashIndex_long').show();">
<pre>
arangosh&gt; db.test.ensureIndex({ type: <span class="hljs-string">"hash"</span>, fields: [ <span class="hljs-string">"a"</span> ] });
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span> });
arangosh&gt; db.test.save({ a : <span class="hljs-number">1</span> });
arangosh&gt; db.test.save({ a : <span class="hljs-literal">null</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionEnsureGeoIndex

`collection.ensureIndex({ type: "geo", fields: [ "location" ] })`
<br />
Creates a geo-spatial index on all documents using *location* as path to
the coordinates. The value of the attribute has to be an array with at least two
numeric values. The array must contain the latitude (first value) and the
longitude (second value).
<br />
All documents, which do not have the attribute path or have a non-conforming
value in it are excluded from the index.
<br />
A geo index is implicitly sparse, and there is no way to control its sparsity.
<br />
In case that the index was successfully created, an object with the index
details, including the index-identifier, is returned.
<br />
To create a geo on an array attribute that contains longitude first, set the
*geoJson* attribute to `true`. This corresponds to the format described in
[positions](http://geojson.org/geojson-spec.html)
<br />
`collection.ensureIndex({ type: "geo", fields: [ "location" ], geoJson: true })`
<br />
To create a geo-spatial index on all documents using *latitude* and
*longitude* as separate attribute paths, two paths need to be specified
in the *fields* array:
<br />
`collection.ensureIndex({ type: "geo", fields: [ "latitude", "longitude" ] })`
<br />
In case that the index was successfully created, an object with the index
details, including the index-identifier, is returned.
<br />
@EXAMPLES
<br />
Create a geo index for an array attribute:
<br />

<div id="geoIndexCreateForArrayAttribute_container">
<div id="geoIndexCreateForArrayAttribute_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.geo.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"loc"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"geo/1901414529"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo1"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"loc"</span> 
  ], 
  <span class="hljs-string">"geoJson"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;     <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;         db.geo.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j, loc: [ i, j ] });
........&gt;     }
........&gt; }	
arangosh&gt; db.geo.count();
<span class="hljs-number">703</span>
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).limit(<span class="hljs-number">3</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/1970817153"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1970817153"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1970817153"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">0</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/1971013761"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1971013761"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1971013761"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/10"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">0</span>, 
      <span class="hljs-number">10</span> 
    ] 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo/1963542657"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1963542657"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1963542657"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/0"</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      -<span class="hljs-number">10</span>, 
      <span class="hljs-number">0</span> 
    ] 
  } 
]
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).count();
<span class="hljs-literal">null</span>
</pre>
</div>
<div id="geoIndexCreateForArrayAttribute_short" onclick="$('#geoIndexCreateForArrayAttribute_short').hide(); $('#geoIndexCreateForArrayAttribute_long').show();">
<pre>
arangosh&gt; db.geo.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"loc"</span> ] });
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;     <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;         db.geo.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j, loc: [ i, j ] });
........&gt;     }
........&gt; }	
arangosh&gt; db.geo.count();
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).limit(<span class="hljs-number">3</span>).toArray();
arangosh&gt; db.geo.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).count();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Create a geo index for a hash array attribute:
<br />

<div id="geoIndexCreateForArrayAttribute2_container">
<div id="geoIndexCreateForArrayAttribute2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.geo2.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"location.latitude"</span>, <span class="hljs-string">"location.longitude"</span> ] });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"geo2/2041006209"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"geo2"</span>, 
  <span class="hljs-string">"fields"</span> : [ 
    <span class="hljs-string">"location.latitude"</span>, 
    <span class="hljs-string">"location.longitude"</span> 
  ], 
  <span class="hljs-string">"constraint"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"ignoreNull"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"isNewlyCreated"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;     <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;         db.geo2.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j, location: { latitude : i, longitude : j } });
........&gt;     }
........&gt; }	
arangosh&gt; db.geo2.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).limit(<span class="hljs-number">3</span>).toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo2/2110408833"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2110408833"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2110408833"</span>, 
    <span class="hljs-string">"location"</span> : { 
      <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/0"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo2/2110605441"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2110605441"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2110605441"</span>, 
    <span class="hljs-string">"location"</span> : { 
      <span class="hljs-string">"latitude"</span> : <span class="hljs-number">0</span>, 
      <span class="hljs-string">"longitude"</span> : <span class="hljs-number">10</span> 
    }, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/0/10"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"geo2/2103134337"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2103134337"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2103134337"</span>, 
    <span class="hljs-string">"location"</span> : { 
      <span class="hljs-string">"latitude"</span> : -<span class="hljs-number">10</span>, 
      <span class="hljs-string">"longitude"</span> : <span class="hljs-number">0</span> 
    }, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Name/-10/0"</span> 
  } 
]
</pre>
</div>
<div id="geoIndexCreateForArrayAttribute2_short" onclick="$('#geoIndexCreateForArrayAttribute2_short').hide(); $('#geoIndexCreateForArrayAttribute2_long').show();">
<pre>
arangosh&gt; db.geo2.ensureIndex({ type: <span class="hljs-string">"geo"</span>, fields: [ <span class="hljs-string">"location.latitude"</span>, <span class="hljs-string">"location.longitude"</span> ] });
arangosh&gt; <span class="hljs-keyword">for</span> (i = -<span class="hljs-number">90</span>;  i &lt;= <span class="hljs-number">90</span>;  i += <span class="hljs-number">10</span>) {
........&gt;     <span class="hljs-keyword">for</span> (j = -<span class="hljs-number">180</span>; j &lt;= <span class="hljs-number">180</span>; j += <span class="hljs-number">10</span>) {
........&gt;         db.geo2.save({ name : <span class="hljs-string">"Name/"</span> + i + <span class="hljs-string">"/"</span> + j, location: { latitude : i, longitude : j } });
........&gt;     }
........&gt; }	
arangosh&gt; db.geo2.near(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).limit(<span class="hljs-number">3</span>).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock collectionEnsureGeoConstraint

`collection.ensureIndex({ type: "geo", fields: [ "location" ] })`
<br />
Since ArangoDB 2.5, this method is an alias for *ensureGeoIndex* since 
geo indexes are always sparse, meaning that documents that do not contain
the index attributes or have non-numeric values in the index attributes
will not be indexed.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/arango-collection.js -->
@startDocuBlock lookUpFulltextIndex

`collection.lookupFulltextIndex(attribute, minLength)`
<br />
Checks whether a fulltext index on the given attribute *attribute* exists.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/kickstarter.js -->
@startDocuBlock JSF_Cluster_Kickstarter_Constructor

<br />
`new require("org/arangodb/cluster").Kickstarter(plan)`
<br />
This constructor constructs a kickstarter object. Its first
argument is a cluster plan as for example provided by the planner
(see Cluster Planner Constructor and the general
explanations before this reference). The second argument is
optional and is taken to be "me" if omitted, it is the ID of the
dispatcher this object should consider itself to be. If the plan
contains startup commands for the dispatcher with this ID, these
commands are executed immediately. Otherwise they are handed over
to another responsible dispatcher via a REST call.
<br />
The resulting object of this constructors allows to launch,
shutdown, relaunch the cluster described in the plan.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/kickstarter.js -->
@startDocuBlock JSF_Kickstarter_prototype_launch

<br />
`Kickstarter.launch()`
<br />
This starts up a cluster as described in the plan which was given to
the constructor. To this end, other dispatchers are contacted as
necessary. All startup commands for the local dispatcher are
executed immediately.
<br />
The result is an object that contains information about the started
processes, this object is also stored in the Kickstarter object
itself. We do not go into details here about the data structure,
but the most important information are the process IDs of the
started processes. The corresponding
[see shutdown method](../ModulePlanner/README.md#shutdown) needs this 
information to shut down all processes.
<br />
Note that all data in the DBservers and all log files and all agency
information in the cluster is deleted by this call. This is because
it is intended to set up a cluster for the first time. See
the [relaunch method](../ModulePlanner/README.md#relaunch)
for restarting a cluster without data loss.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/kickstarter.js -->
@startDocuBlock JSF_Kickstarter_prototype_relaunch

<br />
`Kickstarter.relaunch()`
<br />
This starts up a cluster as described in the plan which was given to
the constructor. To this end, other dispatchers are contacted as
necessary. All startup commands for the local dispatcher are
executed immediately.
<br />
The result is an object that contains information about the started
processes, this object is also stored in the Kickstarter object
itself. We do not go into details here about the data structure,
but the most important information are the process IDs of the
started processes. The corresponding
[shutdown method ](../ModulePlanner/README.md#shutdown) needs this information to
shut down all processes.
<br />
Note that this methods needs that all data in the DBservers and the
agency information in the cluster are already set up properly. See
the [launch method](../ModulePlanner/README.md#launch) for
starting a cluster for the first time.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/kickstarter.js -->
@startDocuBlock JSF_Kickstarter_prototype_shutdown

<br />
`Kickstarter.shutdown()`
<br />
This shuts down a cluster as described in the plan which was given to
the constructor. To this end, other dispatchers are contacted as
necessary. All processes in the cluster are gracefully shut down
in the right order.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/kickstarter.js -->
@startDocuBlock JSF_Kickstarter_prototype_cleanup

<br />
`Kickstarter.cleanup()`
<br />
This cleans up all the data and logs of a previously shut down cluster.
To this end, other dispatchers are contacted as necessary.
[Use shutdown](../ModulePlanner/README.md#shutdown) first and
use with caution, since potentially a lot of data is being erased with
this call!
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/kickstarter.js -->
@startDocuBlock JSF_Kickstarter_prototype_isHealthy

<br />
`Kickstarter.isHealthy()`
<br />
This checks that all processes belonging to a running cluster are
healthy. To this end, other dispatchers are contacted as necessary.
At this stage it is only checked that the processes are still up and
running.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/kickstarter.js -->
@startDocuBlock JSF_Kickstarter_prototype_upgrade

<br />
`Kickstarter.upgrade(username, passwd)`
<br />
This performs an upgrade procedure on a cluster as described in
the plan which was given to the constructor. To this end, other
dispatchers are contacted as necessary. All commands for the local
dispatcher are executed immediately. The basic approach for the
upgrade is as follows: The agency is started first (exactly as
in relaunch), no configuration is sent there (exactly as in the
relaunch action), all servers are first started with the option
"--upgrade" and then normally. In the end, the upgrade-database.js
script is run on one of the coordinators, as in the launch action.
<br />
The result is an object that contains information about the started
processes, this object is also stored in the Kickstarter object
itself. We do not go into details here about the data structure,
but the most important information are the process IDs of the
started processes. The corresponding
[shutdown method](../ModulePlanner/README.md#shutdown) needs
this information to shut down all processes.
<br />
Note that this methods needs that all data in the DBservers and the
agency information in the cluster are already set up properly. See
the [launch method](../ModulePlanner/README.md#launch) for
starting a cluster for the first time.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/planner.js -->
@startDocuBlock JSF_Cluster_Planner_Constructor

<br />
*new require("org/arangodb/cluster").Planner(userConfig)*
<br />
This constructor builds a cluster planner object. The one and only
argument is an object that can have the properties described below.
The planner can plan clusters on a single machine (basically for
testing purposes) and on multiple machines. The resulting "cluster plans"
can be used by the kickstarter to start up the processes comprising
the cluster, including the agency. To this end, there has to be one
dispatcher on every machine participating in the cluster. A dispatcher
is a simple instance of ArangoDB, compiled with the cluster extensions,
but not running in cluster mode. This is why the configuration option
*dispatchers* below is of central importance.
<br />
  - *dispatchers*: an object with a property for each dispatcher,
    the property name is the ID of the dispatcher and the value
    should be an object with at least the property *endpoint*
    containing the endpoint of the corresponding dispatcher.
    Further optional properties are:
<br />
  - *avoidPorts* which is an object
        in which all port numbers that should not be used are bound to
  *true*, default is empty, that is, all ports can be used
  - *arangodExtraArgs*, which is a list of additional
        command line arguments that will be given to DBservers and
        coordinators started by this dispatcher, the default is
        an empty list. These arguments will be appended to those
        produced automatically, such that one can overwrite
        things with this.
  - *allowCoordinators*, which is a boolean value indicating
        whether or not coordinators should be started on this
        dispatcher, the default is *true*
  - *allowDBservers*, which is a boolean value indicating
        whether or not DBservers should be started on this dispatcher,
        the default is *true*
  - *allowAgents*, which is a boolean value indicating whether or
        not agents should be started on this dispatcher, the default is
  *true*
  - *username*, which is a string that contains the user name
        for authentication with this dispatcher
  - *passwd*, which is a string that contains the password
        for authentication with this dispatcher, if not both
  *username* and *passwd* are set, then no authentication
        is used between dispatchers. Note that this will not work
        if the dispatchers are configured with authentication.
<br />
    If *.dispatchers* is empty (no property), then an entry for the
    local arangod itself is automatically added. Note that if the
    only configured dispatcher has endpoint *tcp://localhost:*,
    all processes are started in a special "local" mode and are
    configured to bind their endpoints only to the localhost device.
    In all other cases both agents and *arangod* instances bind
    their endpoints to all available network devices.
  - *numberOfAgents*: the number of agents in the agency,
    usually there is no reason to deviate from the default of 3. The
    planner distributes them amongst the dispatchers, if possible.
  - *agencyPrefix*: a string that is used as prefix for all keys of
    configuration data stored in the agency.
  - *numberOfDBservers*: the number of DBservers in the
    cluster. The planner distributes them evenly amongst the dispatchers.
  - *startSecondaries*: a boolean flag indicating whether or not
    secondary servers are started. In this version, this flag is
    silently ignored, since we do not yet have secondary servers.
  - *numberOfCoordinators*: the number of coordinators in the cluster,
    the planner distributes them evenly amongst the dispatchers.
  - *DBserverIDs*: a list of DBserver IDs (strings). If the planner
    runs out of IDs it creates its own ones using *DBserver*
    concatenated with a unique number.
  - *coordinatorIDs*: a list of coordinator IDs (strings). If the planner
    runs out of IDs it creates its own ones using *Coordinator*
    concatenated with a unique number.
  - *dataPath*: this is a string and describes the path under which
    the agents, the DBservers and the coordinators store their
    data directories. This can either be an absolute path (in which
    case all machines in the clusters must use the same path), or
    it can be a relative path. In the latter case it is relative
    to the directory that is configured in the dispatcher with the
  *cluster.data-path* option (command line or configuration file).
    The directories created will be called *data-PREFIX-ID* where
  *PREFIX* is replaced with the agency prefix (see above) and *ID*
    is the ID of the DBserver or coordinator.
  - *logPath*: this is a string and describes the path under which
    the DBservers and the coordinators store their log file. This can
    either be an absolute path (in which case all machines in the cluster
    must use the same path), or it can be a relative path. In the
    latter case it is relative to the directory that is configured
    in the dispatcher with the *cluster.log-path* option.
  - *arangodPath*: this is a string and describes the path to the
    actual executable *arangod* that will be started for the
    DBservers and coordinators. If this is an absolute path, it
    obviously has to be the same on all machines in the cluster
    as described for *dataPath*. If it is an empty string, the
    dispatcher uses the executable that is configured with the
  *cluster.arangod-path* option, which is by default the same
    executable as the dispatcher uses.
  - *agentPath*: this is a string and describes the path to the
    actual executable that will be started for the agents in the
    agency. If this is an absolute path, it obviously has to be
    the same on all machines in the cluster, as described for
  *arangodPath*. If it is an empty string, the dispatcher
    uses its *cluster.agent-path* option.
  - *agentExtPorts*: a list of port numbers to use for the external
    ports of the agents. When running out of numbers in this list,
    the planner increments the last one used by one for every port
    needed. Note that the planner checks availability of the ports
    during the planning phase by contacting the dispatchers on the
    different machines, and uses only ports that are free during
    the planning phase. Obviously, if those ports are connected
    before the actual startup, things can go wrong.
  - *agentIntPorts*: a list of port numbers to use for the internal
    ports of the agents. The same comments as for *agentExtPorts*
    apply.
  - *DBserverPorts*: a list of port numbers to use for the
    DBservers. The same comments as for *agentExtPorts* apply.
  - *coordinatorPorts*: a list of port numbers to use for the
    coordinators. The same comments as for *agentExtPorts* apply.
  - *useSSLonDBservers*: a boolean flag indicating whether or not
    we use SSL on all DBservers in the cluster
  - *useSSLonCoordinators*: a boolean flag indicating whether or not
    we use SSL on all coordinators in the cluster
  - *valgrind*: a string to contain the path of the valgrind binary
    if we should run the cluster components in it
  - *valgrindopts*: commandline options to the valgrind process
  - *valgrindXmlFileBase*: pattern for logfiles
  - *valgrindTestname*: name of test to add to the logfiles
  - *valgrindHosts*: which host classes should run in valgrind? 
       Coordinator / DBServer
<br />
All these values have default values. Here is the current set of
default values:
<br />
```js
{
  "agencyPrefix"            : "arango",
  "numberOfAgents"          : 1,
  "numberOfDBservers"       : 2,
  "startSecondaries"        : false,
  "numberOfCoordinators"    : 1,
  "DBserverIDs"             : ["Pavel", "Perry", "Pancho", "Paul", "Pierre",
                               "Pit", "Pia", "Pablo" ],
  "coordinatorIDs"          : ["Claus", "Chantalle", "Claire", "Claudia",
                               "Claas", "Clemens", "Chris" ],
  "dataPath"                : "",   // means configured in dispatcher
  "logPath"                 : "",   // means configured in dispatcher
  "arangodPath"             : "",   // means configured as dispatcher
  "agentPath"               : "",   // means configured in dispatcher
  "agentExtPorts"           : [4001],
  "agentIntPorts"           : [7001],
  "DBserverPorts"           : [8629],
  "coordinatorPorts"        : [8530],
  "dispatchers"             : {"me": {"endpoint": "tcp://localhost:"}},
                              // this means only we as a local instance
  "useSSLonDBservers"       : false,
  "useSSLonCoordinators"    : false
};
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/cluster/planner.js -->
@startDocuBlock JSF_Planner_prototype_getPlan

<br />
`Planner.getPlan()`
<br />
returns the cluster plan as a JavaScript object. The result of this
method can be given to the constructor of a Kickstarter.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_request_cookie

<br />
`request.cookie(name, cfg)`
<br />
Read a cookie from the request. Optionally the cookie's signature can be verified.
<br />
*Parameter*
<br />
* *name*: the name of the cookie to read from the request.
* *cfg* (optional): an object with any of the following properties:
  * *signed* (optional): an object with any of the following properties:
  * *secret*: a secret string that was used to sign the cookie.
  * *algorithm*: hashing algorithm that was used to sign the cookie. Default: *"sha256"*.
<br />
If *signed* is a string, it will be used as the *secret* instead.
<br />
If a *secret* is provided, a second cookie with the name *name + ".sig"* will
be read and its value will be verified as the cookie value's signature.
<br />
If the cookie is not set or its signature is invalid, "undefined" will be returned instead.
<br />
@EXAMPLES
<br />
```
var sid = request.cookie("sid", {signed: "keyboardcat"});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_request_body

<br />
`request.body()`
<br />
Get the JSON parsed body of the request. If you need the raw version, please
refer to the *rawBody* function.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_request_rawBody

<br />
`request.rawBody()`
<br />
The raw request body, not parsed. The body is returned as a UTF-8 string.
Note that this can only be used sensibly if the request body contains
valid UTF-8. If the request body is known to contain non-UTF-8 data, the
request body can be accessed by using `request.rawBodyBuffer`.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_request_rawBodyBuffer

<br />
`request.rawBodyBuffer()`
<br />
The raw request body, returned as a Buffer object.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_request_requestParts

<br />
`request.requestParts()`
<br />
Returns an array containing the individual parts of a multi-part request.
Each part contains a `headers` attribute with all headers of the part,
and a `data` attribute with the content of the part in a Buffer object.
If the request is not a multi-part request, this function will throw an
error.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_request_params

<br />
`request.params(key)`
<br />
Get the parameters of the request. This process is two-fold:
<br />
* If you have defined an URL like */test/:id* and the user requested
  */test/1*, the call *params("id")* will return *1*.
* If you have defined an URL like */test* and the user gives a query
  component, the query parameters will also be returned.  So for example if
  the user requested */test?a=2*, the call *params("a")* will return *2*.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_response_cookie

<br />
`response.cookie(name, value, cfg)`
<br />
Add a cookie to the response. Optionally the cookie can be signed.
<br />
*Parameter*
<br />
* *name*: the name of the cookie to add to the response.
* *value*: the value of the cookie to add to the response.
* *cfg* (optional): an object with any of the following properties:
  * *ttl* (optional): the number of seconds until this cookie expires.
  * *path* (optional): the cookie path.
  * *domain* (optional): the cookie domain.
  * *secure* (optional): mark the cookie as safe transport (HTTPS) only.
  * *httpOnly* (optional): mark the cookie as HTTP(S) only.
  * *signed* (optional): an object with any of the following properties:
  * *secret*: a secret string to sign the cookie with.
  * *algorithm*: hashing algorithm to sign the cookie with. Default: *"sha256"*.
<br />
If *signed* is a string, it will be used as the *secret* instead.
<br />
If a *secret* is provided, a second cookie with the name *name + ".sig"* will
be added to the response, containing the cookie's HMAC signature.
<br />
@EXAMPLES
<br />
```
response.cookie("sid", "abcdef", {signed: "keyboardcat"});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_response_status

<br />
`response.status(code)`
<br />
Set the status *code* of your response, for example:
<br />
@EXAMPLES
<br />
```
response.status(404);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_response_set

<br />
`response.set(key, value)`
<br />
Set a header attribute, for example:
<br />
@EXAMPLES
<br />
```js
response.set("Content-Length", 123);
response.set("Content-Type", "text/plain");
```
<br />
or alternatively:
<br />
```js
response.set({
  "Content-Length": "123",
  "Content-Type": "text/plain"
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_response_json

<br />
`response.json(object)`
<br />
Set the content type to JSON and the body to the JSON encoded *object*
you provided.
<br />
@EXAMPLES
<br />
```js
response.json({'born': 'December 12, 1915'});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_response_send

<br />
`response.send(value)`
<br />
Sets the response body to the specified *value*. If *value* is a Buffer
object, the content type will be set to `application/octet-stream` if not
yet set. If *value* is a string, the content type will be set to `text/html`
if not yet set. If *value* is an object, it will be treated as in `res.json`.
<br />
@EXAMPLES
<br />
```js
response.send({"born": "December 12, 1915"});
response.send(new Buffer("some binary data"));
response.send("<html><head><title>Hello World</title></head><body></body></html>");
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/base_middleware.js -->
@startDocuBlock JSF_foxx_BaseMiddleware_response_sendFile

<br />
`response.sendFile(filename, options)`
<br />
Sets the content of the specified file as the response body. The filename
must be absolute. If no content type is yet set for the response, the
response's content type will be determined automatically based
on the filename extension. If no content type is known for the extension,
the content type will default to `application/octet-stream`.
<br />
The `options` array can be used to control the behavior of sendFile.
Currently only the following option exists:
- `lastModified`: if set to true, the last modification date and time
  of the file will be returned in the `Last-Modified` HTTP header
<br />
@EXAMPLES
<br />
```js
response.sendFile('/tmp/results.json');
response.sendFile(applicationContext.fileName('image.png'), { lastModified: true });
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_pathParam

<br />
`Route.pathParam(id, options)`
<br />
If you defined a route "/foxx/:name", containing a parameter called `name` you can
constrain which format this parameter is allowed to have.
This format is defined using *joi* in the `options` parameter.
Using this function will at first allow you to access this parameter in your
route handler using `req.params(id)`, will reject any request having a paramter
that does not match the *joi* definition and creates a documentation for this
parameter in ArangoDBs WebInterface.
<br />
For more information on *joi* see [the official Joi documentation](https://github.com/spumko/joi).
<br />
*Parameter*
<br />
* *id*: name of the param.
* *options*: a joi schema or an object with the following properties:
  * *type*: a joi schema.
  * *description*: documentation description for the parameter.
  * *required* (optional): whether the parameter is required. Default: determined by *type*.
<br />
*Examples*
<br />
```js
app.get("/foxx/:name", function {
  // Do something
}).pathParam("name", joi.string().required().description("Name of the Foxx"));
```
<br />
You can also pass in a configuration object instead:
<br />
```js
app.get("/foxx/:name", function {
  // Do something
}).pathParam("name", {
  type: joi.string(),
  required: true,
  description: "Name of the Foxx"
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_queryParam

<br />
`Route.queryParam(id, options)`
<br />
Describe a query parameter:
<br />
If you defined a route "/foxx", you can allow a query paramter with the
name `id` on it and constrain the format of this parameter by giving it a *joi* type in the `options` parameter.
Using this function will at first allow you to access this parameter in your
route handler using `req.params(id)`, will reject any request having a paramter
that does not match the *joi* definition and creates a documentation for this
parameter in ArangoDBs WebInterface.
<br />
For more information on *joi* see [the official Joi documentation](https://github.com/spumko/joi).
<br />
You can also provide a description of this parameter and
whether you can provide the parameter multiple times.
<br />
*Parameter*
<br />
* *id*: name of the parameter
* *options*: a joi schema or an object with the following properties:
  * *type*: a joi schema
  * *description*: documentation description for this param.
  * *required* (optional): whether the param is required. Default: determined by *type*.
  * *allowMultiple* (optional): whether the param can be specified more than once. Default: `false`.
<br />
*Examples*
<br />
```js
app.get("/foxx", function {
  // Do something
}).queryParam("id",
  joi.string()
  .required()
  .description("Id of the Foxx")
  .meta({allowMultiple: false})
});
```
<br />
You can also pass in a configuration object instead:
<br />
```js
app.get("/foxx", function {
  // Do something
}).queryParam("id", {
  type: joi.string().required().description("Id of the Foxx"),
  allowMultiple: false
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_bodyParam

<br />
`Route.bodyParam(paramName, options)`
<br />
Defines that this route expects a JSON body when requested and binds it to
a pseudo parameter with the name `paramName`.
The body can than be read in the the handler using `req.params(paramName)` on the request object.
In the `options` parameter you can define how a valid request body should look like.
This definition can be done in two ways, either using *joi* directly.
Accessing the body in this case will give you a JSON object.
The other way is to use a Foxx *Model*.
Accessing the body in this case will give you an instance of this Model.
For both ways an entry for the body will be added in the Documentation in ArangoDBs WebInterface.
For information about how to annotate your models, see the Model section.
All requests sending a body that does not match the validation given this way
will automatically be rejected.
<br />
You can also wrap the definition into an array, in this case this route
expects a body of type array containing arbitrary many valid objects.
Accessing the body parameter will then of course return an array of objects.
<br />
Note: The behavior of `bodyParam` changes depending on the `rootElement` option
set in the [manifest](foxx-develop-manifest.md). If it is set to `true`, it is
expected that the body is an
object with a key of the same name as the `paramName` argument.
The value of this object is either a single object or in the case of a multi
element an array of objects.
<br />
*Parameter*
<br />
  * *paramName*: name of the body parameter in `req.parameters`.
  * *options*: a joi schema or an object with the following properties:
  * *description*: the documentation description of the request body.
  * *type*: the Foxx model or joi schema to use.
  * *allowInvalid* (optional): `true` if validation should be skipped. (Default: `false`)
<br />
*Examples*
<br />
```js
app.post("/foxx", function (req, res) {
  var foxxBody = req.parameters.foxxBody;
  // Do something with foxxBody
}).bodyParam("foxxBody", {
  description: "Body of the Foxx",
  type: FoxxBodyModel
});
```
<br />
Using a joi schema:
<br />
```js
app.post("/foxx", function (req, res) {
  var joiBody = req.parameters.joiBody;
  // Do something with the number
}).bodyParam("joiBody", {
  type: joi.number().integer().min(5),
  description: "A number greater than five",
  allowInvalid: false // default
});
```
<br />
Shorthand version:
<br />
```js
app.post("/foxx", function (req, res) {
  var joiBody = req.parameters.joiBody;
  // Do something with the number
}).bodyParam(
  "joiBody",
  joi.number().integer().min(5)
  .description("A number greater than five")
  .meta({allowInvalid: false}) // default
);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_summary

<br />
`Route.summary(description)`
<br />
Set the summary for this route in the documentation.
Can't be longer than 8192 characters.
This is equal to using JavaDoc style comments right above your function.
If you provide both comment and `summary()` the call to `summary()` wins
and will be used.
<br />
*Examples*
<br />
Version with comment:
<br />
```js
/** Short description
  * 
  * Longer description
  * with multiple lines
  */
app.get("/foxx", function() {
});
```
<br />
is identical to:
<br />
```js
app.get("/foxx", function() {
})
.summary("Short description")
.notes(["Longer description", "with multiple lines"]); 
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_notes

<br />
`Route.notes(...description)`
<br />
Set the long description for this route in the documentation
//
*Examples*
<br />
Version with comment:
<br />
```js
/** Short description
  * 
  * Longer description
  * with multiple lines
  */
app.get("/foxx", function() {
});
```
<br />
is identical to:
<br />
```js
app.get("/foxx", function() {
})
.summary("Short description")
.notes(["Longer description", "with multiple lines"]); 
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_errorResponse

<br />
`Route.errorResponse(errorClassOrName, code, description, [callback])`
<br />
Define a reaction to a thrown error for this route: If your handler throws an error
of the errorClass defined in `errorClassOrName` or the error has an attribute `name` equal to `errorClassOrName`,
it will be caught and the response object will be filled with the given
status code and a JSON with error set to your description as the body.
<br />
If you want more control over the returned JSON, you can give an optional fourth
parameter in form of a function. It gets the error as an argument, the return
value will be transformed into JSON and then be used as the body.
The status code will be used as described above. The description will be used for
the documentation.
<br />
It also adds documentation for this error response to the generated documentation.
<br />
*Examples*
<br />
```js
/* define our own error type, FoxxyError */
var FoxxyError = function (message) {
  this.name = "FError";
  this.message = "the following FoxxyError occurred: " + message;
};
FoxxyError.prototype = new Error();
<br />
app.get("/foxx", function {
  /* throws a FoxxyError */
  throw new FoxxyError();
}).errorResponse(FoxxyError, 303, "This went completely wrong. Sorry!");
<br />
app.get("/foxx", function {
  throw new FoxxyError("oops!");
}).errorResponse("FError", 303, "This went completely wrong. Sorry!", function (e) {
  return {
    code: 123,
    desc: e.message
  };
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_onlyIf

<br />
`Route.onlyIf(check)`
<br />
This functionality is used to secure a route by applying a checking function
on the request beforehand, for example the check authorization.
It expects `check` to be a function that takes the request object as first parameter.
This function is executed before the actual handler is invoked.
If `check` throws an error the actual handler will not be invoked.
Remember to provide an `errorResponse` on the route as well to define the behavior in this case.
<br />
*Examples*
<br />
```js
app.get("/foxx", function {
  // Do something
}).onlyIf(aFunction).errorResponse(ErrorClass, 303, "This went completely wrong. Sorry!");
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContext_onlyIfAuthenticated

<br />
`FoxxController#onlyIfAuthenticated(code, reason)`
<br />
Please activate sessions for this app if you want to use this function.
Or activate authentication (deprecated).
If the user is logged in, it will do nothing. Otherwise it will respond with
the status code and the reason you provided (the route handler won't be called).
This will also add the according documentation for this route.
<br />
*Examples*
<br />
```js
app.get("/foxx", function {
  // Do something
}).onlyIfAuthenticated(401, "You need to be authenticated");
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContextBuffer_pathParam

<br />
`Controller.allRoutes.pathParam(id, options)`
<br />
This is equal to invoking `Route.pathParam` on all routes bound to this controller.
<br />
*Examples*
<br />
```js
app.allRoutes.pathParam("id", joi.string().required().description("Id of the Foxx"));
<br />
app.get("/foxx/:id", function {
  // Secured by pathParam
});
```
<br />
You can also pass in a configuration object instead:
<br />
```js
app.allRoutes.pathParam("id", {
  type: joi.string(),
  required: true,
  description: "Id of the Foxx"
});
<br />
app.get("/foxx/:id", function {
  // Secured by pathParam
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContextBuffer_queryParam

<br />
`Controller.allRoutes.queryParam(id, options)`
<br />
This is equal to invoking `Route.queryParam` on all routes bound to this controller.
<br />
*Examples*
<br />
```js
app.allroutes.queryParam("id",
  joi.string()
  .required()
  .description("Id of the Foxx")
  .meta({allowMultiple: false})
});
<br />
app.get("/foxx", function {
  // Do something
});
```
<br />
You can also pass in a configuration object instead:
<br />
```js
app.allroutes.queryParam("id", {
  type: joi.string().required().description("Id of the Foxx"),
  allowMultiple: false
});
<br />
app.get("/foxx", function {
  // Do something
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContextBuffer_errorResponse

<br />
`Controller.allRoutes.errorResponse(errorClass, code, description)`
<br />
This is equal to invoking `Route.errorResponse` on all routes bound to this controller.
<br />
*Examples*
<br />
```js
app.allRoutes.errorResponse(FoxxyError, 303, "This went completely wrong. Sorry!");
<br />
app.get("/foxx", function {
  // Do something
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContextBuffer_onlyIf

<br />
`Controller.allRoutes.onlyIf(code, reason)`
<br />
This is equal to invoking `Route.onlyIf` on all routes bound to this controller.
<br />
*Examples*
<br />
```js
app.allRoutes.onlyIf(myPersonalCheck);
<br />
app.get("/foxx", function {
  // Do something
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/request_context.js -->
@startDocuBlock JSF_foxx_RequestContextBuffer_onlyIfAuthenticated

<br />
`Controller.allRoutes.onlyIfAuthenticated(code, description)`
<br />
This is equal to invoking `Route.onlyIfAuthenticated` on all routes bound to this controller.
<br />
*Examples*
<br />
```js
app.allRoutes.onlyIfAuthenticated(401, "You need to be authenticated");
<br />
app.get("/foxx", function {
  // Do something
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_initializer

<br />
`new FoxxModel(data)`
<br />
If you initialize a model, you can give it initial *data* as an object.
<br />
@EXAMPLES
<br />
```js
instance = new Model({
  a: 1
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_attributes

<br />
`model.attributes`
<br />
The *attributes* property is the internal hash containing the model's state.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_isvalid

<br />
`model.isValid`
<br />
The *isValid* flag indicates whether the model's state is currently valid.
If the model does not have a schema, it will always be considered valid.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_errors

<br />
`model.errors`
<br />
The *errors* property maps the names of any invalid attributes to their
corresponding validation error.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_get

<br />
`FoxxModel#get(name)`
<br />
Get the value of an attribute
<br />
@EXAMPLES
<br />
```js
instance = new Model({
  a: 1
});
<br />
instance.get("a");
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_set

<br />
`FoxxModel#set(name, value)`
<br />
Set the value of an attribute or multiple attributes at once
<br />
@EXAMPLES
<br />
```js
instance = new Model({
  a: 1
});
<br />
instance.set("a", 2);
instance.set({
  b: 2
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_has

<br />
`FoxxModel#has(name)`
<br />
Returns true if the attribute is set to a non-null or non-undefined value.
<br />
@EXAMPLES
<br />
```js
instance = new Model({
  a: 1
});
<br />
instance.has("a"); //=> true
instance.has("b"); //=> false
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_forDB

<br />
`FoxxModel#forDB()`
<br />
Return a copy of the model which can be saved into ArangoDB
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_forClient

<br />
`FoxxModel#forClient()`
<br />
Return a copy of the model which you can send to the client.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/model.js -->
@startDocuBlock JSF_foxx_model_extend

<br />
`FoxxModel#extend(instanceProperties, classProperties)`
<br />
Extend the Model prototype to add or overwrite methods.
The first object contains the properties to be defined on the instance,
the second object those to be defined on the prototype.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_login

<br />
`FoxxController#login(path, opts)`
<br />
Add a route for the login. You can provide further customizations via the
the options:
<br />
* *usernameField* and *passwordField* can be used to adjust the expected attributes
  in the *post* request. They default to *username* and *password*.
* *onSuccess* is a function that you can define to do something if the login was
  successful. This includes sending a response to the user. This defaults to a
  function that returns a JSON with *user* set to the identifier of the user and
* *key* set to the session key.
* *onError* is a function that you can define to do something if the login did not
  work. This includes sending a response to the user. This defaults to a function
  that sets the response to 401 and returns a JSON with *error* set to
  "Username or Password was wrong".
<br />
Both *onSuccess* and *onError* should take request and result as arguments.
<br />
@EXAMPLES
<br />
```js
app.login('/login', {
  onSuccess(req, res) {
    res.json({"success": true});
  }
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_logout

<br />
`FoxxController#logout(path, opts)`
<br />
This works pretty similar to the logout function and adds a path to your
app for the logout functionality. You can customize it with a custom *onSuccess*
and *onError* function:
<br />
* *onSuccess* is a function that you can define to do something if the logout was
  successful. This includes sending a response to the user. This defaults to a
  function that returns a JSON with *message* set to "logged out".
* *onError* is a function that you can define to do something if the logout did not
  work. This includes sending a response to the user. This defaults to a function
  that sets the response to 401 and returns a JSON with *error* set to
  "No session was found".
<br />
Both *onSuccess* and *onError* should take request and result as arguments.
<br />
<br />
@EXAMPLES
<br />
```js
app.logout('/logout', {
  onSuccess(req, res) {
    res.json({"message": "Bye, Bye"});
  }
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_register

<br />
`FoxxController#register(path, opts)`
<br />
This works pretty similar to the logout function and adds a path to your
app for the register functionality. You can customize it with a custom *onSuccess*
and *onError* function:
<br />
* *onSuccess* is a function that you can define to do something if the registration was
  successful. This includes sending a response to the user. This defaults to a
  function that returns a JSON with *user* set to the created user document.
* *onError* is a function that you can define to do something if the registration did not
  work. This includes sending a response to the user. This defaults to a function
  that sets the response to 401 and returns a JSON with *error* set to
  "Registration failed".
<br />
Both *onSuccess* and *onError* should take request and result as arguments.
<br />
You can also set the fields containing the username and password via *usernameField*
(defaults to *username*) and *passwordField* (defaults to *password*).
If you want to accept additional attributes for the user document, use the option
*acceptedAttributes* and set it to an array containing strings with the names of
the additional attributes you want to accept. All other attributes in the request
will be ignored.
<br />
If you want default attributes for the accepted attributes or set additional fields
(for example *admin*) use the option *defaultAttributes* which should be a hash
mapping attribute names to default values.
<br />
@EXAMPLES
<br />
```js
app.register('/logout', {
  acceptedAttributes: ['name'],
  defaultAttributes: {
    admin: false
  }
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_changePassword

<br />
FoxxController#changePassword(route, opts)`
<br />
Add a route for the logged in user to change the password.
You can provide further customizations via the
the options:
<br />
* *passwordField* can be used to adjust the expected attribute
  in the *post* request. It defaults to *password*.
* *onSuccess* is a function that you can define to do something if the change was
  successful. This includes sending a response to the user. This defaults to a
  function that returns a JSON with *notice* set to "Changed password!".
* *onError* is a function that you can define to do something if the login did not
  work. This includes sending a response to the user. This defaults to a function
  that sets the response to 401 and returns a JSON with *error* set to
  "No session was found".
<br />
Both *onSuccess* and *onError* should take request and result as arguments.
<br />
@EXAMPLES
<br />
```js
app.changePassword('/changePassword', {
  onSuccess(req, res) {
    res.json({"success": true});
  }
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_initializer

<br />
`new Controller(applicationContext, options)`
<br />
This creates a new Controller. The first argument is the controller
context available in the variable *applicationContext*. The second one is an
options array with the following attributes:
<br />
* *urlPrefix*: All routes you define within will be prefixed with it.
<br />
@EXAMPLES
<br />
```js
app = new Controller(applicationContext, {
  urlPrefix: "/meadow"
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_head

<br />
`Controller.head(path, callback)`
<br />
Defines a new route on `path` that handles requests from the HTTP verb `head`.
This route can also be 'parameterized' like `/goose/:barn`.
In this case you can later get the value the user provided for `barn`
via the `params` function in the `request`.
The function defined in `callback` will be invoked whenever this type of
request is recieved.
`callback` get's two arguments `request` and `response`, see below for further
information about these objects.
<br />
@EXAMPLES
<br />
```js
app.head('/goose/barn', function (req, res) {
  // Take this request and deal with it!
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_get

<br />
`Controller.get(path, callback)`
<br />
Defines a new route on `path` that handles requests from the HTTP verb `get`.
This route can also be 'parameterized' like `/goose/:barn`.
In this case you can later get the value the user provided for `barn`
via the `params` function in the `request`.
The function defined in `callback` will be invoked whenever this type of
request is recieved.
`callback` get's two arguments `request` and `response`, see below for further
information about these objects.
<br />
@EXAMPLES
<br />
```js
app.get('/goose/barn', function (req, res) {
  // Take this request and deal with it!
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_post

<br />
`Controller.post(path, callback)`
<br />
Defines a new route on `path` that handles requests from the HTTP verb `post`.
This route can also be 'parameterized' like `/goose/:barn`.
In this case you can later get the value the user provided for `barn`
via the `params` function in the `request`.
The function defined in `callback` will be invoked whenever this type of
request is recieved.
`callback` get's two arguments `request` and `response`, see below for further
information about these objects.
<br />
@EXAMPLES
<br />
```js
app.post('/goose/barn', function (req, res) {
  // Take this request and deal with it!
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_put

<br />
`Controller.put(path, callback)`
<br />
Defines a new route on `path` that handles requests from the HTTP verb `put`.
This route can also be 'parameterized' like `/goose/:barn`.
In this case you can later get the value the user provided for `barn`
via the `params` function in the `request`.
The function defined in `callback` will be invoked whenever this type of
request is recieved.
`callback` get's two arguments `request` and `response`, see below for further
information about these objects.
<br />
@EXAMPLES
<br />
```js
app.put('/goose/barn', function (req, res) {
  // Take this request and deal with it!
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_patch

<br />
`Controller.patch(path, callback)`
<br />
Defines a new route on `path` that handles requests from the HTTP verb `patch`.
This route can also be 'parameterized' like `/goose/:barn`.
In this case you can later get the value the user provided for `barn`
via the `params` function in the `request`.
The function defined in `callback` will be invoked whenever this type of
request is recieved.
`callback` get's two arguments `request` and `response`, see below for further
information about these objects.
<br />
@EXAMPLES
<br />
```js
app.patch('/goose/barn', function (req, res) {
  // Take this request and deal with it!
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_delete

<br />
`Controller.delete(path, callback)`
<br />
Defines a new route on `path` that handles requests from the HTTP verb `delete`.
This route can also be 'parameterized' like `/goose/:barn`.
In this case you can later get the value the user provided for `barn`
via the `params` function in the `request`.
The function defined in `callback` will be invoked whenever this type of
request is recieved.
`callback` get's two arguments `request` and `response`, see below for further
information about these objects.
<br />
@EXAMPLES
<br />
```js
app.delete('/goose/barn', function (req, res) {
  // Take this request and deal with it!
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_before

<br />
`Controller.before(path, callback)`
<br />
Defines an additional function on the route `path` which will be executed
before the callback defined for a specific HTTP verb is executed.
The `callback` function has the same signature as the `callback` in the
specific route.
You can also omit the `path`, in this case `callback` will be executed
before handleing any request in this Controller.
<br />
If `callback` returns the Boolean value `false`, the route handling
will not proceed. You can use this to intercept invalid or unauthorized
requests and prevent them from being passed to the matching routes.
<br />
@EXAMPLES
<br />
```js
app.before('/high/way', function(req, res) {
  //Do some crazy request logging
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_after

<br />
`Controller.after(path, callback)`
<br />
Similar to `Controller.before(path, callback)` but `callback` will be invoked
after the request is handled in the specific route.
<br />
@EXAMPLES
<br />
```js
app.after('/high/way', function(req, res) {
  //Do some crazy response logging
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_around

<br />
`Controller.around(path, callback)`
<br />
Similar to `Controller.before(path, callback)` `callback` will be invoked
instead of the specific handler.
`callback` takes two additional paramaters `opts` and `next` where
`opts` contains options assigned to the route and `next` is a function.
Whenever you call `next` in `callback` the specific handler is invoked,
if you do not call `next` the specific handler will not be invoked at all.
So using around you can execute code before and after a specific handler
and even call the handler only under certain circumstances.
If you omit `path` `callback` will be called on every request.
<br />
@EXAMPLES
<br />
```js
app.around('/high/way', function(req, res, opts, next) {
  //Do some crazy request logging
  next();
  //Do some more crazy request logging
});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_activateAuthentication

<br />
`Controller.activateAuthentication(opts)`
<br />
To activate authentication for this controller, call this function before defining any routes.
In the `opts` object you can set the following keys:
<br />
* *type*: Currently we only support *cookie*, but this will change in the future
* *cookieLifetime*: An integer. Lifetime of cookies in seconds
* *cookieName*: A string used as the name of the cookie
* *sessionLifetime*: An integer. Lifetime of sessions in seconds
<br />
@EXAMPLES
<br />
```js
app.activateAuthentication({
  type: "cookie",
  cookieLifetime: 360000,
  cookieName: "my_cookie",
  sessionLifetime: 400,
});
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_apiDocumentation

<br />
`Controller.apiDocumentation(path, [opts])`
<br />
Mounts the API documentation (Swagger) at the given `path`.
<br />
Note that the `path` can use path parameters as usual but must not use any
wildcard (`*`) or optional (`:name?`) parameters.
<br />
The optional **opts** can be an object with any of the following properties:
<br />
* **before**: a function that will be executed before a request to
  this endpoint is processed further.
* **appPath**: the mount point of the app for which documentation will be
  shown. Default: the mount point of the active app.
* **indexFile**: file path or file name of the Swagger HTML file.
  Default: `"index.html"`.
* **swaggerJson**: file path or file name of the Swagger API description JSON
  file or a function `swaggerJson(req, res, opts)` that sends a Swagger API
  description in JSON. Default: the built-in Swagger description generator.
* **swaggerRoot**: absolute path that will be used as the path path for any
  relative paths of the documentation assets, **swaggerJson** file and
  the **indexFile**. Default: the built-in Swagger distribution.
<br />
If **opts** is a function, it will be used as the value of **opts.before**.
<br />
If **opts.before** returns `false`, the request will not be processed
further.
<br />
If **opts.before** returns an object, any properties will override the
equivalent properties of **opts** for the current request.
<br />
Of course all **before**, **after** or **around** functions defined on the
controller will also be executed as usual.
<br />
**Examples**
<br />
```js
controller.apiDocumentation('/my/dox');
<br />
```
<br />
A request to `/my/dox` will be redirect to `/my/dox/index.html`,
which will show the API documentation of the active app.
<br />
```js
controller.apiDocumentation('/my/dox', function (req, res) {
  if (!req.session.get('uid')) {
    res.status(403);
    res.json({error: 'only logged in users may see the API'});
    return false;
  }
  return {appPath: req.parameters.mount};
});
```
<br />
A request to `/my/dox/index.html?mount=/_admin/aardvark` will show the
API documentation of the admin frontend (mounted at `/_admin/aardvark`).
If the user is not logged in, the error message will be shown instead.
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/controller.js -->
@startDocuBlock JSF_foxx_controller_extend

<br />
`Controller.extend(extensions)`
<br />
Extends all functions to define routes in this controller.
This allows to combine several route extensions with the invocation
of a single function.
This is especially useful if you use the same input parameter in several routes of
your controller and want to apply the same validation, documentation and error handling
for it.
<br />
The `extensions` parameter is a JSON object with arbitrary keys.
Each key is used as the name of the function you want to define (you cannot overwrite
internal functions like `pathParam`) and the value is a function that will be invoked.
This function can get arbitrary many arguments and the `this` of the function is bound
to the route definition object (e.g. you can use `this.pathParam()`).
Your newly defined function is chainable similar to the internal functions.
<br />
**Examples**
<br />
Define a validator for a queryParameter, including documentation and errorResponses
in a single command:
<br />
```js
controller.extend({
  myParam: function (maxValue) {
    this.queryParam("value", {type: joi.number().required()});
    this.onlyIf(function(req) {
      var v = req.param("value");
      if (v > maxValue) {
        throw new NumberTooLargeError();
      }
    });
    this.errorResponse(NumberTooLargeError, 400, "The given value is too large");
  }
});
<br />
controller.get("/goose/barn", function(req, res) {
  // Will only be invoked if the request has parameter value and it is less or equal 5.
}).myParam(5);
```
<br />
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_initializer

`new FoxxRepository(collection, opts)`
<br />
Create a new instance of Repository.
<br />
A Foxx Repository is always initialized with a collection object. You can get
your collection object by asking your Foxx.Controller for it: the
*collection* method takes the name of the collection (and will prepend
the prefix of your application). It also takes two optional arguments:
<br />
1. Model: The prototype of a model. If you do not provide it, it will default
to Foxx.Model
2. Prefix: You can provide the prefix of the application if you need it in
your Repository (for some AQL queries probably)
<br />
If the Model has any static methods named after the lifecycle events, they
will automatically be registered as listeners to the events emitted by this
repository.
<br />
**Examples**
<br />
```js
instance = new Repository(appContext.collection("my_collection"));
// or:
instance = new Repository(appContext.collection("my_collection"), {
  model: MyModelPrototype
});
```
<br />
Example with listeners:
<br />
```js
var ValidatedModel = Model.extend({
  schema: {...}
}, {
  beforeSave(modelInstance) {
    if (!modelInstance.valid) {
      throw new Error('Refusing to save: model is not valid!');
    }
  }
});
instance = new Repository(collection, {model: ValidatedModel});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_collection

The wrapped ArangoDB collection object.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_model

The model of this repository. Formerly called "modelPrototype".
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_modelSchema

The schema of this repository's model.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_prefix

The prefix of the application. This is useful if you want to construct AQL
queries for example.
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_save

`FoxxRepository#save(model)`
<br />
Saves a model into the database.
Expects a model. Will set the ID and Rev on the model.
Returns the model.
<br />
@EXAMPLES
<br />
```javascript
repository.save(my_model);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_byId

`FoxxRepository#byId(id)`
<br />
Returns the model for the given ID ("collection/key") or "key".
<br />
@EXAMPLES
<br />
```javascript
var byIdModel = repository.byId('test/12411');
byIdModel.get('name');
<br />
var byKeyModel = repository.byId('12412');
byKeyModel.get('name');
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_byExample

`FoxxRepository#byExample(example)`
<br />
Returns an array of models for the given ID.
<br />
@EXAMPLES
<br />
```javascript
var myModel = repository.byExample({ amazing: true });
myModel[0].get('name');
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_firstExample

`FoxxRepository#firstExample(example)`
<br />
Returns the first model that matches the given example.
<br />
@EXAMPLES
<br />
```javascript
var myModel = repository.firstExample({ amazing: true });
myModel.get('name');
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_all

`FoxxRepository#all()`
<br />
Returns an array of models that matches the given example. You can provide
both a skip and a limit value.
<br />
**Warning:** ArangoDB doesn't guarantee a specific order in this case, to make
this really useful we have to explicitly provide something to order by.
<br />
*Parameter*
<br />
* *options* (optional):
  * *skip* (optional): skips the first given number of models.
  * *limit* (optional): only returns at most the given number of models.
<br />
@EXAMPLES
<br />
```javascript
var myModel = repository.all({ skip: 4, limit: 2 });
myModel[0].get('name');
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_any

`FoxxRepository#any()`
<br />
Returns a random model from this repository (or null if there is none).
<br />
@EXAMPLES
<br />
```javascript
repository.any();
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_remove

`FoxxRepository#remove(model)`
<br />
Remove the model from the repository.
Expects a model.
<br />
@EXAMPLES
<br />
```javascript
repository.remove(myModel);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_removeById

`FoxxRepository#removeById(id)`
<br />
Remove the document with the given ID ("collection/key") or "key".
Expects an ID or key of an existing document.
<br />
@EXAMPLES
<br />
```javascript
repository.removeById('test/12121');
repository.removeById('12122');
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_removeByExample

`FoxxRepository#removeByExample(example)`
<br />
Find all documents that fit this example and remove them.
<br />
@EXAMPLES
<br />
```javascript
repository.removeByExample({ toBeDeleted: true });
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_replace

`FoxxRepository#replace(model)`
<br />
Find the model in the database by its *_id* and replace it with this version.
Expects a model. Sets the revision of the model.
Returns the model.
<br />
@EXAMPLES
<br />
```javascript
myModel.set('name', 'Jan Steemann');
repository.replace(myModel);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_replaceById

`FoxxRepository#replaceById(id, object)`
<br />
Find the item in the database by the given ID  ("collection/key") or "key"
and replace it with the given object's attributes.
<br />
If the object is a model, updates the model's revision and returns the model.
<br />
@EXAMPLES
<br />
```javascript
repository.replaceById('test/123345', myNewModel);
repository.replaceById('123346', myNewModel);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_replaceByExample

`FoxxRepository#replaceByExample(example, object)`
<br />
Find every matching item by example and replace it with the attributes in
the provided object.
<br />
@EXAMPLES
<br />
```javascript
repository.replaceByExample({ replaceMe: true }, myNewModel);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_update

`FoxxRepository#update(model, object)`
<br />
Find the model in the database by its *_id* and update it with the given object.
Expects a model. Sets the revision of the model and updates its properties.
Returns the model.
<br />
@EXAMPLES
<br />
```javascript
repository.update(myModel, {name: 'Jan Steeman'});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_updateById

`FoxxRepository#updateById(id, object)`
<br />
Find an item by ID ("collection/key") or "key" and update it with the
attributes in the provided object.
<br />
If the object is a model, updates the model's revision and returns the model.
<br />
@EXAMPLES
<br />
```javascript
repository.updateById('test/12131', { newAttribute: 'awesome' });
repository.updateById('12132', { newAttribute: 'awesomer' });
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_updateByExample

`FoxxRepository#updateByExample(example, object)`
<br />
Find every matching item by example and update it with the attributes in
the provided object.
<br />
@EXAMPLES
<br />
```javascript
repository.updateByExample({ findMe: true }, { newAttribute: 'awesome' });
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_exists

`FoxxRepository#exists(id)`
<br />
Checks whether a model with the given ID or key exists.
<br />
@EXAMPLES
<br />
```javascript
repository.exists(model.get('_id'));
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_count

`FoxxRepository#count()`
<br />
Returns the number of entries in this collection.
<br />
@EXAMPLES
<br />
```javascript
repository.count();
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_range

`FoxxRepository#range(attribute, left, right)`
<br />
Returns all models in the repository such that the attribute is greater
than or equal to *left* and strictly less than *right*.
<br />
For range queries it is required that a skiplist index is present for the
queried attribute. If no skiplist index is present on the attribute, the
method will not be available.
<br />
*Parameter*
<br />
* *attribute*: attribute to query.
* *left*: lower bound of the value range (inclusive).
* *right*: upper bound of the value range (exclusive).
<br />
@EXAMPLES
<br />
```javascript
repository.range("age", 10, 13);
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_near

`FoxxRepository#near(latitude, longitude, options)`
<br />
Finds models near the coordinate *(latitude, longitude)*. The returned
list is sorted by distance with the nearest model coming first.
<br />
For geo queries it is required that a geo index is present in the
repository. If no geo index is present, the methods will not be available.
<br />
*Parameter*
<br />
* *latitude*: latitude of the coordinate.
* *longitude*: longitude of the coordinate.
* *options* (optional):
  * *geo* (optional): name of the specific geo index to use.
  * *distance* (optional): If set to a truthy value, the returned models
    will have an additional property containing the distance between the
    given coordinate and the model. If the value is a string, that value
    will be used as the property name, otherwise the name defaults to *"distance"*.
  * *limit* (optional): number of models to return. Defaults to *100*.
<br />
@EXAMPLES
<br />
```javascript
repository.near(0, 0, {geo: "home", distance: true, limit: 10});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_within

`FoxxRepository#within(latitude, longitude, radius, options)`
<br />
Finds models within the distance *radius* from the coordinate
*(latitude, longitude)*. The returned list is sorted by distance with the
nearest model coming first.
<br />
For geo queries it is required that a geo index is present in the
repository. If no geo index is present, the methods will not be available.
<br />
*Parameter*
<br />
* *latitude*: latitude of the coordinate.
* *longitude*: longitude of the coordinate.
* *radius*: maximum distance from the coordinate.
* *options* (optional):
  * *geo* (optional): name of the specific geo index to use.
  * *distance* (optional): If set to a truthy value, the returned models
    will have an additional property containing the distance between the
    given coordinate and the model. If the value is a string, that value
    will be used as the property name, otherwise the name defaults to *"distance"*.
  * *limit* (optional): number of models to return. Defaults to *100*.
<br />
@EXAMPLES
<br />
```javascript
repository.within(0, 0, 2000 * 1000, {geo: "home", distance: true, limit: 10});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/js/server/modules/org/arangodb/foxx/repository.js -->
@startDocuBlock JSF_foxx_repository_fulltext

`FoxxRepository#fulltext(attribute, query, options)`
<br />
Returns all models whose attribute *attribute* matches the search query
*query*.
<br />
In order to use the fulltext method, a fulltext index must be defined on
the repository. If multiple fulltext indexes are defined on the repository
for the attribute, the most capable one will be selected.
If no fulltext index is present, the method will not be available.
<br />
*Parameter*
<br />
* *attribute*: model attribute to perform a search on.
* *query*: query to match the attribute against.
* *options* (optional):
  * *limit* (optional): number of models to return. Defaults to all.
<br />
@EXAMPLES
<br />
```javascript
repository.fulltext("text", "word", {limit: 1});
```
@endDocuBlock


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ModuleQueries/README.md -->
    @startDocuBlockInline QUERY_01_properyOfQueries


<div id="QUERY_01_properyOfQueries_container">
<div id="QUERY_01_properyOfQueries_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> queries = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/aql/queries"</span>);
arangosh&gt; queries.properties();
{ 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"enabled"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"trackSlowQueries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"maxSlowQueries"</span> : <span class="hljs-number">64</span>, 
  <span class="hljs-string">"slowQueryThreshold"</span> : <span class="hljs-number">10</span>, 
  <span class="hljs-string">"maxQueryStringLength"</span> : <span class="hljs-number">4096</span> 
}
arangosh&gt; queries.properties({slowQueryThreshold: <span class="hljs-number">1</span>});
{ 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span>, 
  <span class="hljs-string">"enabled"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"trackSlowQueries"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"maxSlowQueries"</span> : <span class="hljs-number">64</span>, 
  <span class="hljs-string">"slowQueryThreshold"</span> : <span class="hljs-number">1</span>, 
  <span class="hljs-string">"maxQueryStringLength"</span> : <span class="hljs-number">4096</span> 
}
</pre>
</div>
<div id="QUERY_01_properyOfQueries_short" onclick="$('#QUERY_01_properyOfQueries_short').hide(); $('#QUERY_01_properyOfQueries_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> queries = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/aql/queries"</span>);
arangosh&gt; queries.properties();
arangosh&gt; queries.properties({slowQueryThreshold: <span class="hljs-number">1</span>});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock QUERY_01_properyOfQueries


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ModuleQueries/README.md -->
    @startDocuBlockInline QUERY_02_listQueries


<div id="QUERY_02_listQueries_container">
<div id="QUERY_02_listQueries_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> theQuery = <span class="hljs-string">'FOR sleepLoooong IN 1..5 LET sleepLoooonger = SLEEP(1000) RETURN sleepLoooong'</span>;
arangosh&gt; <span class="hljs-keyword">var</span> tasks = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/tasks"</span>);
arangosh&gt; tasks.register({
........&gt;  id: <span class="hljs-string">"mytask-1"</span>,
........&gt;  name: <span class="hljs-string">"this is a sample task to spawn a slow aql query"</span>,
........&gt;  command: <span class="hljs-string">"require('internal').db._query('"</span> + theQuery + <span class="hljs-string">"');"</span>
........&gt; });
{ 
  <span class="hljs-string">"id"</span> : <span class="hljs-string">"mytask-1"</span>, 
  <span class="hljs-string">"name"</span> : <span class="hljs-string">"this is a sample task to spawn a slow aql query"</span>, 
  <span class="hljs-string">"type"</span> : <span class="hljs-string">"timed"</span>, 
  <span class="hljs-string">"offset"</span> : <span class="hljs-number">0.00001</span>, 
  <span class="hljs-string">"created"</span> : <span class="hljs-number">1468399061.54702</span>, 
  <span class="hljs-string">"command"</span> : <span class="hljs-string">"require('internal').db._query('FOR sleepLoooong IN 1..5 LET sleepLoooonger = SLE..."</span>, 
  <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
arangosh&gt; queries.current();
[ 
  { 
    <span class="hljs-string">"id"</span> : <span class="hljs-string">"163"</span>, 
    <span class="hljs-string">"query"</span> : <span class="hljs-string">"FOR sleepLoooong IN 1..5 LET sleepLoooonger = SLEEP(1000) RETURN sleepLoooong"</span>, 
    <span class="hljs-string">"started"</span> : <span class="hljs-string">"2016-07-13T08:37:41Z"</span>, 
    <span class="hljs-string">"runTime"</span> : <span class="hljs-number">1.1689817905426025</span> 
  } 
]
</pre>
</div>
<div id="QUERY_02_listQueries_short" onclick="$('#QUERY_02_listQueries_short').hide(); $('#QUERY_02_listQueries_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> theQuery = <span class="hljs-string">'FOR sleepLoooong IN 1..5 LET sleepLoooonger = SLEEP(1000) RETURN sleepLoooong'</span>;
arangosh&gt; <span class="hljs-keyword">var</span> tasks = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/tasks"</span>);
arangosh&gt; tasks.register({
........&gt;  id: <span class="hljs-string">"mytask-1"</span>,
........&gt;  name: <span class="hljs-string">"this is a sample task to spawn a slow aql query"</span>,
........&gt;  command: <span class="hljs-string">"require('internal').db._query('"</span> + theQuery + <span class="hljs-string">"');"</span>
........&gt; });
arangosh&gt; queries.current();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock QUERY_02_listQueries


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ModuleQueries/README.md -->
    @startDocuBlockInline QUERY_03_listSlowQueries


<div id="QUERY_03_listSlowQueries_container">
<div id="QUERY_03_listSlowQueries_long">
<pre>
arangosh&gt; queries.slow();
[ ]
</pre>
</div>
</div>

    @endDocuBlock QUERY_03_listSlowQueries


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ModuleQueries/README.md -->
    @startDocuBlockInline QUERY_04_clearSlowQueries


<div id="QUERY_04_clearSlowQueries_container">
<div id="QUERY_04_clearSlowQueries_long">
<pre>
arangosh&gt; queries.clearSlow();
{ 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
arangosh&gt; queries.slow();
[ ]
</pre>
</div>
</div>

    @endDocuBlock QUERY_04_clearSlowQueries


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ModuleQueries/README.md -->
    @startDocuBlockInline QUERY_05_killQueries


<div id="QUERY_05_killQueries_container">
<div id="QUERY_05_killQueries_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> runningQueries = queries.current().filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>) </span>{
........&gt;   <span class="hljs-keyword">return</span> query.query === theQuery;
........&gt; });
arangosh&gt; queries.kill(runningQueries[<span class="hljs-number">0</span>].id);
{ 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
</div>

    @endDocuBlock QUERY_05_killQueries


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/GeneralGraphs/README.md -->
    @startDocuBlockInline generalGraphCreateGraphHowTo1


<div id="generalGraphCreateGraphHowTo1_container">
<div id="generalGraphCreateGraphHowTo1_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> graph_module = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@arangodb/general-graph"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = graph_module._create(<span class="hljs-string">"myGraph"</span>);
arangosh&gt; graph;
[ Graph myGraph EdgeDefinitions: [ ] VertexCollections: [ ] ]
</pre>
</div>
</div>

    @endDocuBlock generalGraphCreateGraphHowTo1


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/GeneralGraphs/README.md -->
    @startDocuBlockInline generalGraphCreateGraphHowTo2


<div id="generalGraphCreateGraphHowTo2_container">
<div id="generalGraphCreateGraphHowTo2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"shop"</span>);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"customer"</span>);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"pet"</span>);
arangosh&gt; graph;
[ Graph myGraph EdgeDefinitions: [ ] VertexCollections: [ 
  <span class="hljs-string">"shop"</span>, 
  <span class="hljs-string">"customer"</span>, 
  <span class="hljs-string">"pet"</span> 
] ]
</pre>
</div>
<div id="generalGraphCreateGraphHowTo2_short" onclick="$('#generalGraphCreateGraphHowTo2_short').hide(); $('#generalGraphCreateGraphHowTo2_long').show();">
<pre>
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"shop"</span>);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"customer"</span>);
arangosh&gt; graph._addVertexCollection(<span class="hljs-string">"pet"</span>);
arangosh&gt; graph;
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock generalGraphCreateGraphHowTo2


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/GeneralGraphs/README.md -->
    @startDocuBlockInline generalGraphCreateGraphHowTo3


<div id="generalGraphCreateGraphHowTo3_container">
<div id="generalGraphCreateGraphHowTo3_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> rel = graph_module._relation(<span class="hljs-string">"isCustomer"</span>, [<span class="hljs-string">"shop"</span>], [<span class="hljs-string">"customer"</span>]);
arangosh&gt; graph._extendEdgeDefinitions(rel);
arangosh&gt; graph;
[ Graph myGraph EdgeDefinitions: [ 
  <span class="hljs-string">"isCustomer: [shop] -&gt; [customer]"</span> 
] VertexCollections: [ ] ]
</pre>
</div>
</div>

    @endDocuBlock generalGraphCreateGraphHowTo3


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Arangosh/Output.md -->
    @startDocuBlockInline usingToArray


<div id="usingToArray_container">
<div id="usingToArray_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"five"</span>)
[ArangoCollection <span class="hljs-number">2427406465</span>, <span class="hljs-string">"five"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) db.five.save({value:i})
arangosh&gt; db.five.toArray()
[ 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2428127361"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2428127361"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2428127361"</span> 
  }, 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2427734145"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2427734145"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2427734145"</span> 
  }, 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2428323969"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2428323969"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2428323969"</span> 
  }, 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2427930753"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2427930753"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2427930753"</span> 
  }, 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">4</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"five/2428520577"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2428520577"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2428520577"</span> 
  } 
]
</pre>
</div>
<div id="usingToArray_short" onclick="$('#usingToArray_short').hide(); $('#usingToArray_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"five"</span>)
arangosh&gt; <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) db.five.save({value:i})
arangosh&gt; db.five.toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock usingToArray


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Arangosh/README.md -->
    @startDocuBlockInline shellUseDB


<div id="shellUseDB_container">
<div id="shellUseDB_long">
<pre>
arangosh&gt; db._createDatabase(<span class="hljs-string">"myapp"</span>);
<span class="hljs-literal">true</span>
arangosh&gt; db._useDatabase(<span class="hljs-string">"myapp"</span>);
<span class="hljs-literal">true</span>
arangosh&gt; db._useDatabase(<span class="hljs-string">"_system"</span>);
<span class="hljs-literal">true</span>
arangosh&gt; db._dropDatabase(<span class="hljs-string">"myapp"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
</div>

    @endDocuBlock shellUseDB


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Arangosh/README.md -->
    @startDocuBlockInline shellHelp


<div id="shellHelp_container">
<div id="shellHelp_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._help(); 

--------------------------- ArangoDatabase (db) help ---------------------------
Administration Functions:                                                 
  _help()                               <span class="hljs-keyword">this</span> help                         
  _flushCache()                         flush and refill collection cache 
                                                                          
Collection Functions:                                                     
  _collections()                        list all collections              
  _collection(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>)</span>                   get collection by identifier/name 
  _create(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-title">properties</span>&gt;</span>)</span>         creates a <span class="hljs-keyword">new</span> collection          
  _createEdgeCollection(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>)</span>         creates a <span class="hljs-keyword">new</span> edge collection     
  _drop(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>)</span>                         <span class="hljs-keyword">delete</span> a collection               
                                                                          
Document Functions:                                                       
  _document(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">id</span>&gt;</span>)</span>                       get <span class="hljs-built_in">document</span> by handle (_id)      
  _replace(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">id</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-title">data</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-title">overwrite</span>&gt;</span>)</span>   overwrite <span class="hljs-built_in">document</span>                
  _update(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">id</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-title">data</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-title">overwrite</span>&gt;</span>,    partially update document         
          <span class="hljs-tag">&lt;<span class="hljs-title">keepNull</span>&gt;</span>)</span>                                                     
  _remove(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">id</span>&gt;</span>)</span>                         <span class="hljs-keyword">delete</span> <span class="hljs-built_in">document</span>                   
  _exists(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">id</span>&gt;</span>)</span>                         checks whether a <span class="hljs-built_in">document</span> exists  
  _truncate()                           <span class="hljs-keyword">delete</span> all documents              
                                                                          
Database Management Functions:                                            
  _createDatabase(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>)</span>               creates a <span class="hljs-keyword">new</span> database            
  _dropDatabase(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>)</span>                 drops an existing database        
  _useDatabase(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>)</span>                  switches into an existing database
  _drop(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>)</span>                         <span class="hljs-keyword">delete</span> a collection               
  _name()                               name <span class="hljs-keyword">of</span> the current database      
                                                                          
Query / Transaction Functions:                                            
  _executeTransaction(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">transaction</span>&gt;</span>)</span>    execute transaction               
  _query(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">query</span>&gt;</span>)</span>                       execute AQL query                 
  _createStatement(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">data</span>&gt;</span>)</span>              create and <span class="hljs-keyword">return</span> AQL query       
</pre>
</div>
<div id="shellHelp_short" onclick="$('#shellHelp_short').hide(); $('#shellHelp_long').show();">
<pre>
arangosh&gt; db._help(); 
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock shellHelp


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Arangosh/README.md -->
    @startDocuBlockInline shellPaste


<div id="shellPaste_container">
<div id="shellPaste_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++) {
........&gt;         <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).print(<span class="hljs-string">"Hello world "</span> + i + <span class="hljs-string">"!\n"</span>);
........&gt; }
Hello world <span class="hljs-number">0</span>!

Hello world <span class="hljs-number">1</span>!

Hello world <span class="hljs-number">2</span>!

Hello world <span class="hljs-number">3</span>!

Hello world <span class="hljs-number">4</span>!

Hello world <span class="hljs-number">5</span>!

Hello world <span class="hljs-number">6</span>!

Hello world <span class="hljs-number">7</span>!

Hello world <span class="hljs-number">8</span>!

Hello world <span class="hljs-number">9</span>!

</pre>
</div>
<div id="shellPaste_short" onclick="$('#shellPaste_short').hide(); $('#shellPaste_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++) {
........&gt;         <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).print(<span class="hljs-string">"Hello world "</span> + i + <span class="hljs-string">"!\n"</span>);
........&gt; }
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock shellPaste


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_01_routingCreateJsonHelloWorld


<div id="JSON_01_routingCreateJsonHelloWorld_container">
<div id="JSON_01_routingCreateJsonHelloWorld_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/hello/json"</span>, 
........&gt;  content: { 
........&gt;  contentType: <span class="hljs-string">"application/json"</span>, 
........&gt;    body: <span class="hljs-string">'{"hello" : "world"}'</span>
........&gt;  }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/627132545"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"627132545"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"627132545"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="JSON_01_routingCreateJsonHelloWorld_short" onclick="$('#JSON_01_routingCreateJsonHelloWorld_short').hide(); $('#JSON_01_routingCreateJsonHelloWorld_long').show();">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/hello/json"</span>, 
........&gt;  content: { 
........&gt;  contentType: <span class="hljs-string">"application/json"</span>, 
........&gt;    body: <span class="hljs-string">'{"hello" : "world"}'</span>
........&gt;  }
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_01_routingCreateJsonHelloWorld


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_02_routingCurlJsonHelloWorld


<div id="JSON_02_routingCurlJsonHelloWorld_container">
<div id="JSON_02_routingCurlJsonHelloWorld_long">
<pre>
shell> curl --dump - http://localhost:8529/hello/json

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json

{ 
  <span class="hljs-string">"hello"</span> : <span class="hljs-string">"world"</span> 
}
</pre>
</div>
</div>

    @endDocuBlock JSON_02_routingCurlJsonHelloWorld


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_03_routingCleanupJsonHelloWorld


<div id="JSON_03_routingCleanupJsonHelloWorld_container">
<div id="JSON_03_routingCleanupJsonHelloWorld_long">
<pre>
</pre>
</div>
</div>

    @endDocuBlock JSON_03_routingCleanupJsonHelloWorld


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_05a_routingCreateContentTypeHelloWorld


<div id="JSON_05a_routingCreateContentTypeHelloWorld_container">
<div id="JSON_05a_routingCreateContentTypeHelloWorld_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;  url: <span class="hljs-string">"/hello/contentType"</span>,
........&gt;  content: {
........&gt;    contentType: <span class="hljs-string">"text/html"</span>,
........&gt;    body: <span class="hljs-string">"&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;"</span>
........&gt;  }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/627787905"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"627787905"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"627787905"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="JSON_05a_routingCreateContentTypeHelloWorld_short" onclick="$('#JSON_05a_routingCreateContentTypeHelloWorld_short').hide(); $('#JSON_05a_routingCreateContentTypeHelloWorld_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;  url: <span class="hljs-string">"/hello/contentType"</span>,
........&gt;  content: {
........&gt;    contentType: <span class="hljs-string">"text/html"</span>,
........&gt;    body: <span class="hljs-string">"&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;"</span>
........&gt;  }
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_05a_routingCreateContentTypeHelloWorld


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_05b_routingCurlContentTypeHelloWorld


<div id="JSON_05b_routingCurlContentTypeHelloWorld_container">
<div id="JSON_05b_routingCurlContentTypeHelloWorld_long">
<pre>
shell> curl --dump - http://localhost:8529/hello/contentType

HTTP/1.1 200 OK
content-type: text/html

"<html><body>Hello World</body></html>"
</pre>
</div>
</div>

    @endDocuBlock JSON_05b_routingCurlContentTypeHelloWorld


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_05c_routingCleanupContentTypeHelloWorld


<div id="JSON_05c_routingCleanupContentTypeHelloWorld_container">
<div id="JSON_05c_routingCleanupContentTypeHelloWorld_long">
<pre>
</pre>
</div>
</div>

    @endDocuBlock JSON_05c_routingCleanupContentTypeHelloWorld


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_06_routingCreateHelloEcho


<div id="JSON_06_routingCreateHelloEcho_container">
<div id="JSON_06_routingCreateHelloEcho_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;    url: <span class="hljs-string">"/hello/echo"</span>,
........&gt;    action: { 
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span> 
........&gt;  } 
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/628574337"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"628574337"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"628574337"</span> 
}
</pre>
</div>
<div id="JSON_06_routingCreateHelloEcho_short" onclick="$('#JSON_06_routingCreateHelloEcho_short').hide(); $('#JSON_06_routingCreateHelloEcho_long').show();">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;    url: <span class="hljs-string">"/hello/echo"</span>,
........&gt;    action: { 
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span> 
........&gt;  } 
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_06_routingCreateHelloEcho


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_07_fetchroutingCreateHelloEcho


<div id="JSON_07_fetchroutingCreateHelloEcho_container">
<div id="JSON_07_fetchroutingCreateHelloEcho_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/hello/echo"</span>)
{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/hello/echo"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"0"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"GET"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
</pre>
</div>
<div id="JSON_07_fetchroutingCreateHelloEcho_short" onclick="$('#JSON_07_fetchroutingCreateHelloEcho_short').hide(); $('#JSON_07_fetchroutingCreateHelloEcho_long').show();">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/hello/echo"</span>)
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_07_fetchroutingCreateHelloEcho


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_08_routingCleanupHelloEcho


<div id="JSON_08_routingCleanupHelloEcho_container">
<div id="JSON_08_routingCleanupHelloEcho_long">
<pre>
</pre>
</div>
</div>

    @endDocuBlock JSON_08_routingCleanupHelloEcho


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_09_routingCreateEchoController


<div id="JSON_09_routingCreateEchoController_container">
<div id="JSON_09_routingCreateEchoController_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/hello/echo"</span>,
........&gt;  action: { 
........&gt;    controller: <span class="hljs-string">"org/arangodb/actions/echoController"</span> 
........&gt;  } 
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/629426305"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"629426305"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"629426305"</span> 
}
</pre>
</div>
<div id="JSON_09_routingCreateEchoController_short" onclick="$('#JSON_09_routingCreateEchoController_short').hide(); $('#JSON_09_routingCreateEchoController_long').show();">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/hello/echo"</span>,
........&gt;  action: { 
........&gt;    controller: <span class="hljs-string">"org/arangodb/actions/echoController"</span> 
........&gt;  } 
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_09_routingCreateEchoController


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_10_fetchroutingCreateEchoController


<div id="JSON_10_fetchroutingCreateEchoController_container">
<div id="JSON_10_fetchroutingCreateEchoController_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/hello/echo"</span>)
{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/hello/echo"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"0"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"GET"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
</pre>
</div>
<div id="JSON_10_fetchroutingCreateEchoController_short" onclick="$('#JSON_10_fetchroutingCreateEchoController_short').hide(); $('#JSON_10_fetchroutingCreateEchoController_long').show();">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/hello/echo"</span>)
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_10_fetchroutingCreateEchoController


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_11_routingCleanupEchoController


<div id="JSON_11_routingCleanupEchoController_container">
<div id="JSON_11_routingCleanupEchoController_long">
<pre>
</pre>
</div>
</div>

    @endDocuBlock JSON_11_routingCleanupEchoController


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_12a_routingCreateEchoFunction


<div id="JSON_12a_routingCreateEchoFunction_container">
<div id="JSON_12a_routingCreateEchoFunction_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/hello/echo"</span>,
........&gt;  action: { 
........&gt;    callback: <span class="hljs-string">"function(req,res) {res.statusCode=200; res.body='Hello'}"</span> 
........&gt;  } 
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/630278273"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"630278273"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"630278273"</span> 
}
</pre>
</div>
<div id="JSON_12a_routingCreateEchoFunction_short" onclick="$('#JSON_12a_routingCreateEchoFunction_short').hide(); $('#JSON_12a_routingCreateEchoFunction_long').show();">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/hello/echo"</span>,
........&gt;  action: { 
........&gt;    callback: <span class="hljs-string">"function(req,res) {res.statusCode=200; res.body='Hello'}"</span> 
........&gt;  } 
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_12a_routingCreateEchoFunction


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_12b_fetchroutingEchoFunction


<div id="JSON_12b_fetchroutingEchoFunction_container">
<div id="JSON_12b_fetchroutingEchoFunction_long">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"hello/echo"</span>)
Hello
arangosh&gt; db._query(<span class="hljs-string">"FOR route IN _routing FILTER route.url == '/hello/echo' REMOVE route in _routing"</span>)
[object ArangoQueryCursor, count: <span class="hljs-number">0</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
</div>

    @endDocuBlock JSON_12b_fetchroutingEchoFunction


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_13_routingCreateEchoAction


<div id="JSON_13_routingCreateEchoAction_container">
<div id="JSON_13_routingCreateEchoAction_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/echo"</span>,
........&gt;  action: { 
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span> 
........&gt;  }
........&gt; })
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/630999169"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"630999169"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"630999169"</span> 
}
</pre>
</div>
<div id="JSON_13_routingCreateEchoAction_short" onclick="$('#JSON_13_routingCreateEchoAction_short').hide(); $('#JSON_13_routingCreateEchoAction_long').show();">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/echo"</span>,
........&gt;  action: { 
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span> 
........&gt;  }
........&gt; })
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_13_routingCreateEchoAction


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_14_fetchroutingRequestHelloEcho


<div id="JSON_14_fetchroutingRequestHelloEcho_container">
<div id="JSON_14_fetchroutingRequestHelloEcho_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/hello/echo"</span>)
{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"unknown path '/hello/echo'"</span> 
}
arangosh&gt; db._query(<span class="hljs-string">"FOR route IN _routing FILTER route.url == '/hello/echo' REMOVE route in _routing"</span>)
[object ArangoQueryCursor, count: <span class="hljs-number">0</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="JSON_14_fetchroutingRequestHelloEcho_short" onclick="$('#JSON_14_fetchroutingRequestHelloEcho_short').hide(); $('#JSON_14_fetchroutingRequestHelloEcho_long').show();">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/hello/echo"</span>)
arangosh&gt; db._query(<span class="hljs-string">"FOR route IN _routing FILTER route.url == '/hello/echo' REMOVE route in _routing"</span>)
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_14_fetchroutingRequestHelloEcho


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_15_routingCreateEchoRequestOptions


<div id="JSON_15_routingCreateEchoRequestOptions_container">
<div id="JSON_15_routingCreateEchoRequestOptions_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/echo"</span>,
........&gt;  action: {
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>,
........&gt;    options: { 
........&gt;      <span class="hljs-string">"Hello"</span>: <span class="hljs-string">"World"</span> 
........&gt;    }
........&gt;  } 
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/631654529"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"631654529"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"631654529"</span> 
}
</pre>
</div>
<div id="JSON_15_routingCreateEchoRequestOptions_short" onclick="$('#JSON_15_routingCreateEchoRequestOptions_short').hide(); $('#JSON_15_routingCreateEchoRequestOptions_long').show();">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: <span class="hljs-string">"/echo"</span>,
........&gt;  action: {
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>,
........&gt;    options: { 
........&gt;      <span class="hljs-string">"Hello"</span>: <span class="hljs-string">"World"</span> 
........&gt;    }
........&gt;  } 
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_15_routingCreateEchoRequestOptions


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/JsonExample.md -->
    @startDocuBlockInline JSON_16_fetchroutingEchoRequestOptions


<div id="JSON_16_fetchroutingEchoRequestOptions_container">
<div id="JSON_16_fetchroutingEchoRequestOptions_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/echo"</span>)
{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/echo"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"0"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"GET"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span> 
  } 
}
arangosh&gt; db._query(<span class="hljs-string">"FOR route IN _routing FILTER route.url == '/echo' REMOVE route in _routing"</span>)
[object ArangoQueryCursor, count: <span class="hljs-number">0</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="JSON_16_fetchroutingEchoRequestOptions_short" onclick="$('#JSON_16_fetchroutingEchoRequestOptions_short').hide(); $('#JSON_16_fetchroutingEchoRequestOptions_long').show();">
<pre>
arangosh&gt; arango.GET(<span class="hljs-string">"/echo"</span>)
arangosh&gt; db._query(<span class="hljs-string">"FOR route IN _routing FILTER route.url == '/echo' REMOVE route in _routing"</span>)
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock JSON_16_fetchroutingEchoRequestOptions


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/HtmlExample.md -->
    @startDocuBlockInline HTML_01_routingCreateHtml


<div id="HTML_01_routingCreateHtml_container">
<div id="HTML_01_routingCreateHtml_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: { 
........&gt;    match: <span class="hljs-string">"/hello/world"</span> 
........&gt;  },
........&gt;  content: { 
........&gt;    contentType: <span class="hljs-string">"text/html"</span>, 
........&gt;    body: <span class="hljs-string">"&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;"</span> 
........&gt;  }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/533153921"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"533153921"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"533153921"</span> 
}
</pre>
</div>
<div id="HTML_01_routingCreateHtml_short" onclick="$('#HTML_01_routingCreateHtml_short').hide(); $('#HTML_01_routingCreateHtml_long').show();">
<pre>
arangosh&gt; db._routing.save({ 
........&gt;  url: { 
........&gt;    match: <span class="hljs-string">"/hello/world"</span> 
........&gt;  },
........&gt;  content: { 
........&gt;    contentType: <span class="hljs-string">"text/html"</span>, 
........&gt;    body: <span class="hljs-string">"&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;"</span> 
........&gt;  }
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock HTML_01_routingCreateHtml


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/HtmlExample.md -->
    @startDocuBlockInline HTML_02_routingReload


<div id="HTML_02_routingReload_container">
<div id="HTML_02_routingReload_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
</div>

    @endDocuBlock HTML_02_routingReload


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/HtmlExample.md -->
    @startDocuBlockInline HTML_03_routingCurlHtml


<div id="HTML_03_routingCurlHtml_container">
<div id="HTML_03_routingCurlHtml_long">
<pre>
shell> curl --dump - http://localhost:8529/hello/world

HTTP/1.1 200 OK
content-type: text/html

"<html><body>Hello World</body></html>"
</pre>
</div>
</div>

    @endDocuBlock HTML_03_routingCurlHtml


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_01a_routingCreateOwnTest


<div id="MOD_01a_routingCreateOwnTest_container">
<div id="MOD_01a_routingCreateOwnTest_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._modules.save({
........&gt;  path: <span class="hljs-string">"/db:/ownTest"</span>,
........&gt;  content:
........&gt;     <span class="hljs-string">"exports.do = function(req, res, options, next) {"</span>+
........&gt;     <span class="hljs-string">"  res.body = 'test';"</span> +
........&gt;     <span class="hljs-string">"  res.responseCode = 200;"</span> +
........&gt;     <span class="hljs-string">"  res.contentType = 'text/plain';"</span> +
........&gt;     <span class="hljs-string">"};"</span>
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_modules/632637569"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"632637569"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"632637569"</span> 
}
</pre>
</div>
<div id="MOD_01a_routingCreateOwnTest_short" onclick="$('#MOD_01a_routingCreateOwnTest_short').hide(); $('#MOD_01a_routingCreateOwnTest_long').show();">
<pre>
arangosh&gt; db._modules.save({
........&gt;  path: <span class="hljs-string">"/db:/ownTest"</span>,
........&gt;  content:
........&gt;     <span class="hljs-string">"exports.do = function(req, res, options, next) {"</span>+
........&gt;     <span class="hljs-string">"  res.body = 'test';"</span> +
........&gt;     <span class="hljs-string">"  res.responseCode = 200;"</span> +
........&gt;     <span class="hljs-string">"  res.contentType = 'text/plain';"</span> +
........&gt;     <span class="hljs-string">"};"</span>
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_01a_routingCreateOwnTest


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_01b_routingEnableOwnTest


<div id="MOD_01b_routingEnableOwnTest_container">
<div id="MOD_01b_routingEnableOwnTest_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;  url: <span class="hljs-string">"/ourtest"</span>, 
........&gt;  action: {
........&gt;    controller: <span class="hljs-string">"db://ownTest"</span>
........&gt;  }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/632834177"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"632834177"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"632834177"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="MOD_01b_routingEnableOwnTest_short" onclick="$('#MOD_01b_routingEnableOwnTest_short').hide(); $('#MOD_01b_routingEnableOwnTest_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;  url: <span class="hljs-string">"/ourtest"</span>, 
........&gt;  action: {
........&gt;    controller: <span class="hljs-string">"db://ownTest"</span>
........&gt;  }
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_01b_routingEnableOwnTest


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_01c_routingCurlOwnTest


<div id="MOD_01c_routingCurlOwnTest_container">
<div id="MOD_01c_routingCurlOwnTest_long">
<pre>
shell> curl --dump - http://localhost:8529/ourtest

HTTP/1.1 200 OK
content-type: text/plain

"test"
</pre>
</div>
</div>

    @endDocuBlock MOD_01c_routingCurlOwnTest


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_05_routingModifyReload


<div id="MOD_05_routingModifyReload_container">
<div id="MOD_05_routingModifyReload_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
</div>

    @endDocuBlock MOD_05_routingModifyReload


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_06a_routingRedirect


<div id="MOD_06a_routingRedirect_container">
<div id="MOD_06a_routingRedirect_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;  url: <span class="hljs-string">"/redirectMe"</span>,
........&gt;  action: {
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/redirectRequest"</span>,
........&gt;    options: {
........&gt;      permanently: <span class="hljs-literal">true</span>,
........&gt;      destination: <span class="hljs-string">"/somewhere.else/"</span>
........&gt;    }
........&gt;  }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/634538113"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"634538113"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"634538113"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="MOD_06a_routingRedirect_short" onclick="$('#MOD_06a_routingRedirect_short').hide(); $('#MOD_06a_routingRedirect_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;  url: <span class="hljs-string">"/redirectMe"</span>,
........&gt;  action: {
........&gt;    <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/redirectRequest"</span>,
........&gt;    options: {
........&gt;      permanently: <span class="hljs-literal">true</span>,
........&gt;      destination: <span class="hljs-string">"/somewhere.else/"</span>
........&gt;    }
........&gt;  }
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_06a_routingRedirect


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_06b_routingCurlRedirect


<div id="MOD_06b_routingCurlRedirect_container">
<div id="MOD_06b_routingCurlRedirect_long">
<pre>
shell> curl --dump - http://localhost:8529/redirectMe

HTTP/1.1 301 Moved Permanently
content-type: text/html
location: /somewhere.else/

"<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Moved<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Moved<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>This page has moved to <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">\"</span>/<span class="hljs-attribute">somewhere.else</span>/\"&gt;</span>/somewhere.else/<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>"
</pre>
</div>
</div>

    @endDocuBlock MOD_06b_routingCurlRedirect


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_07a_routingMulti


<div id="MOD_07a_routingMulti_container">
<div id="MOD_07a_routingMulti_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;  routes: [
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url1"</span>,
........&gt;      content: <span class="hljs-string">"route 1"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url2"</span>,
........&gt;      content: <span class="hljs-string">"route 2"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url3"</span>,
........&gt;      content: <span class="hljs-string">"route 3"</span>
........&gt;    }
........&gt;  ]
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/635455617"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"635455617"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"635455617"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="MOD_07a_routingMulti_short" onclick="$('#MOD_07a_routingMulti_short').hide(); $('#MOD_07a_routingMulti_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;  routes: [
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url1"</span>,
........&gt;      content: <span class="hljs-string">"route 1"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url2"</span>,
........&gt;      content: <span class="hljs-string">"route 2"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url3"</span>,
........&gt;      content: <span class="hljs-string">"route 3"</span>
........&gt;    }
........&gt;  ]
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_07a_routingMulti


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_07b_routingCurlMulti


<div id="MOD_07b_routingCurlMulti_container">
<div id="MOD_07b_routingCurlMulti_long">
<pre>
shell> curl --dump - http://localhost:8529/url2

HTTP/1.1 200 OK
content-type: text/plain

"route 2"
shell> curl --dump - http://localhost:8529/url3

HTTP/1.1 200 OK
content-type: text/plain

"route 3"
</pre>
</div>
</div>

    @endDocuBlock MOD_07b_routingCurlMulti


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_07c_routingMulti


<div id="MOD_07c_routingMulti_container">
<div id="MOD_07c_routingMulti_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;  urlPrefix: <span class="hljs-string">"/test"</span>,
........&gt;  routes: [
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url1"</span>,
........&gt;      content: <span class="hljs-string">"route 1"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url2"</span>,
........&gt;      content: <span class="hljs-string">"route 2"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url3"</span>,
........&gt;      content: <span class="hljs-string">"route 3"</span>
........&gt;    }
........&gt;  ]
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/636242049"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"636242049"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"636242049"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="MOD_07c_routingMulti_short" onclick="$('#MOD_07c_routingMulti_short').hide(); $('#MOD_07c_routingMulti_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;  urlPrefix: <span class="hljs-string">"/test"</span>,
........&gt;  routes: [
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url1"</span>,
........&gt;      content: <span class="hljs-string">"route 1"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url2"</span>,
........&gt;      content: <span class="hljs-string">"route 2"</span>
........&gt;    },
........&gt;    {
........&gt;      url: <span class="hljs-string">"/url3"</span>,
........&gt;      content: <span class="hljs-string">"route 3"</span>
........&gt;    }
........&gt;  ]
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_07c_routingMulti


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_07d_routingCurlMulti


<div id="MOD_07d_routingCurlMulti_container">
<div id="MOD_07d_routingCurlMulti_long">
<pre>
shell> curl --dump - http://localhost:8529/test/url1

HTTP/1.1 200 OK
content-type: text/plain

"route 1"
shell> curl --dump - http://localhost:8529/test/url2

HTTP/1.1 200 OK
content-type: text/plain

"route 2"
shell> curl --dump - http://localhost:8529/test/url3

HTTP/1.1 200 OK
content-type: text/plain

"route 3"
</pre>
</div>
</div>

    @endDocuBlock MOD_07d_routingCurlMulti


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_08a_routingCreateOwnConsoleLog


<div id="MOD_08a_routingCreateOwnConsoleLog_container">
<div id="MOD_08a_routingCreateOwnConsoleLog_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._modules.save({
........&gt;  path: <span class="hljs-string">"/db:/OwnMiddlewareTest"</span>,
........&gt;  content:
........&gt;     <span class="hljs-string">"exports.logRequest = function (req, res, options, next) {"</span> +
........&gt;     <span class="hljs-string">"    console = require('console'); "</span> + 
........&gt;     <span class="hljs-string">"    console.log('received request: %s', JSON.stringify(req));"</span> +
........&gt;     <span class="hljs-string">"    next();"</span> +
........&gt;     <span class="hljs-string">"    console.log('produced response: %s', JSON.stringify(res));"</span> +
........&gt;     <span class="hljs-string">"};"</span>
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_modules/636897409"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"636897409"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"636897409"</span> 
}
</pre>
</div>
<div id="MOD_08a_routingCreateOwnConsoleLog_short" onclick="$('#MOD_08a_routingCreateOwnConsoleLog_short').hide(); $('#MOD_08a_routingCreateOwnConsoleLog_long').show();">
<pre>
arangosh&gt; db._modules.save({
........&gt;  path: <span class="hljs-string">"/db:/OwnMiddlewareTest"</span>,
........&gt;  content:
........&gt;     <span class="hljs-string">"exports.logRequest = function (req, res, options, next) {"</span> +
........&gt;     <span class="hljs-string">"    console = require('console'); "</span> + 
........&gt;     <span class="hljs-string">"    console.log('received request: %s', JSON.stringify(req));"</span> +
........&gt;     <span class="hljs-string">"    next();"</span> +
........&gt;     <span class="hljs-string">"    console.log('produced response: %s', JSON.stringify(res));"</span> +
........&gt;     <span class="hljs-string">"};"</span>
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_08a_routingCreateOwnConsoleLog


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_08b_routingCreateRouteToOwnConsoleLog


<div id="MOD_08b_routingCreateRouteToOwnConsoleLog_container">
<div id="MOD_08b_routingCreateRouteToOwnConsoleLog_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;  middleware: [
........&gt;    {
........&gt;      url: {
........&gt;        match: <span class="hljs-string">"/subdirectory/*"</span>
........&gt;      },
........&gt;      action: {
........&gt;        <span class="hljs-keyword">do</span>: <span class="hljs-string">"db://OwnMiddlewareTest/logRequest"</span>
........&gt;      }
........&gt;    }
........&gt;  ]
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/637356161"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"637356161"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"637356161"</span> 
}
</pre>
</div>
<div id="MOD_08b_routingCreateRouteToOwnConsoleLog_short" onclick="$('#MOD_08b_routingCreateRouteToOwnConsoleLog_short').hide(); $('#MOD_08b_routingCreateRouteToOwnConsoleLog_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;  middleware: [
........&gt;    {
........&gt;      url: {
........&gt;        match: <span class="hljs-string">"/subdirectory/*"</span>
........&gt;      },
........&gt;      action: {
........&gt;        <span class="hljs-keyword">do</span>: <span class="hljs-string">"db://OwnMiddlewareTest/logRequest"</span>
........&gt;      }
........&gt;    }
........&gt;  ]
........&gt; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_08b_routingCreateRouteToOwnConsoleLog


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_08c_routingCreateRouteToOwnConsoleLog


<div id="MOD_08c_routingCreateRouteToOwnConsoleLog_container">
<div id="MOD_08c_routingCreateRouteToOwnConsoleLog_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;    url: <span class="hljs-string">"/subdirectory/ourtest/1"</span>,
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/637552769"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"637552769"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"637552769"</span> 
}
arangosh&gt; db._routing.save({
........&gt;    url: <span class="hljs-string">"/subdirectory/ourtest/2"</span>,
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/637749377"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"637749377"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"637749377"</span> 
}
arangosh&gt; db._routing.save({
........&gt;    url: <span class="hljs-string">"/subdirectory/ourtest/3"</span>,
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/637945985"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"637945985"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"637945985"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="MOD_08c_routingCreateRouteToOwnConsoleLog_short" onclick="$('#MOD_08c_routingCreateRouteToOwnConsoleLog_short').hide(); $('#MOD_08c_routingCreateRouteToOwnConsoleLog_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;    url: <span class="hljs-string">"/subdirectory/ourtest/1"</span>,
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
arangosh&gt; db._routing.save({
........&gt;    url: <span class="hljs-string">"/subdirectory/ourtest/2"</span>,
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
arangosh&gt; db._routing.save({
........&gt;    url: <span class="hljs-string">"/subdirectory/ourtest/3"</span>,
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_08c_routingCreateRouteToOwnConsoleLog


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_08d_routingCurlToOwnConsoleLog


<div id="MOD_08d_routingCurlToOwnConsoleLog_container">
<div id="MOD_08d_routingCurlToOwnConsoleLog_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/subdirectory/ourtest/1

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/subdirectory/ourtest/1"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"0"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"GET"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
shell> curl --dump - http://localhost:8529/subdirectory/ourtest/2

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/subdirectory/ourtest/2"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"0"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"GET"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
shell> curl --dump - http://localhost:8529/subdirectory/ourtest/3

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/subdirectory/ourtest/3"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"0"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"GET"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
</pre>
</div>
<div id="MOD_08d_routingCurlToOwnConsoleLog_short" onclick="$('#MOD_08d_routingCurlToOwnConsoleLog_short').hide(); $('#MOD_08d_routingCurlToOwnConsoleLog_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/subdirectory/ourtest/1

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>

    @endDocuBlock MOD_08d_routingCurlToOwnConsoleLog


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_09_routingReload


<div id="MOD_09_routingReload_container">
<div id="MOD_09_routingReload_long">
<pre>
</pre>
</div>
</div>

    @endDocuBlock MOD_09_routingReload


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_09a_routingSpecifyMethods


<div id="MOD_09a_routingSpecifyMethods_container">
<div id="MOD_09a_routingSpecifyMethods_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._routing.save({
........&gt;    url: {
........&gt;      match: <span class="hljs-string">"/hello/world"</span>,
........&gt;      methods: [ <span class="hljs-string">"get"</span>, <span class="hljs-string">"post"</span>, <span class="hljs-string">"put"</span> ]
........&gt;    },
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_routing/640829569"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"640829569"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"640829569"</span> 
}
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre>
</div>
<div id="MOD_09a_routingSpecifyMethods_short" onclick="$('#MOD_09a_routingSpecifyMethods_short').hide(); $('#MOD_09a_routingSpecifyMethods_long').show();">
<pre>
arangosh&gt; db._routing.save({
........&gt;    url: {
........&gt;      match: <span class="hljs-string">"/hello/world"</span>,
........&gt;      methods: [ <span class="hljs-string">"get"</span>, <span class="hljs-string">"post"</span>, <span class="hljs-string">"put"</span> ]
........&gt;    },
........&gt;    action: {
........&gt;      <span class="hljs-keyword">do</span>: <span class="hljs-string">"org/arangodb/actions/echoRequest"</span>
........&gt;    }
........&gt; });
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).reloadRouting()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock MOD_09a_routingSpecifyMethods


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ArangoActions/Modifying.md -->
    @startDocuBlockInline MOD_09b_routingCurlSpecifyMethods


<div id="MOD_09b_routingCurlSpecifyMethods_container">
<div id="MOD_09b_routingCurlSpecifyMethods_long" onclick="" style="Display: none;">
<pre>
shell> curl --dump - http://localhost:8529/hello/world

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/hello/world"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"0"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"GET"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
shell> curl -X POST --data-binary @- --dump - http://localhost:8529/hello/world &lt;&lt;EOF
{hello: 'world'}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/hello/world"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"16"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"POST"</span>, 
    <span class="hljs-string">"requestBody"</span> : <span class="hljs-string">"{hello: 'world'}"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/hello/world &lt;&lt;EOF
{hello: 'world'}
EOF

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"request"</span> : { 
    <span class="hljs-string">"user"</span> : <span class="hljs-literal">null</span>, 
    <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
    <span class="hljs-string">"url"</span> : <span class="hljs-string">"/hello/world"</span>, 
    <span class="hljs-string">"protocol"</span> : <span class="hljs-string">"http"</span>, 
    <span class="hljs-string">"server"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">32090</span> 
    }, 
    <span class="hljs-string">"client"</span> : { 
      <span class="hljs-string">"address"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"port"</span> : <span class="hljs-number">42749</span>, 
      <span class="hljs-string">"id"</span> : <span class="hljs-string">"11"</span> 
    }, 
    <span class="hljs-string">"internals"</span> : { 
    }, 
    <span class="hljs-string">"headers"</span> : { 
      <span class="hljs-string">"accept-encoding"</span> : <span class="hljs-string">"deflate"</span>, 
      <span class="hljs-string">"authorization"</span> : <span class="hljs-string">"Basic cm9vdDo="</span>, 
      <span class="hljs-string">"connection"</span> : <span class="hljs-string">"Keep-Alive"</span>, 
      <span class="hljs-string">"content-length"</span> : <span class="hljs-string">"16"</span>, 
      <span class="hljs-string">"host"</span> : <span class="hljs-string">"127.0.0.1"</span>, 
      <span class="hljs-string">"user-agent"</span> : <span class="hljs-string">"ArangoDB"</span> 
    }, 
    <span class="hljs-string">"requestType"</span> : <span class="hljs-string">"PUT"</span>, 
    <span class="hljs-string">"requestBody"</span> : <span class="hljs-string">"{hello: 'world'}"</span>, 
    <span class="hljs-string">"parameters"</span> : { 
    }, 
    <span class="hljs-string">"cookies"</span> : { 
    }, 
    <span class="hljs-string">"compatibility"</span> : <span class="hljs-number">20800</span>, 
    <span class="hljs-string">"urlParameters"</span> : { 
    } 
  }, 
  <span class="hljs-string">"options"</span> : { 
  } 
}
shell> curl -X DELETE --dump - http://localhost:8529/hello/world

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

{ 
  <span class="hljs-string">"error"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorNum"</span> : <span class="hljs-number">404</span>, 
  <span class="hljs-string">"errorMessage"</span> : <span class="hljs-string">"unknown path '/hello/world'"</span> 
}
</pre>
</div>
<div id="MOD_09b_routingCurlSpecifyMethods_short" onclick="$('#MOD_09b_routingCurlSpecifyMethods_short').hide(); $('#MOD_09b_routingCurlSpecifyMethods_long').show();">
<pre>
shell> curl --dump - http://localhost:8529/hello/world

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json; charset=utf-<span class="hljs-number">8</span>

</pre><div class="example_show_button">show response body</div>
</div>
</div>





    @endDocuBlock MOD_09b_routingCurlSpecifyMethods


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 01_workWithColl_create


<div id="01_workWithColl_create_container">
<div id="01_workWithColl_create_long">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"example"</span>);
[ArangoCollection <span class="hljs-number">447105153</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
</pre>
</div>
</div>

    @endDocuBlock 01_workWithColl_create


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 02_workWithColl_unload


<div id="02_workWithColl_unload_container">
<div id="02_workWithColl_unload_long">
<pre>
arangosh&gt; db.example.unload();
arangosh&gt; db.example;
[ArangoCollection <span class="hljs-number">447105153</span>, <span class="hljs-string">"example"</span> (type <span class="hljs-built_in">document</span>, status unloaded)]
</pre>
</div>
</div>

    @endDocuBlock 02_workWithColl_unload


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 03_workWithColl_save


<div id="03_workWithColl_save_container">
<div id="03_workWithColl_save_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.save({ Hello : <span class="hljs-string">"World"</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/460998785"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"460998785"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"460998785"</span> 
}
arangosh&gt; db.example.save({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"John Doe"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">29</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461392001"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461392001"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461392001"</span> 
}
arangosh&gt; db.example.save({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Jane Smith"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">31</span> });
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461588609"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461588609"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461588609"</span> 
}
</pre>
</div>
<div id="03_workWithColl_save_short" onclick="$('#03_workWithColl_save_short').hide(); $('#03_workWithColl_save_long').show();">
<pre>
arangosh&gt; db.example.save({ Hello : <span class="hljs-string">"World"</span> });
arangosh&gt; db.example.save({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"John Doe"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">29</span> });
arangosh&gt; db.example.save({ <span class="hljs-string">"name"</span> : <span class="hljs-string">"Jane Smith"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">31</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 03_workWithColl_save


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 04_workWithColl_directAcess


<div id="04_workWithColl_directAcess_container">
<div id="04_workWithColl_directAcess_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.toArray()
[ 
  { 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/460998785"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"460998785"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"460998785"</span> 
  }, 
  { 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">31</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Jane Smith"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461588609"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461588609"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461588609"</span> 
  }, 
  { 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">29</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"John Doe"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461392001"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461392001"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461392001"</span> 
  } 
]
</pre>
</div>
<div id="04_workWithColl_directAcess_short" onclick="$('#04_workWithColl_directAcess_short').hide(); $('#04_workWithColl_directAcess_long').show();">
<pre>
arangosh&gt; db.example.toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 04_workWithColl_directAcess


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 05_workWithColl_byExample


<div id="05_workWithColl_byExample_container">
<div id="05_workWithColl_byExample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.byExample({ name: <span class="hljs-string">"Jane Smith"</span> }).toArray()
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461588609"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461588609"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461588609"</span>, 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">31</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Jane Smith"</span> 
  } 
]
</pre>
</div>
<div id="05_workWithColl_byExample_short" onclick="$('#05_workWithColl_byExample_short').hide(); $('#05_workWithColl_byExample_long').show();">
<pre>
arangosh&gt; db.example.byExample({ name: <span class="hljs-string">"Jane Smith"</span> }).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 05_workWithColl_byExample


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 05_workWithColl_AQL_STR


<div id="05_workWithColl_AQL_STR_container">
<div id="05_workWithColl_AQL_STR_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">'FOR user IN example FILTER user.name == "Jane Smith" RETURN user'</span>).toArray()
[ 
  { 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">31</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Jane Smith"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461588609"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461588609"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461588609"</span> 
  } 
]
</pre>
</div>
<div id="05_workWithColl_AQL_STR_short" onclick="$('#05_workWithColl_AQL_STR_short').hide(); $('#05_workWithColl_AQL_STR_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">'FOR user IN example FILTER user.name == "Jane Smith" RETURN user'</span>).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 05_workWithColl_AQL_STR


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 06_workWithColl_AOQL_INT


<div id="06_workWithColl_AOQL_INT_container">
<div id="06_workWithColl_AOQL_INT_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">'FOR user IN example FILTER user.age &gt; 30 RETURN user'</span>).toArray()
[ 
  { 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">31</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Jane Smith"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461588609"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461588609"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461588609"</span> 
  } 
]
</pre>
</div>
<div id="06_workWithColl_AOQL_INT_short" onclick="$('#06_workWithColl_AOQL_INT_short').hide(); $('#06_workWithColl_AOQL_INT_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">'FOR user IN example FILTER user.age &gt; 30 RETURN user'</span>).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 06_workWithColl_AOQL_INT


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/FirstSteps/CollectionsAndDocuments.md -->
    @startDocuBlockInline 07_workWithColl_remove


<div id="07_workWithColl_remove_container">
<div id="07_workWithColl_remove_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db.example.remove(db.example.byExample({ name: <span class="hljs-string">"John Doe"</span> }).toArray()[<span class="hljs-number">0</span>]._id)
<span class="hljs-literal">true</span>
arangosh&gt; db.example.toArray()
[ 
  { 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/460998785"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"460998785"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"460998785"</span> 
  }, 
  { 
    <span class="hljs-string">"age"</span> : <span class="hljs-number">31</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Jane Smith"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"example/461588609"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"461588609"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"461588609"</span> 
  } 
]
</pre>
</div>
<div id="07_workWithColl_remove_short" onclick="$('#07_workWithColl_remove_short').hide(); $('#07_workWithColl_remove_long').show();">
<pre>
arangosh&gt; db.example.remove(db.example.byExample({ name: <span class="hljs-string">"John Doe"</span> }).toArray()[<span class="hljs-number">0</span>]._id)
arangosh&gt; db.example.toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 07_workWithColl_remove


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Graphs/README.md -->
    @startDocuBlockInline graph_create_knows_sample


<div id="graph_create_knows_sample_container">
<div id="graph_create_knows_sample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"knows_graph"</span>);
arangosh&gt; db.persons.toArray()
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charlie"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/charlie"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2327726209"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlie"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2327464065"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eve"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/eve"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2328119425"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"eve"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dave"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/dave"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2327922817"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"dave"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"persons/alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2327267457"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span> 
  } 
]
arangosh&gt; db.knows.toArray();
[ 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/2328578177"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2328578177"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2328578177"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/charlie"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/2329168001"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2329168001"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2329168001"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/2328774785"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2328774785"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2328774785"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/dave"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/2328381569"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2328381569"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2328381569"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/bob"</span> 
  }, 
  { 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"knows/2328971393"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2328971393"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2328971393"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"persons/eve"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"persons/alice"</span> 
  } 
]
arangosh&gt; examples.dropGraph(<span class="hljs-string">"knows_graph"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
<div id="graph_create_knows_sample_short" onclick="$('#graph_create_knows_sample_short').hide(); $('#graph_create_knows_sample_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"knows_graph"</span>);
arangosh&gt; db.persons.toArray()
arangosh&gt; db.knows.toArray();
arangosh&gt; examples.dropGraph(<span class="hljs-string">"knows_graph"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock graph_create_knows_sample


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Graphs/README.md -->
    @startDocuBlockInline graph_create_social_sample


<div id="graph_create_social_sample_container">
<div id="graph_create_social_sample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; db.female.toArray()
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Diana"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/diana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2331789441"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"diana"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Alice"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2331068545"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"alice"</span> 
  } 
]
arangosh&gt; db.male.toArray()
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bob"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2331396225"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bob"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Charly"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2331592833"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charly"</span> 
  } 
]
arangosh&gt; db.relation.toArray()
[ 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/bobAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2332772481"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"bobAndDiana"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/bob"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/charlyAndDiana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2332575873"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"charlyAndDiana"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"male/charly"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"female/diana"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"friend"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndCharly"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2332379265"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndCharly"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/charly"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"married"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"relation/aliceAndBob"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2332117121"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"aliceAndBob"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"female/alice"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"male/bob"</span> 
  } 
]
arangosh&gt; examples.dropGraph(<span class="hljs-string">"social"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
<div id="graph_create_social_sample_short" onclick="$('#graph_create_social_sample_short').hide(); $('#graph_create_social_sample_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"social"</span>);
arangosh&gt; db.female.toArray()
arangosh&gt; db.male.toArray()
arangosh&gt; db.relation.toArray()
arangosh&gt; examples.dropGraph(<span class="hljs-string">"social"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock graph_create_social_sample


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Graphs/README.md -->
    @startDocuBlockInline graph_create_cities_sample


<div id="graph_create_cities_sample_container">
<div id="graph_create_cities_sample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db.frenchCity.toArray();
[ 
  { 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">48.8567</span>, 
      <span class="hljs-number">2.3508</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2322221185"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span> 
  }, 
  { 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">45.76</span>, 
      <span class="hljs-number">4.84</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2322024577"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span> 
  } 
]
arangosh&gt; db.germanCity.toArray();
[ 
  { 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">3000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">52.5167</span>, 
      <span class="hljs-number">13.3833</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2321107073"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Berlin"</span> 
  }, 
  { 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">50.9364</span>, 
      <span class="hljs-number">6.9528</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2321303681"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span> 
  }, 
  { 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">53.5653</span>, 
      <span class="hljs-number">10.0014</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2321500289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span> 
  } 
]
arangosh&gt; db.germanHighway.toArray();
[ 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">500</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanHighway/2323335297"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2323335297"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2323335297"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"germanCity/Cologne"</span> 
  }, 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">400</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanHighway/2323138689"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2323138689"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2323138689"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"germanCity/Hamburg"</span> 
  }, 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">850</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanHighway/2322942081"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2322942081"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2322942081"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"germanCity/Cologne"</span> 
  } 
]
arangosh&gt; db.frenchHighway.toArray();
[ 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">550</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchHighway/2323662977"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2323662977"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2323662977"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Lyon"</span> 
  } 
]
arangosh&gt; db.internationalHighway.toArray();
[ 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">550</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/2324973697"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2324973697"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2324973697"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Paris"</span> 
  }, 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1200</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/2324187265"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2324187265"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2324187265"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Paris"</span> 
  }, 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">700</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/2324777089"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2324777089"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2324777089"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Lyon"</span> 
  }, 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1300</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/2324580481"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2324580481"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2324580481"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Lyon"</span> 
  }, 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">1100</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/2323990657"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2323990657"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2323990657"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Berlin"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Lyon"</span> 
  }, 
  { 
    <span class="hljs-string">"distance"</span> : <span class="hljs-number">900</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"internationalHighway/2324383873"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2324383873"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2324383873"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"frenchCity/Paris"</span> 
  } 
]
arangosh&gt; examples.dropGraph(<span class="hljs-string">"routeplanner"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
<div id="graph_create_cities_sample_short" onclick="$('#graph_create_cities_sample_short').hide(); $('#graph_create_cities_sample_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; db.frenchCity.toArray();
arangosh&gt; db.germanCity.toArray();
arangosh&gt; db.germanHighway.toArray();
arangosh&gt; db.frenchHighway.toArray();
arangosh&gt; db.internationalHighway.toArray();
arangosh&gt; examples.dropGraph(<span class="hljs-string">"routeplanner"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock graph_create_cities_sample


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Graphs/README.md -->
    @startDocuBlockInline graph_create_traversal_sample


<div id="graph_create_traversal_sample_container">
<div id="graph_create_traversal_sample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"traversalGraph"</span>);
arangosh&gt; db.circles.toArray();
[ 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"5"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/E"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2335459457"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"E"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"6"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/F"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2335656065"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"F"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"3"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/C"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2335066241"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"C"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"11"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/K"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2336639105"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"K"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"4"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/D"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2335262849"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"D"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"9"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/I"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2336245889"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"I"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"1"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/A"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2334673025"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"A"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"2"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/B"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2334869633"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"B"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"10"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/J"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2336442497"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"J"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"7"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/G"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2335852673"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"G"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"8"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/H"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2336049281"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"H"</span> 
  } 
]
arangosh&gt; db.edges.toArray();
[ 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_zup"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2338867329"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2338867329"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2338867329"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/J"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/K"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_bar"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2337097857"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2337097857"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2337097857"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/A"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/B"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_blarg"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2337294465"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2337294465"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2337294465"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/B"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/C"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_blub"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2337687681"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2337687681"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2337687681"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/B"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/E"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_schubi"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2337884289"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2337884289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2337884289"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/E"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/F"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_zip"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2338670721"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2338670721"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2338670721"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/G"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/J"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_blub"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2338474113"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2338474113"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2338474113"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/H"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/I"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_blorg"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2337491073"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2337491073"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2337491073"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/C"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/D"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_blob"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2338277505"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2338277505"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2338277505"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/G"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/H"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_foo"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/2338080897"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2338080897"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2338080897"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/A"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/G"</span> 
  } 
]
arangosh&gt; examples.dropGraph(<span class="hljs-string">"traversalGraph"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
<div id="graph_create_traversal_sample_short" onclick="$('#graph_create_traversal_sample_short').hide(); $('#graph_create_traversal_sample_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"traversalGraph"</span>);
arangosh&gt; db.circles.toArray();
arangosh&gt; db.edges.toArray();
arangosh&gt; examples.dropGraph(<span class="hljs-string">"traversalGraph"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock graph_create_traversal_sample


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Graphs/README.md -->
    @startDocuBlockInline graph_create_world_sample


<div id="graph_create_world_sample_container">
<div id="graph_create_world_sample_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"worldCountry"</span>);
arangosh&gt; db.worldVertices.toArray();
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Andorra la Vella"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-andorra-la-vella"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2350663809"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-andorra-la-vella"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BOL"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bolivia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-bolivia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2345552001"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-bolivia"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"FIN"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Finland"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-finland"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2349680769"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-finland"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bandar Seri Begawan"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-bandar-seri-begawan"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2351057025"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-bandar-seri-begawan"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"CMR"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Cameroon"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-cameroon"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2347321473"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-cameroon"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"ALB"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Albania"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-albania"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2342733953"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-albania"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Canberra"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-canberra"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2353023105"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-canberra"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Beijing"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-beijing"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2351253633"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-beijing"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Santiago"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-santiago"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2356562049"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-santiago"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BGR"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bulgaria"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-bulgaria"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2346535041"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-bulgaria"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Tirana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-tirana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2357348481"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-tirana"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Brasilia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-brasilia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2351843457"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-brasilia"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Algiers"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-algiers"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2350467201"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-algiers"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BIH"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bosnia and Herzegovina"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-bosnia-and-herzegovina"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2345748609"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-bosnia-and-herzegovina"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BHR"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bahrain"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-bahrain"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2344568961"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-bahrain"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BHS"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bahamas"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-bahamas"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2344372353"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-bahamas"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bujumbura"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-bujumbura"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2352629889"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-bujumbura"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BGD"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bangladesh"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-bangladesh"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2344765569"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-bangladesh"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"AND"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Andorra"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-andorra"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2343127169"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-andorra"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Brunei"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BRN"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-brunei"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2346338433"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-brunei"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Vienna"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-vienna"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2357545089"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-vienna"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BEL"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Belgium"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-belgium"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2345158785"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-belgium"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Dhaka"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-dhaka"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2353416321"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-dhaka"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Yamoussoukro"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-yamoussoukro"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2357741697"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-yamoussoukro"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BDI"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Burundi"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-burundi"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2346928257"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-burundi"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"CIV"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Cote d'Ivoire"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-cote-d-ivoire"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2348304513"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-cote-d-ivoire"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"CHN"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"People's Republic of China"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-people-s-republic-of-china"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2350270593"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-people-s-republic-of-china"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Phnom Penh"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-phnom-penh"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2355775617"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-phnom-penh"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"CZE"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Czech Republic"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-czech-republic"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2348697729"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-czech-republic"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Chad"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"TCD"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-chad"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2347714689"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-chad"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Angola"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"AGO"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-angola"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2343389313"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-angola"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Berlin"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-berlin"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2351450241"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-berlin"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Quito"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-quito"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2356168833"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-quito"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"AUS"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Australia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-australia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2343979137"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-australia"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Ottawa"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-ottawa"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2355185793"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-ottawa"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"AFG"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Afghanistan"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-afghanistan"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2342537345"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-afghanistan"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"AUT"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Austria"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-austria"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2344175745"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-austria"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BWA"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Botswana"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-botswana"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2345945217"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-botswana"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Helsinki"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-helsinki"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2353809537"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-helsinki"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"World"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"root"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/world"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2340898945"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"world"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Nassau"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-nassau"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2354792577"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-nassau"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Manama"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-manama"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2354595969"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-manama"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Egypt"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"EGY"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-egypt"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2349287553"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-egypt"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Europe"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"continent"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2341816449"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"North America"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"continent"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/continent-north-america"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2342013057"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"continent-north-america"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Africa"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"continent"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2341161089"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BFA"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Burkina Faso"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-burkina-faso"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2346731649"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-burkina-faso"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bogota"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-bogota"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2351646849"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-bogota"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Ouagadougou"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-ouagadougou"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2355382401"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-ouagadougou"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Australia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"continent"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/continent-australia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2341619841"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"continent-australia"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bhutan"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BTN"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-bhutan"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2345355393"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-bhutan"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Sofia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-sofia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2356955265"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-sofia"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Asia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"continent"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2341357697"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"ARG"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Argentina"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-argentina"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2343782529"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-argentina"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"ATG"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Antigua and Barbuda"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-antigua-and-barbuda"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2343585921"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-antigua-and-barbuda"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Sarajevo"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-sarajevo"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2356758657"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-sarajevo"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Asmara"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-asmara"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2350860417"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-asmara"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Kabul"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-kabul"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2354006145"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-kabul"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"DEU"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Germany"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-germany"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2350073985"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-germany"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Chile"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"CHL"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-chile"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2347911297"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-chile"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Paris"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-paris"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2355579009"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-paris"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Luanda"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-luanda"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2354399361"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-luanda"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Yaounde"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-yaounde"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2357938305"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-yaounde"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"HRV"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Croatia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-croatia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2348501121"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-croatia"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Zagreb"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-zagreb"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2358134913"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-zagreb"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Cairo"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-cairo"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2352826497"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-cairo"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"DNK"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Denmark"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-denmark"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2348894337"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-denmark"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Copenhagen"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-copenhagen"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2353219713"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-copenhagen"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Prague"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-prague"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2355972225"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-prague"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Canada"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"CAN"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-canada"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2347518081"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-canada"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"ERI"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Eritrea"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-eritrea"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2349484161"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-eritrea"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"KHM"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Cambodia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-cambodia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2347124865"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-cambodia"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Brazil"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BRA"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-brazil"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2346141825"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-brazil"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"BRB"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Barbados"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-barbados"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2344962177"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-barbados"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"South America"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"continent"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2342209665"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"continent-south-america"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"COL"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Colombia"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-colombia"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2348107905"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-colombia"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"N'Djamena"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-n-djamena"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2354989185"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-n-djamena"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"DZA"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Algeria"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-algeria"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2342930561"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-algeria"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Brussels"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-brussels"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2352236673"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-brussels"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"La Paz"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-la-paz"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2354202753"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-la-paz"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Buenos Aires"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-buenos-aires"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2352433281"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-buenos-aires"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Thimphu"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-thimphu"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2357151873"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-thimphu"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Bridgetown"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-bridgetown"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2352040065"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-bridgetown"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Saint John's"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-saint-john-s"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2356365441"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-saint-john-s"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"France"</span>, 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"FRA"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-france"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2349877377"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-france"</span> 
  }, 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-string">"ECU"</span>, 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Ecuador"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"country"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/country-ecuador"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2349090945"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"country-ecuador"</span> 
  }, 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Gaborone"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"capital"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldVertices/capital-gaborone"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2353612929"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"capital-gaborone"</span> 
  } 
]
arangosh&gt; db.worldEdges.toArray();
[ 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2368292993"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2368292993"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2368292993"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-beijing"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-people-s-republic-of-china"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2364950657"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2364950657"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2364950657"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-chile"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2360625281"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2360625281"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2360625281"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-antigua-and-barbuda"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-north-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2362198145"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2362198145"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2362198145"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-belgium"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2358462593"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2358462593"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2358462593"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/world"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2366523521"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2366523521"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2366523521"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-eritrea"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2362787969"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2362787969"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2362787969"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-bosnia-and-herzegovina"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2372421761"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2372421761"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2372421761"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-ouagadougou"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-burkina-faso"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2360821889"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2360821889"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2360821889"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-argentina"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2371635329"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2371635329"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2371635329"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-manama"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-bahrain"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2360232065"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2360232065"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2360232065"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-andorra"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2366130305"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2366130305"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2366130305"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-ecuador"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2365540481"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2365540481"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2365540481"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-croatia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2365343873"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2365343873"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2365343873"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-cote-d-ivoire"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2372225153"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2372225153"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2372225153"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-ottawa"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-canada"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2369472641"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2369472641"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2369472641"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-buenos-aires"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-argentina"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2372814977"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2372814977"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2372814977"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-phnom-penh"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-cambodia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2372028545"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2372028545"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2372028545"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-n-djamena"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-chad"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2371242113"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2371242113"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2371242113"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-la-paz"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-bolivia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2359642241"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2359642241"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2359642241"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-afghanistan"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2373208193"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2373208193"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2373208193"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-quito"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-ecuador"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2359052417"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2359052417"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2359052417"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/world"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2363181185"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2363181185"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2363181185"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-brazil"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2372618369"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2372618369"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2372618369"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-paris"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-france"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2363574401"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2363574401"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2363574401"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-bulgaria"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2374191233"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2374191233"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2374191233"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-thimphu"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-bhutan"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2369079425"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2369079425"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2369079425"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-bridgetown"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-barbados"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2366326913"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2366326913"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2366326913"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-egypt"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2358855809"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2358855809"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2358855809"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/continent-australia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/world"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2359249025"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2359249025"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2359249025"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/continent-north-america"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/world"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2370652289"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2370652289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2370652289"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-gaborone"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-botswana"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2364360833"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2364360833"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2364360833"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-cameroon"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2361215105"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2361215105"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2361215105"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-austria"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2374781057"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2374781057"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2374781057"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-yamoussoukro"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-cote-d-ivoire"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2374584449"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2374584449"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2374584449"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-vienna"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-austria"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2371831937"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2371831937"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2371831937"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-nassau"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-bahamas"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2362394753"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2362394753"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2362394753"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-bhutan"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2371045505"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2371045505"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2371045505"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-kabul"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-afghanistan"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2370259073"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2370259073"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2370259073"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-copenhagen"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-denmark"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2364754049"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2364754049"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2364754049"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-chad"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2371438721"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2371438721"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2371438721"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-luanda"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-angola"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2370062465"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2370062465"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2370062465"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-canberra"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-australia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2367899777"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2367899777"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2367899777"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-asmara"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-eritrea"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2361411713"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2361411713"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2361411713"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-bahamas"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-north-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2373798017"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2373798017"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2373798017"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-sarajevo"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-bosnia-and-herzegovina"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2367506561"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2367506561"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2367506561"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-algiers"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-algeria"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2368489601"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2368489601"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2368489601"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-berlin"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-germany"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2361018497"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2361018497"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2361018497"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-australia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-australia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2369276033"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2369276033"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2369276033"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-brussels"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-belgium"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2369865857"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2369865857"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2369865857"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-cairo"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-egypt"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2367309953"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2367309953"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2367309953"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-people-s-republic-of-china"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2373601409"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2373601409"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2373601409"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-santiago"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-chile"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2360035457"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2360035457"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2360035457"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-algeria"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2364164225"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2364164225"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2364164225"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-cambodia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2368686209"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2368686209"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2368686209"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-bogota"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-colombia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2361608321"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2361608321"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2361608321"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-bahrain"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2363771009"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2363771009"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2363771009"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-burkina-faso"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2366916737"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2366916737"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2366916737"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-france"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2373994625"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2373994625"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2373994625"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-sofia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-bulgaria"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2362591361"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2362591361"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2362591361"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-bolivia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2374977665"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2374977665"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2374977665"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-yaounde"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-cameroon"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2365737089"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2365737089"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2365737089"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-czech-republic"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2363377793"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2363377793"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2363377793"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-brunei"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2366720129"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2366720129"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2366720129"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-finland"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2361804929"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2361804929"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2361804929"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-bangladesh"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2370848897"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2370848897"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2370848897"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-helsinki"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-finland"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2359445633"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2359445633"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2359445633"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/world"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2360428673"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2360428673"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2360428673"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-angola"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2375174273"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2375174273"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2375174273"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-zagreb"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-croatia"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2374387841"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2374387841"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2374387841"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-tirana"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-albania"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2362001537"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2362001537"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2362001537"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-barbados"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-north-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2373011585"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2373011585"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2373011585"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-prague"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-czech-republic"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2364557441"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2364557441"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2364557441"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-canada"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-north-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2368882817"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2368882817"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2368882817"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-brasilia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-brazil"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2365933697"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2365933697"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2365933697"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-denmark"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2367113345"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2367113345"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2367113345"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-germany"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2359838849"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2359838849"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2359838849"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-albania"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-europe"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2365147265"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2365147265"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2365147265"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-colombia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-south-america"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2362984577"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2362984577"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2362984577"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-botswana"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2358659201"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2358659201"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2358659201"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/continent-asia"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/world"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2370455681"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2370455681"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2370455681"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-dhaka"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-bangladesh"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2368096385"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2368096385"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2368096385"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-bandar-seri-begawan"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-brunei"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2369669249"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2369669249"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2369669249"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-bujumbura"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-burundi"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2373404801"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2373404801"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2373404801"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-saint-john-s"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-antigua-and-barbuda"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2367703169"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2367703169"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2367703169"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/capital-andorra-la-vella"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/country-andorra"</span> 
  }, 
  { 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"is-in"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"worldEdges/2363967617"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2363967617"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2363967617"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"worldVertices/country-burundi"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"worldVertices/continent-africa"</span> 
  } 
]
arangosh&gt; examples.dropGraph(<span class="hljs-string">"worldCountry"</span>);
<span class="hljs-literal">true</span>
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"worldCountryUnManaged"</span>);
arangosh&gt; examples.dropGraph(<span class="hljs-string">"worldCountryUnManaged"</span>);
</pre>
</div>
<div id="graph_create_world_sample_short" onclick="$('#graph_create_world_sample_short').hide(); $('#graph_create_world_sample_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"worldCountry"</span>);
arangosh&gt; db.worldVertices.toArray();
arangosh&gt; db.worldEdges.toArray();
arangosh&gt; examples.dropGraph(<span class="hljs-string">"worldCountry"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"worldCountryUnManaged"</span>);
arangosh&gt; examples.dropGraph(<span class="hljs-string">"worldCountryUnManaged"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock graph_create_world_sample


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_01_authFetch


<div id="USER_01_authFetch_container">
<div id="USER_01_authFetch_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._users.toArray()
[ 
  { 
    <span class="hljs-string">"user"</span> : <span class="hljs-string">"root"</span>, 
    <span class="hljs-string">"userData"</span> : { 
    }, 
    <span class="hljs-string">"authData"</span> : { 
      <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"changePassword"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"simple"</span> : { 
        <span class="hljs-string">"method"</span> : <span class="hljs-string">"sha256"</span>, 
        <span class="hljs-string">"hash"</span> : <span class="hljs-string">"c37b53b70549bb396b2c87cff45771702e977cdc901c83e4b784d1c926baed26"</span>, 
        <span class="hljs-string">"salt"</span> : <span class="hljs-string">"SalL1I4QVCMQozze"</span> 
      } 
    }, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"_users/1722497"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"1722497"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"1722497"</span> 
  } 
]
</pre>
</div>
<div id="USER_01_authFetch_short" onclick="$('#USER_01_authFetch_short').hide(); $('#USER_01_authFetch_long').show();">
<pre>
arangosh&gt; db._users.toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock USER_01_authFetch


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_02_saveUser


<div id="USER_02_saveUser_container">
<div id="USER_02_saveUser_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).save(<span class="hljs-string">"my-user"</span>, <span class="hljs-string">"my-secret-password"</span>);
{ 
  <span class="hljs-string">"user"</span> : <span class="hljs-string">"my-user"</span>, 
  <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"extra"</span> : { 
  }, 
  <span class="hljs-string">"changePassword"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">201</span> 
}
</pre>
</div>
<div id="USER_02_saveUser_short" onclick="$('#USER_02_saveUser_short').hide(); $('#USER_02_saveUser_long').show();">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).save(<span class="hljs-string">"my-user"</span>, <span class="hljs-string">"my-secret-password"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock USER_02_saveUser


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_03_reloadUser


<div id="USER_03_reloadUser_container">
<div id="USER_03_reloadUser_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).reload();
</pre>
</div>
</div>

    @endDocuBlock USER_03_reloadUser


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_04_documentUser


<div id="USER_04_documentUser_container">
<div id="USER_04_documentUser_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).document(<span class="hljs-string">"my-user"</span>);
{ 
  <span class="hljs-string">"user"</span> : <span class="hljs-string">"my-user"</span>, 
  <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"extra"</span> : { 
  }, 
  <span class="hljs-string">"changePassword"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="USER_04_documentUser_short" onclick="$('#USER_04_documentUser_short').hide(); $('#USER_04_documentUser_long').show();">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).document(<span class="hljs-string">"my-user"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock USER_04_documentUser


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_03_replaceUser


<div id="USER_03_replaceUser_container">
<div id="USER_03_replaceUser_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).replace(<span class="hljs-string">"my-user"</span>, <span class="hljs-string">"my-changed-password"</span>);
{ 
  <span class="hljs-string">"user"</span> : <span class="hljs-string">"my-user"</span>, 
  <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"extra"</span> : { 
  }, 
  <span class="hljs-string">"changePassword"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="USER_03_replaceUser_short" onclick="$('#USER_03_replaceUser_short').hide(); $('#USER_03_replaceUser_long').show();">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).replace(<span class="hljs-string">"my-user"</span>, <span class="hljs-string">"my-changed-password"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock USER_03_replaceUser


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_04_updateUser


<div id="USER_04_updateUser_container">
<div id="USER_04_updateUser_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).update(<span class="hljs-string">"my-user"</span>, <span class="hljs-string">"my-secret-password"</span>);
{ 
  <span class="hljs-string">"user"</span> : <span class="hljs-string">"my-user"</span>, 
  <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span>, 
  <span class="hljs-string">"extra"</span> : { 
  }, 
  <span class="hljs-string">"changePassword"</span> : <span class="hljs-literal">false</span>, 
  <span class="hljs-string">"code"</span> : <span class="hljs-number">200</span> 
}
</pre>
</div>
<div id="USER_04_updateUser_short" onclick="$('#USER_04_updateUser_short').hide(); $('#USER_04_updateUser_long').show();">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).update(<span class="hljs-string">"my-user"</span>, <span class="hljs-string">"my-secret-password"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock USER_04_updateUser


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_05_isValidUser


<div id="USER_05_isValidUser_container">
<div id="USER_05_isValidUser_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).isValid(<span class="hljs-string">"my-user"</span>, <span class="hljs-string">"my-secret-password"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
</div>

    @endDocuBlock USER_05_isValidUser


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_06_AllUsers


<div id="USER_06_AllUsers_container">
<div id="USER_06_AllUsers_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).all();
[ 
  { 
    <span class="hljs-string">"user"</span> : <span class="hljs-string">"my-user"</span>, 
    <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"extra"</span> : { 
    }, 
    <span class="hljs-string">"changePassword"</span> : <span class="hljs-literal">false</span> 
  }, 
  { 
    <span class="hljs-string">"user"</span> : <span class="hljs-string">"root"</span>, 
    <span class="hljs-string">"active"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"extra"</span> : { 
    }, 
    <span class="hljs-string">"changePassword"</span> : <span class="hljs-literal">false</span> 
  } 
]
</pre>
</div>
<div id="USER_06_AllUsers_short" onclick="$('#USER_06_AllUsers_short').hide(); $('#USER_06_AllUsers_long').show();">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).all();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock USER_06_AllUsers


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ConfigureArango/Authentication.md -->
    @startDocuBlockInline USER_07_removeUser


<div id="USER_07_removeUser_container">
<div id="USER_07_removeUser_long">
<pre>
arangosh&gt; <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/users"</span>).remove(<span class="hljs-string">"my-user"</span>);
</pre>
</div>
</div>

    @endDocuBlock USER_07_removeUser


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/AqlExamples/CombiningGraphTraversals.md -->
    @startDocuBlockInline COMBINING_GRAPH_01_create_graph


<div id="COMBINING_GRAPH_01_create_graph_container">
<div id="COMBINING_GRAPH_01_create_graph_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> bonn=[<span class="hljs-number">50.7340</span>, <span class="hljs-number">7.0998</span>];
arangosh&gt; db._query(<span class="hljs-string">`FOR startCity IN
........&gt;             WITHIN(germanCity, @lat, @long, @radius)
........&gt;               RETURN startCity`</span>,
........&gt;   {lat: bonn[<span class="hljs-number">0</span>], long: bonn[<span class="hljs-number">1</span>], radius: <span class="hljs-number">400000</span>}
........&gt; ).toArray()
[ 
  { 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">50.9364</span>, 
      <span class="hljs-number">6.9528</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"513886337"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span> 
  }, 
  { 
    <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
    <span class="hljs-string">"loc"</span> : [ 
      <span class="hljs-number">53.5653</span>, 
      <span class="hljs-number">10.0014</span> 
    ], 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Hamburg"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514082945"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Hamburg"</span> 
  } 
]
</pre>
</div>
<div id="COMBINING_GRAPH_01_create_graph_short" onclick="$('#COMBINING_GRAPH_01_create_graph_short').hide(); $('#COMBINING_GRAPH_01_create_graph_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> g = examples.loadGraph(<span class="hljs-string">"routeplanner"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> bonn=[<span class="hljs-number">50.7340</span>, <span class="hljs-number">7.0998</span>];
arangosh&gt; db._query(<span class="hljs-string">`FOR startCity IN
........&gt;             WITHIN(germanCity, @lat, @long, @radius)
........&gt;               RETURN startCity`</span>,
........&gt;   {lat: bonn[<span class="hljs-number">0</span>], long: bonn[<span class="hljs-number">1</span>], radius: <span class="hljs-number">400000</span>}
........&gt; ).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock COMBINING_GRAPH_01_create_graph


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/AqlExamples/CombiningGraphTraversals.md -->
    @startDocuBlockInline COMBINING_GRAPH_02_combine


<div id="COMBINING_GRAPH_02_combine_container">
<div id="COMBINING_GRAPH_02_combine_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`FOR startCity IN
........&gt;             WITHIN(germanCity, @lat, @long, @radius)
........&gt;               FOR v, e, p IN 1..1 OUTBOUND startCity
........&gt;                 GRAPH 'routeplanner'
........&gt;     RETURN {startcity: startCity._key, traversedCity: v}`</span>,
........&gt; {
........&gt;  lat: bonn[<span class="hljs-number">0</span>],
........&gt;  long: bonn[<span class="hljs-number">1</span>],
........&gt;  radius: <span class="hljs-number">400000</span>
........&gt; } ).toArray()
[ 
  { 
    <span class="hljs-string">"startcity"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"traversedCity"</span> : { 
      <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">45.76</span>, 
        <span class="hljs-number">4.84</span> 
      ], 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514607233"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span> 
    } 
  }, 
  { 
    <span class="hljs-string">"startcity"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"traversedCity"</span> : { 
      <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">48.8567</span>, 
        <span class="hljs-number">2.3508</span> 
      ], 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514803841"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span> 
    } 
  }, 
  { 
    <span class="hljs-string">"startcity"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"traversedCity"</span> : { 
      <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">50.9364</span>, 
        <span class="hljs-number">6.9528</span> 
      ], 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"513886337"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span> 
    } 
  }, 
  { 
    <span class="hljs-string">"startcity"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"traversedCity"</span> : { 
      <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">48.8567</span>, 
        <span class="hljs-number">2.3508</span> 
      ], 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514803841"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span> 
    } 
  }, 
  { 
    <span class="hljs-string">"startcity"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"traversedCity"</span> : { 
      <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
      <span class="hljs-string">"loc"</span> : [ 
        <span class="hljs-number">45.76</span>, 
        <span class="hljs-number">4.84</span> 
      ], 
      <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
      <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514607233"</span>, 
      <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span> 
    } 
  } 
]
</pre>
</div>
<div id="COMBINING_GRAPH_02_combine_short" onclick="$('#COMBINING_GRAPH_02_combine_short').hide(); $('#COMBINING_GRAPH_02_combine_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`FOR startCity IN
........&gt;             WITHIN(germanCity, @lat, @long, @radius)
........&gt;               FOR v, e, p IN 1..1 OUTBOUND startCity
........&gt;                 GRAPH 'routeplanner'
........&gt;     RETURN {startcity: startCity._key, traversedCity: v}`</span>,
........&gt; {
........&gt;  lat: bonn[<span class="hljs-number">0</span>],
........&gt;  long: bonn[<span class="hljs-number">1</span>],
........&gt;  radius: <span class="hljs-number">400000</span>
........&gt; } ).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock COMBINING_GRAPH_02_combine


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/AqlExamples/CombiningGraphTraversals.md -->
    @startDocuBlockInline COMBINING_GRAPH_03_combine_let


<div id="COMBINING_GRAPH_03_combine_let_container">
<div id="COMBINING_GRAPH_03_combine_let_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`FOR startCity IN
........&gt;            WITHIN(germanCity, @lat, @long, @radius)
........&gt;              LET oneCity = (FOR v, e, p IN 1..1 OUTBOUND startCity
........&gt;                GRAPH 'routeplanner' RETURN v)
........&gt;              return {startCity: startCity._key, connectedCities: oneCity}`</span>,
........&gt; {
........&gt;  lat: bonn[<span class="hljs-number">0</span>],
........&gt;  long: bonn[<span class="hljs-number">1</span>],
........&gt;  radius: <span class="hljs-number">400000</span>
........&gt; } ).toArray();
[ 
  { 
    <span class="hljs-string">"startCity"</span> : <span class="hljs-string">"Cologne"</span>, 
    <span class="hljs-string">"connectedCities"</span> : [ 
      { 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">45.76</span>, 
          <span class="hljs-number">4.84</span> 
        ], 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514607233"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span> 
      }, 
      { 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">48.8567</span>, 
          <span class="hljs-number">2.3508</span> 
        ], 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514803841"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span> 
      } 
    ] 
  }, 
  { 
    <span class="hljs-string">"startCity"</span> : <span class="hljs-string">"Hamburg"</span>, 
    <span class="hljs-string">"connectedCities"</span> : [ 
      { 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">1000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">50.9364</span>, 
          <span class="hljs-number">6.9528</span> 
        ], 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"germanCity/Cologne"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"513886337"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Cologne"</span> 
      }, 
      { 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">true</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">4000000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">48.8567</span>, 
          <span class="hljs-number">2.3508</span> 
        ], 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Paris"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514803841"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Paris"</span> 
      }, 
      { 
        <span class="hljs-string">"isCapital"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"population"</span> : <span class="hljs-number">80000</span>, 
        <span class="hljs-string">"loc"</span> : [ 
          <span class="hljs-number">45.76</span>, 
          <span class="hljs-number">4.84</span> 
        ], 
        <span class="hljs-string">"_id"</span> : <span class="hljs-string">"frenchCity/Lyon"</span>, 
        <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"514607233"</span>, 
        <span class="hljs-string">"_key"</span> : <span class="hljs-string">"Lyon"</span> 
      } 
    ] 
  } 
]
</pre>
</div>
<div id="COMBINING_GRAPH_03_combine_let_short" onclick="$('#COMBINING_GRAPH_03_combine_let_short').hide(); $('#COMBINING_GRAPH_03_combine_let_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`FOR startCity IN
........&gt;            WITHIN(germanCity, @lat, @long, @radius)
........&gt;              LET oneCity = (FOR v, e, p IN 1..1 OUTBOUND startCity
........&gt;                GRAPH 'routeplanner' RETURN v)
........&gt;              return {startCity: startCity._key, connectedCities: oneCity}`</span>,
........&gt; {
........&gt;  lat: bonn[<span class="hljs-number">0</span>],
........&gt;  long: bonn[<span class="hljs-number">1</span>],
........&gt;  radius: <span class="hljs-number">400000</span>
........&gt; } ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock COMBINING_GRAPH_03_combine_let


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/AqlExamples/CombiningGraphTraversals.md -->
    @startDocuBlockInline COMBINING_GRAPH_04_cleanup


<div id="COMBINING_GRAPH_04_cleanup_container">
<div id="COMBINING_GRAPH_04_cleanup_long">
<pre>
arangosh&gt; examples.dropGraph(<span class="hljs-string">"routeplanner"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
</div>

    @endDocuBlock COMBINING_GRAPH_04_cleanup


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_01_axplainer


<div id="AQLEXP_01_axplainer_container">
<div id="AQLEXP_01_axplainer_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create("test"); 
[ArangoCollection 490752129, "test" (type document, status loaded)]
arangosh&gt; for (i = 0; i &lt; 100; ++i) { db.test.save({ value: i }); }
arangosh&gt; db.test.ensureIndex({ type: "skiplist", fields: [ "value" ] });
{ 
  "id" : "test/510740609", 
  "type" : "skiplist", 
  "fields" : [ 
    "value" 
  ], 
  "unique" : false, 
  "sparse" : false, 
  "isNewlyCreated" : true, 
  "code" : 201 
}
arangosh&gt; var explain = require("org/arangodb/aql/explainer").explain;
arangosh&gt; explain("FOR i IN test FILTER i.value &gt; 97 SORT i.value RETURN i.value", {colors:false});
Query string:
 FOR i IN test FILTER i.value &gt; 97 SORT i.value RETURN i.value

Execution plan:
 Id   NodeType          Est.   Comment
  1   SingletonNode        1   * ROOT
  9   IndexNode           50     - FOR i IN test   /* skiplist index scan */
  5   CalculationNode     50       - LET #3 = i.`value`   /* attribute expression */   /* collections used: i : test */
  8   ReturnNode          50       - RETURN #3

Indexes used:
 By   Type       Collection   Unique   Sparse   Selectivity   Fields        Ranges
  9   skiplist   test         false    false            n/a   [ `value` ]   ((i.`value` &gt; 97))

Optimization rules applied:
 Id   RuleName
  1   move-calculations-up
  2   move-filters-up
  3   remove-redundant-calculations
  4   remove-unnecessary-calculations
  5   move-calculations-up-2
  6   move-filters-up-2
  7   use-indexes
  8   remove-filter-covered-by-index
  9   use-index-for-sort


</pre>
</div>
<div id="AQLEXP_01_axplainer_short" onclick="$('#AQLEXP_01_axplainer_short').hide(); $('#AQLEXP_01_axplainer_long').show();">
<pre>
arangosh&gt; db._create("test"); 
arangosh&gt; for (i = 0; i &lt; 100; ++i) { db.test.save({ value: i }); }
arangosh&gt; db.test.ensureIndex({ type: "skiplist", fields: [ "value" ] });
arangosh&gt; var explain = require("org/arangodb/aql/explainer").explain;
arangosh&gt; explain("FOR i IN test FILTER i.value &gt; 97 SORT i.value RETURN i.value", {colors:false});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_01_axplainer


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_01_explainCreate


<div id="AQLEXP_01_explainCreate_container">
<div id="AQLEXP_01_explainCreate_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt = db._createStatement(<span class="hljs-string">"FOR i IN test FILTER i.value &gt; 97 SORT i.value RETURN i.value"</span>);
[object ArangoStatement]
arangosh&gt; stmt.explain();
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"IndexNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">9</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">51</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        }, 
        <span class="hljs-string">"indexes"</span> : [ 
          { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
            <span class="hljs-string">"id"</span> : <span class="hljs-string">"510740609"</span>, 
            <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"fields"</span> : [ 
              <span class="hljs-string">"value"</span> 
            ] 
          } 
        ], 
        <span class="hljs-string">"condition"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary or"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary and"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare &gt;"</span>, 
                  <span class="hljs-string">"subNodes"</span> : [ 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
                      <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
                      <span class="hljs-string">"subNodes"</span> : [ 
                        { 
                          <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
                          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                        } 
                      ] 
                    }, 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
                      <span class="hljs-string">"value"</span> : <span class="hljs-number">97</span> 
                    } 
                  ] 
                } 
              ] 
            } 
          ] 
        }, 
        <span class="hljs-string">"reverse"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">9</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">101</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">5</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">151</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ 
      <span class="hljs-string">"move-calculations-up"</span>, 
      <span class="hljs-string">"move-filters-up"</span>, 
      <span class="hljs-string">"remove-redundant-calculations"</span>, 
      <span class="hljs-string">"remove-unnecessary-calculations"</span>, 
      <span class="hljs-string">"move-calculations-up-2"</span>, 
      <span class="hljs-string">"move-filters-up-2"</span>, 
      <span class="hljs-string">"use-indexes"</span>, 
      <span class="hljs-string">"remove-filter-covered-by-index"</span>, 
      <span class="hljs-string">"use-index-for-sort"</span> 
    ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">151</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">36</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="AQLEXP_01_explainCreate_short" onclick="$('#AQLEXP_01_explainCreate_short').hide(); $('#AQLEXP_01_explainCreate_long').show();">
<pre>
arangosh&gt; stmt = db._createStatement(<span class="hljs-string">"FOR i IN test FILTER i.value &gt; 97 SORT i.value RETURN i.value"</span>);
arangosh&gt; stmt.explain();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_01_explainCreate


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_02_explainOverview


<div id="AQLEXP_02_explainOverview_container">
<div id="AQLEXP_02_explainOverview_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain().plan.nodes.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node</span>) </span>{ <span class="hljs-keyword">return</span> node.type; });
[ 
  <span class="hljs-string">"SingletonNode"</span>, 
  <span class="hljs-string">"IndexNode"</span>, 
  <span class="hljs-string">"CalculationNode"</span>, 
  <span class="hljs-string">"ReturnNode"</span> 
]
</pre>
</div>
<div id="AQLEXP_02_explainOverview_short" onclick="$('#AQLEXP_02_explainOverview_short').hide(); $('#AQLEXP_02_explainOverview_long').show();">
<pre>
arangosh&gt; stmt.explain().plan.nodes.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node</span>) </span>{ <span class="hljs-keyword">return</span> node.type; });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_02_explainOverview


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_03_explainRules


<div id="AQLEXP_03_explainRules_container">
<div id="AQLEXP_03_explainRules_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain().plan.rules;
[ 
  <span class="hljs-string">"move-calculations-up"</span>, 
  <span class="hljs-string">"move-filters-up"</span>, 
  <span class="hljs-string">"remove-redundant-calculations"</span>, 
  <span class="hljs-string">"remove-unnecessary-calculations"</span>, 
  <span class="hljs-string">"move-calculations-up-2"</span>, 
  <span class="hljs-string">"move-filters-up-2"</span>, 
  <span class="hljs-string">"use-indexes"</span>, 
  <span class="hljs-string">"remove-filter-covered-by-index"</span>, 
  <span class="hljs-string">"use-index-for-sort"</span> 
]
</pre>
</div>
<div id="AQLEXP_03_explainRules_short" onclick="$('#AQLEXP_03_explainRules_short').hide(); $('#AQLEXP_03_explainRules_long').show();">
<pre>
arangosh&gt; stmt.explain().plan.rules;
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_03_explainRules


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_04_explainCollections


<div id="AQLEXP_04_explainCollections_container">
<div id="AQLEXP_04_explainCollections_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain().plan.collections
[ 
  { 
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>, 
    <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
  } 
]
</pre>
</div>
<div id="AQLEXP_04_explainCollections_short" onclick="$('#AQLEXP_04_explainCollections_short').hide(); $('#AQLEXP_04_explainCollections_long').show();">
<pre>
arangosh&gt; stmt.explain().plan.collections
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_04_explainCollections


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_05_explainAllPlans


<div id="AQLEXP_05_explainAllPlans_container">
<div id="AQLEXP_05_explainAllPlans_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain({ allPlans: <span class="hljs-literal">true</span> });
{ 
  <span class="hljs-string">"plans"</span> : [ 
    { 
      <span class="hljs-string">"nodes"</span> : [ 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"IndexNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">1</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">9</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">51</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
          <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
          <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span>, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
          }, 
          <span class="hljs-string">"indexes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-string">"510740609"</span>, 
              <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
              <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
              <span class="hljs-string">"fields"</span> : [ 
                <span class="hljs-string">"value"</span> 
              ] 
            } 
          ], 
          <span class="hljs-string">"condition"</span> : { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary or"</span>, 
            <span class="hljs-string">"subNodes"</span> : [ 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary and"</span>, 
                <span class="hljs-string">"subNodes"</span> : [ 
                  { 
                    <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare &gt;"</span>, 
                    <span class="hljs-string">"subNodes"</span> : [ 
                      { 
                        <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
                        <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
                        <span class="hljs-string">"subNodes"</span> : [ 
                          { 
                            <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                            <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
                            <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                          } 
                        ] 
                      }, 
                      { 
                        <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
                        <span class="hljs-string">"value"</span> : <span class="hljs-number">97</span> 
                      } 
                    ] 
                  } 
                ] 
              } 
            ] 
          }, 
          <span class="hljs-string">"reverse"</span> : <span class="hljs-literal">false</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">9</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">101</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
          <span class="hljs-string">"expression"</span> : { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
            <span class="hljs-string">"subNodes"</span> : [ 
              { 
                <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
                <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
              } 
            ] 
          }, 
          <span class="hljs-string">"outVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
          }, 
          <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
          <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
          <span class="hljs-string">"dependencies"</span> : [ 
            <span class="hljs-number">5</span> 
          ], 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">8</span>, 
          <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">151</span>, 
          <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
          <span class="hljs-string">"inVariable"</span> : { 
            <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
          } 
        } 
      ], 
      <span class="hljs-string">"rules"</span> : [ 
        <span class="hljs-string">"move-calculations-up"</span>, 
        <span class="hljs-string">"move-filters-up"</span>, 
        <span class="hljs-string">"remove-redundant-calculations"</span>, 
        <span class="hljs-string">"remove-unnecessary-calculations"</span>, 
        <span class="hljs-string">"move-calculations-up-2"</span>, 
        <span class="hljs-string">"move-filters-up-2"</span>, 
        <span class="hljs-string">"use-indexes"</span>, 
        <span class="hljs-string">"remove-filter-covered-by-index"</span>, 
        <span class="hljs-string">"use-index-for-sort"</span> 
      ], 
      <span class="hljs-string">"collections"</span> : [ 
        { 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>, 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
        } 
      ], 
      <span class="hljs-string">"variables"</span> : [ 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        } 
      ], 
      <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">151</span>, 
      <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span> 
    } 
  ], 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">36</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="AQLEXP_05_explainAllPlans_short" onclick="$('#AQLEXP_05_explainAllPlans_short').hide(); $('#AQLEXP_05_explainAllPlans_long').show();">
<pre>
arangosh&gt; stmt.explain({ allPlans: <span class="hljs-literal">true</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_05_explainAllPlans


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_06_explainUnoptimizedPlans


<div id="AQLEXP_06_explainUnoptimizedPlans_container">
<div id="AQLEXP_06_explainUnoptimizedPlans_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain({ optimizer: { rules: [ <span class="hljs-string">"-all"</span> ] } });
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateCollectionNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">101</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        }, 
        <span class="hljs-string">"random"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">201</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare &gt;"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
                  <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                } 
              ] 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">97</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"simple"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"FilterNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">3</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">301</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        } 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">4</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">401</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SortNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">5</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">861.5170185988092</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"elements"</span> : [ 
          { 
            <span class="hljs-string">"inVariable"</span> : { 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
            }, 
            <span class="hljs-string">"ascending"</span> : <span class="hljs-literal">true</span> 
          } 
        ], 
        <span class="hljs-string">"stable"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">6</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">7</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">961.5170185988092</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">7</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1061.517018598809</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1061.517018598809</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="AQLEXP_06_explainUnoptimizedPlans_short" onclick="$('#AQLEXP_06_explainUnoptimizedPlans_short').hide(); $('#AQLEXP_06_explainUnoptimizedPlans_long').show();">
<pre>
arangosh&gt; stmt.explain({ optimizer: { rules: [ <span class="hljs-string">"-all"</span> ] } });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_06_explainUnoptimizedPlans


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_07_explainSingleRulePlans


<div id="AQLEXP_07_explainSingleRulePlans_container">
<div id="AQLEXP_07_explainSingleRulePlans_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain({ optimizer: { rules: [ <span class="hljs-string">"-all"</span>, <span class="hljs-string">"+use-index-range"</span> ] } });
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateCollectionNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">101</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        }, 
        <span class="hljs-string">"random"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">201</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare &gt;"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
                  <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                } 
              ] 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">97</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"simple"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"FilterNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">3</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">301</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        } 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">4</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">401</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SortNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">5</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">861.5170185988092</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"elements"</span> : [ 
          { 
            <span class="hljs-string">"inVariable"</span> : { 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
            }, 
            <span class="hljs-string">"ascending"</span> : <span class="hljs-literal">true</span> 
          } 
        ], 
        <span class="hljs-string">"stable"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">6</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">7</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">961.5170185988092</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">7</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1061.517018598809</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1061.517018598809</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="AQLEXP_07_explainSingleRulePlans_short" onclick="$('#AQLEXP_07_explainSingleRulePlans_short').hide(); $('#AQLEXP_07_explainSingleRulePlans_long').show();">
<pre>
arangosh&gt; stmt.explain({ optimizer: { rules: [ <span class="hljs-string">"-all"</span>, <span class="hljs-string">"+use-index-range"</span> ] } });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_07_explainSingleRulePlans


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_08_explainDisableSingleRulePlans


<div id="AQLEXP_08_explainDisableSingleRulePlans_container">
<div id="AQLEXP_08_explainDisableSingleRulePlans_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain({ optimizer: { rules: [ <span class="hljs-string">"-use-index-range"</span>, <span class="hljs-string">"-use-index-for-sort"</span> ] } });
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"IndexNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">9</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">51</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        }, 
        <span class="hljs-string">"indexes"</span> : [ 
          { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"skiplist"</span>, 
            <span class="hljs-string">"id"</span> : <span class="hljs-string">"510740609"</span>, 
            <span class="hljs-string">"unique"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">false</span>, 
            <span class="hljs-string">"fields"</span> : [ 
              <span class="hljs-string">"value"</span> 
            ] 
          } 
        ], 
        <span class="hljs-string">"condition"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary or"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary and"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare &gt;"</span>, 
                  <span class="hljs-string">"subNodes"</span> : [ 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
                      <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
                      <span class="hljs-string">"subNodes"</span> : [ 
                        { 
                          <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
                          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                        } 
                      ] 
                    }, 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
                      <span class="hljs-string">"value"</span> : <span class="hljs-number">97</span> 
                    } 
                  ] 
                } 
              ] 
            } 
          ] 
        }, 
        <span class="hljs-string">"reverse"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">9</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">101</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SortNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">5</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">296.6011502714073</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
        <span class="hljs-string">"elements"</span> : [ 
          { 
            <span class="hljs-string">"inVariable"</span> : { 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
            }, 
            <span class="hljs-string">"ascending"</span> : <span class="hljs-literal">true</span> 
          } 
        ], 
        <span class="hljs-string">"stable"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">6</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">346.6011502714073</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ 
      <span class="hljs-string">"move-calculations-up"</span>, 
      <span class="hljs-string">"move-filters-up"</span>, 
      <span class="hljs-string">"remove-redundant-calculations"</span>, 
      <span class="hljs-string">"remove-unnecessary-calculations"</span>, 
      <span class="hljs-string">"move-calculations-up-2"</span>, 
      <span class="hljs-string">"move-filters-up-2"</span>, 
      <span class="hljs-string">"use-indexes"</span>, 
      <span class="hljs-string">"remove-filter-covered-by-index"</span> 
    ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">346.6011502714073</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">50</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">24</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="AQLEXP_08_explainDisableSingleRulePlans_short" onclick="$('#AQLEXP_08_explainDisableSingleRulePlans_short').hide(); $('#AQLEXP_08_explainDisableSingleRulePlans_long').show();">
<pre>
arangosh&gt; stmt.explain({ optimizer: { rules: [ <span class="hljs-string">"-use-index-range"</span>, <span class="hljs-string">"-use-index-for-sort"</span> ] } });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_08_explainDisableSingleRulePlans


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_09_explainMaxNumberOfPlans


<div id="AQLEXP_09_explainMaxNumberOfPlans_container">
<div id="AQLEXP_09_explainMaxNumberOfPlans_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain({ maxNumberOfPlans: <span class="hljs-number">1</span> });
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateCollectionNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">101</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
        }, 
        <span class="hljs-string">"random"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">201</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare &gt;"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
                  <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                } 
              ] 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-number">97</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"simple"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"FilterNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">3</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">301</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        } 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">4</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">401</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SortNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">5</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">861.5170185988092</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"elements"</span> : [ 
          { 
            <span class="hljs-string">"inVariable"</span> : { 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
            }, 
            <span class="hljs-string">"ascending"</span> : <span class="hljs-literal">true</span> 
          } 
        ], 
        <span class="hljs-string">"stable"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">6</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">7</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">961.5170185988092</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"value"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"attribute"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">7</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">8</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1061.517018598809</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"5"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"3"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"i"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1061.517018598809</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">100</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="AQLEXP_09_explainMaxNumberOfPlans_short" onclick="$('#AQLEXP_09_explainMaxNumberOfPlans_short').hide(); $('#AQLEXP_09_explainMaxNumberOfPlans_long').show();">
<pre>
arangosh&gt; stmt.explain({ maxNumberOfPlans: <span class="hljs-number">1</span> });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_09_explainMaxNumberOfPlans


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Optimizer.md -->
    @startDocuBlockInline AQLEXP_10_explainWarn


<div id="AQLEXP_10_explainWarn_container">
<div id="AQLEXP_10_explainWarn_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(<span class="hljs-string">"FOR i IN 1..10 RETURN 1 / 0"</span>)
arangosh&gt; stmt.explain().warnings;
[ 
  { 
    <span class="hljs-string">"code"</span> : <span class="hljs-number">1562</span>, 
    <span class="hljs-string">"message"</span> : <span class="hljs-string">"division by zero"</span> 
  } 
]
</pre>
</div>
<div id="AQLEXP_10_explainWarn_short" onclick="$('#AQLEXP_10_explainWarn_short').hide(); $('#AQLEXP_10_explainWarn_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(<span class="hljs-string">"FOR i IN 1..10 RETURN 1 / 0"</span>)
arangosh&gt; stmt.explain().warnings;
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock AQLEXP_10_explainWarn


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 01_workWithAQL_all


<div id="01_workWithAQL_all_container">
<div id="01_workWithAQL_all_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"mycollection"</span>)
[ArangoCollection <span class="hljs-number">446580865</span>, <span class="hljs-string">"mycollection"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; db.mycollection.save({ _key: <span class="hljs-string">"testKey"</span>, Hello : <span class="hljs-string">"World"</span> })
{ 
  <span class="hljs-string">"_id"</span> : <span class="hljs-string">"mycollection/testKey"</span>, 
  <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"446908545"</span>, 
  <span class="hljs-string">"_key"</span> : <span class="hljs-string">"testKey"</span> 
}
arangosh&gt; db._query(<span class="hljs-string">'FOR my IN mycollection RETURN my._key'</span>).toArray()
[ 
  <span class="hljs-string">"testKey"</span> 
]
</pre>
</div>
<div id="01_workWithAQL_all_short" onclick="$('#01_workWithAQL_all_short').hide(); $('#01_workWithAQL_all_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"mycollection"</span>)
arangosh&gt; db.mycollection.save({ _key: <span class="hljs-string">"testKey"</span>, Hello : <span class="hljs-string">"World"</span> })
arangosh&gt; db._query(<span class="hljs-string">'FOR my IN mycollection RETURN my._key'</span>).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 01_workWithAQL_all


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 02_workWithAQL_bindValues


<div id="02_workWithAQL_bindValues_container">
<div id="02_workWithAQL_bindValues_long">
<pre>
arangosh&gt; db._query(
........&gt; <span class="hljs-string">'FOR c IN @@collection FILTER c._key == @key RETURN c._key'</span>, {
........&gt;   <span class="hljs-string">'@collection'</span>: <span class="hljs-string">'mycollection'</span>, 
........&gt;   <span class="hljs-string">'key'</span>: <span class="hljs-string">'testKey'</span>
........&gt; }).toArray();
[ 
  <span class="hljs-string">"testKey"</span> 
]
</pre>
</div>
</div>

    @endDocuBlock 02_workWithAQL_bindValues


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 02_workWithAQL_aqlQuery


<div id="02_workWithAQL_aqlQuery_container">
<div id="02_workWithAQL_aqlQuery_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> key = <span class="hljs-string">'testKey'</span>;
arangosh&gt; db._query(
........&gt; aqlQuery<span class="hljs-string">`FOR c IN mycollection FILTER c._key == <span class="hljs-subst">${key}</span> RETURN c._key`</span>
........&gt; ).toArray();
[ 
  <span class="hljs-string">"testKey"</span> 
]
</pre>
</div>
</div>

    @endDocuBlock 02_workWithAQL_aqlQuery


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 02_workWithAQL_aqlCollectionQuery


<div id="02_workWithAQL_aqlCollectionQuery_container">
<div id="02_workWithAQL_aqlCollectionQuery_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> key = <span class="hljs-string">'testKey'</span>;
arangosh&gt; db._query(aqlQuery<span class="hljs-string">`FOR doc IN <span class="hljs-subst">${ db.mycollection }</span> RETURN doc`</span>
........&gt; ).toArray();
[ 
  { 
    <span class="hljs-string">"Hello"</span> : <span class="hljs-string">"World"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"mycollection/testKey"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"446908545"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"testKey"</span> 
  } 
]
</pre>
</div>
<div id="02_workWithAQL_aqlCollectionQuery_short" onclick="$('#02_workWithAQL_aqlCollectionQuery_short').hide(); $('#02_workWithAQL_aqlCollectionQuery_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> key = <span class="hljs-string">'testKey'</span>;
arangosh&gt; db._query(aqlQuery<span class="hljs-string">`FOR doc IN <span class="hljs-subst">${ db.mycollection }</span> RETURN doc`</span>
........&gt; ).toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 02_workWithAQL_aqlCollectionQuery


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 03_workWithAQL_getExtra


<div id="03_workWithAQL_getExtra_container">
<div id="03_workWithAQL_getExtra_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`FOR i IN 1..100
........&gt;             INSERT { _key: CONCAT('test', TO_STRING(i)) }
........&gt;                INTO mycollection`</span>
........&gt; ).getExtra();
{ 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">100</span>, 
    <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.0007770061492919922</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ] 
}
</pre>
</div>
<div id="03_workWithAQL_getExtra_short" onclick="$('#03_workWithAQL_getExtra_short').hide(); $('#03_workWithAQL_getExtra_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`FOR i IN 1..100
........&gt;             INSERT { _key: CONCAT('test', TO_STRING(i)) }
........&gt;                INTO mycollection`</span>
........&gt; ).getExtra();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 03_workWithAQL_getExtra


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 04_workWithAQL_statements1


<div id="04_workWithAQL_statements1_container">
<div id="04_workWithAQL_statements1_long">
<pre>
arangosh&gt; stmt = db._createStatement( {
........&gt; <span class="hljs-string">"query"</span>: <span class="hljs-string">"FOR i IN [ 1, 2 ] RETURN i * 2"</span> } );
[object ArangoStatement]
</pre>
</div>
</div>

    @endDocuBlock 04_workWithAQL_statements1


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements2


<div id="05_workWithAQL_statements2_container">
<div id="05_workWithAQL_statements2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; c = stmt.execute();
[ 
  <span class="hljs-number">2</span>, 
  <span class="hljs-number">4</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">2</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="05_workWithAQL_statements2_short" onclick="$('#05_workWithAQL_statements2_short').hide(); $('#05_workWithAQL_statements2_long').show();">
<pre>
arangosh&gt; c = stmt.execute();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements2


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements3


<div id="05_workWithAQL_statements3_container">
<div id="05_workWithAQL_statements3_long">
<pre>
arangosh&gt; c.toArray();
[ 
  <span class="hljs-number">2</span>, 
  <span class="hljs-number">4</span> 
]
</pre>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements3


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements4


<div id="05_workWithAQL_statements4_container">
<div id="05_workWithAQL_statements4_long">
<pre>
arangosh&gt; <span class="hljs-keyword">while</span> (c.hasNext()) { <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).print(c.next()); }
<span class="hljs-number">2</span>
<span class="hljs-number">4</span>
</pre>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements4


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements5


<div id="05_workWithAQL_statements5_container">
<div id="05_workWithAQL_statements5_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement( {
........&gt; <span class="hljs-string">"query"</span>: <span class="hljs-string">"FOR i IN [ @one, @two ] RETURN i * 2"</span> } );
arangosh&gt; stmt.bind(<span class="hljs-string">"one"</span>, <span class="hljs-number">1</span>);
arangosh&gt; stmt.bind(<span class="hljs-string">"two"</span>, <span class="hljs-number">2</span>);
arangosh&gt; c = stmt.execute();
[ 
  <span class="hljs-number">2</span>, 
  <span class="hljs-number">4</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">2</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="05_workWithAQL_statements5_short" onclick="$('#05_workWithAQL_statements5_short').hide(); $('#05_workWithAQL_statements5_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement( {
........&gt; <span class="hljs-string">"query"</span>: <span class="hljs-string">"FOR i IN [ @one, @two ] RETURN i * 2"</span> } );
arangosh&gt; stmt.bind(<span class="hljs-string">"one"</span>, <span class="hljs-number">1</span>);
arangosh&gt; stmt.bind(<span class="hljs-string">"two"</span>, <span class="hljs-number">2</span>);
arangosh&gt; c = stmt.execute();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements5


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements6


<div id="05_workWithAQL_statements6_container">
<div id="05_workWithAQL_statements6_long">
<pre>
arangosh&gt; c.toArray();
[ 
  <span class="hljs-number">2</span>, 
  <span class="hljs-number">4</span> 
]
</pre>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements6


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements7


<div id="05_workWithAQL_statements7_container">
<div id="05_workWithAQL_statements7_long">
<pre>
arangosh&gt; <span class="hljs-keyword">while</span> (c.hasNext()) { <span class="hljs-built_in">require</span>(<span class="hljs-string">"internal"</span>).print(c.next()); }
<span class="hljs-number">2</span>
<span class="hljs-number">4</span>
</pre>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements7


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements8


<div id="05_workWithAQL_statements8_container">
<div id="05_workWithAQL_statements8_long">
<pre>
arangosh&gt; stmt = db._createStatement( { 
........&gt;  <span class="hljs-string">"query"</span>: <span class="hljs-string">"FOR i IN [ @one, @two ] RETURN i * 2"</span>, 
........&gt;  <span class="hljs-string">"bindVars"</span>: { 
........&gt;    <span class="hljs-string">"one"</span>: <span class="hljs-number">1</span>, 
........&gt;    <span class="hljs-string">"two"</span>: <span class="hljs-number">2</span> 
........&gt;  } 
........&gt; } );
[object ArangoStatement]
</pre>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements8


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements9


<div id="05_workWithAQL_statements9_container">
<div id="05_workWithAQL_statements9_long">
<pre>
arangosh&gt; stmt = db._createStatement( {
........&gt; <span class="hljs-string">"query"</span>: <span class="hljs-string">"FOR i IN [ 1, 2, 3, 4 ] RETURN i"</span>,
........&gt; <span class="hljs-string">"count"</span>: <span class="hljs-literal">true</span> } );
[object ArangoStatement]
</pre>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements9


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 05_workWithAQL_statements10


<div id="05_workWithAQL_statements10_container">
<div id="05_workWithAQL_statements10_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> c = stmt.execute();
arangosh&gt; c.count();
<span class="hljs-number">4</span>
</pre>
</div>
</div>

    @endDocuBlock 05_workWithAQL_statements10


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 06_workWithAQL_statementsExtra


<div id="06_workWithAQL_statementsExtra_container">
<div id="06_workWithAQL_statementsExtra_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`
........&gt;   FOR i IN 1..@count INSERT
........&gt;     { _key: CONCAT('anothertest', TO_STRING(i)) }
........&gt;     INTO mycollection`</span>,
........&gt;  {count: <span class="hljs-number">100</span>},
........&gt;  {},
........&gt;  {fullCount: <span class="hljs-literal">true</span>}
........&gt; ).getExtra();
{ 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">100</span>, 
    <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.0011789798736572266</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ] 
}
arangosh&gt; db._query({
........&gt;  <span class="hljs-string">"query"</span>: <span class="hljs-string">`FOR i IN 200..@count INSERT
........&gt;              { _key: CONCAT('anothertest', TO_STRING(i)) }
........&gt;              INTO mycollection`</span>,
........&gt;  <span class="hljs-string">"bindVars"</span>: {count: <span class="hljs-number">300</span>},
........&gt;  <span class="hljs-string">"options"</span>: { fullCount: <span class="hljs-literal">true</span>}
........&gt; }).getExtra();
{ 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"writesExecuted"</span> : <span class="hljs-number">101</span>, 
    <span class="hljs-string">"writesIgnored"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"scannedFull"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"scannedIndex"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"filtered"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"executionTime"</span> : <span class="hljs-number">0.0012090206146240234</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ] 
}
</pre>
</div>
<div id="06_workWithAQL_statementsExtra_short" onclick="$('#06_workWithAQL_statementsExtra_short').hide(); $('#06_workWithAQL_statementsExtra_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">`
........&gt;   FOR i IN 1..@count INSERT
........&gt;     { _key: CONCAT('anothertest', TO_STRING(i)) }
........&gt;     INTO mycollection`</span>,
........&gt;  {count: <span class="hljs-number">100</span>},
........&gt;  {},
........&gt;  {fullCount: <span class="hljs-literal">true</span>}
........&gt; ).getExtra();
arangosh&gt; db._query({
........&gt;  <span class="hljs-string">"query"</span>: <span class="hljs-string">`FOR i IN 200..@count INSERT
........&gt;              { _key: CONCAT('anothertest', TO_STRING(i)) }
........&gt;              INTO mycollection`</span>,
........&gt;  <span class="hljs-string">"bindVars"</span>: {count: <span class="hljs-number">300</span>},
........&gt;  <span class="hljs-string">"options"</span>: { fullCount: <span class="hljs-literal">true</span>}
........&gt; }).getExtra();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 06_workWithAQL_statementsExtra


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 07_workWithAQL_statementsExplain


<div id="07_workWithAQL_statementsExplain_container">
<div id="07_workWithAQL_statementsExplain_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(
........&gt; <span class="hljs-string">"FOR user IN _users RETURN user"</span>);
arangosh&gt; stmt.explain();
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateCollectionNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span> 
        }, 
        <span class="hljs-string">"random"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="07_workWithAQL_statementsExplain_short" onclick="$('#07_workWithAQL_statementsExplain_short').hide(); $('#07_workWithAQL_statementsExplain_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(
........&gt; <span class="hljs-string">"FOR user IN _users RETURN user"</span>);
arangosh&gt; stmt.explain();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 07_workWithAQL_statementsExplain


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 08_workWithAQL_statementsPlans


<div id="08_workWithAQL_statementsPlans_container">
<div id="08_workWithAQL_statementsPlans_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> formatPlan = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">plan</span>) </span>{
........&gt;    <span class="hljs-keyword">return</span> { estimatedCost: plan.estimatedCost,
........&gt;        nodes: plan.nodes.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) </span>{
........&gt; <span class="hljs-keyword">return</span> node.type; }) }; };
arangosh&gt; formatPlan(stmt.explain().plan);
{ 
  <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
  <span class="hljs-string">"nodes"</span> : [ 
    <span class="hljs-string">"SingletonNode"</span>, 
    <span class="hljs-string">"EnumerateCollectionNode"</span>, 
    <span class="hljs-string">"ReturnNode"</span> 
  ] 
}
</pre>
</div>
<div id="08_workWithAQL_statementsPlans_short" onclick="$('#08_workWithAQL_statementsPlans_short').hide(); $('#08_workWithAQL_statementsPlans_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> formatPlan = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">plan</span>) </span>{
........&gt;    <span class="hljs-keyword">return</span> { estimatedCost: plan.estimatedCost,
........&gt;        nodes: plan.nodes.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) </span>{
........&gt; <span class="hljs-keyword">return</span> node.type; }) }; };
arangosh&gt; formatPlan(stmt.explain().plan);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 08_workWithAQL_statementsPlans


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 09_workWithAQL_statementsPlansBind


<div id="09_workWithAQL_statementsPlansBind_container">
<div id="09_workWithAQL_statementsPlansBind_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(
........&gt; <span class="hljs-string">`FOR doc IN @@collection FILTER doc.user == @user RETURN doc`</span>
........&gt; );
arangosh&gt; stmt.bind({ <span class="hljs-string">"@collection"</span> : <span class="hljs-string">"_users"</span>, <span class="hljs-string">"user"</span> : <span class="hljs-string">"root"</span> });
arangosh&gt; stmt.explain();
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"IndexNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">6</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"doc"</span> 
        }, 
        <span class="hljs-string">"indexes"</span> : [ 
          { 
            <span class="hljs-string">"type"</span> : <span class="hljs-string">"hash"</span>, 
            <span class="hljs-string">"id"</span> : <span class="hljs-string">"542849"</span>, 
            <span class="hljs-string">"unique"</span> : <span class="hljs-literal">true</span>, 
            <span class="hljs-string">"sparse"</span> : <span class="hljs-literal">true</span>, 
            <span class="hljs-string">"selectivityEstimate"</span> : <span class="hljs-number">1</span>, 
            <span class="hljs-string">"fields"</span> : [ 
              <span class="hljs-string">"user"</span> 
            ] 
          } 
        ], 
        <span class="hljs-string">"condition"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary or"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"n-ary and"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare =="</span>, 
                  <span class="hljs-string">"subNodes"</span> : [ 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
                      <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span>, 
                      <span class="hljs-string">"subNodes"</span> : [ 
                        { 
                          <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                          <span class="hljs-string">"name"</span> : <span class="hljs-string">"doc"</span>, 
                          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                        } 
                      ] 
                    }, 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
                      <span class="hljs-string">"value"</span> : <span class="hljs-string">"root"</span> 
                    } 
                  ] 
                } 
              ] 
            } 
          ] 
        }, 
        <span class="hljs-string">"reverse"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">6</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"doc"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ 
      <span class="hljs-string">"use-indexes"</span>, 
      <span class="hljs-string">"remove-filter-covered-by-index"</span> 
    ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"doc"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">25</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">0</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="09_workWithAQL_statementsPlansBind_short" onclick="$('#09_workWithAQL_statementsPlansBind_short').hide(); $('#09_workWithAQL_statementsPlansBind_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(
........&gt; <span class="hljs-string">`FOR doc IN @@collection FILTER doc.user == @user RETURN doc`</span>
........&gt; );
arangosh&gt; stmt.bind({ <span class="hljs-string">"@collection"</span> : <span class="hljs-string">"_users"</span>, <span class="hljs-string">"user"</span> : <span class="hljs-string">"root"</span> });
arangosh&gt; stmt.explain();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 09_workWithAQL_statementsPlansBind


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 10_workWithAQL_statementsPlansOptimizer0


<div id="10_workWithAQL_statementsPlansOptimizer0_container">
<div id="10_workWithAQL_statementsPlansOptimizer0_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(
........&gt; <span class="hljs-string">"FOR user IN _users FILTER user.user == 'root' RETURN user"</span>);
arangosh&gt; stmt.explain({ allPlans: <span class="hljs-literal">true</span> }).plans.length;
<span class="hljs-number">1</span>
</pre>
</div>
</div>

    @endDocuBlock 10_workWithAQL_statementsPlansOptimizer0


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 10_workWithAQL_statementsPlansOptimizer1


<div id="10_workWithAQL_statementsPlansOptimizer1_container">
<div id="10_workWithAQL_statementsPlansOptimizer1_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain({ allPlans: <span class="hljs-literal">true</span> }).plans.map(
........&gt; <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">plan</span>) </span>{ <span class="hljs-keyword">return</span> formatPlan(plan); });
[ 
  { 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"nodes"</span> : [ 
      <span class="hljs-string">"SingletonNode"</span>, 
      <span class="hljs-string">"IndexNode"</span>, 
      <span class="hljs-string">"ReturnNode"</span> 
    ] 
  } 
]
</pre>
</div>
<div id="10_workWithAQL_statementsPlansOptimizer1_short" onclick="$('#10_workWithAQL_statementsPlansOptimizer1_short').hide(); $('#10_workWithAQL_statementsPlansOptimizer1_long').show();">
<pre>
arangosh&gt; stmt.explain({ allPlans: <span class="hljs-literal">true</span> }).plans.map(
........&gt; <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">plan</span>) </span>{ <span class="hljs-keyword">return</span> formatPlan(plan); });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 10_workWithAQL_statementsPlansOptimizer1


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 10_workWithAQL_statementsPlansOptimizer2


<div id="10_workWithAQL_statementsPlansOptimizer2_container">
<div id="10_workWithAQL_statementsPlansOptimizer2_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; stmt.explain({ optimizer: {
........&gt; rules: [ <span class="hljs-string">"-all"</span>, <span class="hljs-string">"+remove-redundant-calculations"</span> ] } });
{ 
  <span class="hljs-string">"plan"</span> : { 
    <span class="hljs-string">"nodes"</span> : [ 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"SingletonNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"EnumerateCollectionNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">1</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"database"</span> : <span class="hljs-string">"_system"</span>, 
        <span class="hljs-string">"collection"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span> 
        }, 
        <span class="hljs-string">"random"</span> : <span class="hljs-literal">false</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"CalculationNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">2</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">3</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"expression"</span> : { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare =="</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span>, 
                  <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                } 
              ] 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"value"</span>, 
              <span class="hljs-string">"value"</span> : <span class="hljs-string">"root"</span> 
            } 
          ] 
        }, 
        <span class="hljs-string">"outVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        }, 
        <span class="hljs-string">"canThrow"</span> : <span class="hljs-literal">false</span>, 
        <span class="hljs-string">"expressionType"</span> : <span class="hljs-string">"simple"</span> 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"FilterNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">3</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">4</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
        } 
      }, 
      { 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"ReturnNode"</span>, 
        <span class="hljs-string">"dependencies"</span> : [ 
          <span class="hljs-number">4</span> 
        ], 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">5</span>, 
        <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span>, 
        <span class="hljs-string">"inVariable"</span> : { 
          <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
          <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span> 
        } 
      } 
    ], 
    <span class="hljs-string">"rules"</span> : [ ], 
    <span class="hljs-string">"collections"</span> : [ 
      { 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"_users"</span>, 
        <span class="hljs-string">"type"</span> : <span class="hljs-string">"read"</span> 
      } 
    ], 
    <span class="hljs-string">"variables"</span> : [ 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">2</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"1"</span> 
      }, 
      { 
        <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span>, 
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"user"</span> 
      } 
    ], 
    <span class="hljs-string">"estimatedCost"</span> : <span class="hljs-number">5</span>, 
    <span class="hljs-string">"estimatedNrItems"</span> : <span class="hljs-number">1</span> 
  }, 
  <span class="hljs-string">"warnings"</span> : [ ], 
  <span class="hljs-string">"stats"</span> : { 
    <span class="hljs-string">"rulesExecuted"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"rulesSkipped"</span> : <span class="hljs-number">24</span>, 
    <span class="hljs-string">"plansCreated"</span> : <span class="hljs-number">1</span> 
  } 
}
</pre>
</div>
<div id="10_workWithAQL_statementsPlansOptimizer2_short" onclick="$('#10_workWithAQL_statementsPlansOptimizer2_short').hide(); $('#10_workWithAQL_statementsPlansOptimizer2_long').show();">
<pre>
arangosh&gt; stmt.explain({ optimizer: {
........&gt; rules: [ <span class="hljs-string">"-all"</span>, <span class="hljs-string">"+remove-redundant-calculations"</span> ] } });
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 10_workWithAQL_statementsPlansOptimizer2


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 10_workWithAQL_statementsPlansOptimizer3


<div id="10_workWithAQL_statementsPlansOptimizer3_container">
<div id="10_workWithAQL_statementsPlansOptimizer3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; var query = "FOR doc IN mycollection FILTER doc.value &gt; 42 RETURN doc";
arangosh&gt; require("org/arangodb/aql/explainer").explain(query, {colors:false});
Query string:
 FOR doc IN mycollection FILTER doc.value &gt; 42 RETURN doc

Execution plan:
 Id   NodeType                  Est.   Comment
  1   SingletonNode                1   * ROOT
  2   EnumerateCollectionNode    302     - FOR doc IN mycollection   /* full collection scan */
  3   CalculationNode            302       - LET #1 = (doc.`value` &gt; 42)   /* simple expression */   /* collections used: doc : mycollection */
  4   FilterNode                 302       - FILTER #1
  5   ReturnNode                 302       - RETURN doc

Indexes used:
 none

Optimization rules applied:
 none


</pre>
</div>
<div id="10_workWithAQL_statementsPlansOptimizer3_short" onclick="$('#10_workWithAQL_statementsPlansOptimizer3_short').hide(); $('#10_workWithAQL_statementsPlansOptimizer3_long').show();">
<pre>
arangosh&gt; var query = "FOR doc IN mycollection FILTER doc.value &gt; 42 RETURN doc";
arangosh&gt; require("org/arangodb/aql/explainer").explain(query, {colors:false});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 10_workWithAQL_statementsPlansOptimizer3


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/Invoke.md -->
    @startDocuBlockInline 11_workWithAQL_parseQueries


<div id="11_workWithAQL_parseQueries_container">
<div id="11_workWithAQL_parseQueries_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(
........&gt; <span class="hljs-string">"FOR doc IN @@collection FILTER doc.foo == @bar RETURN doc"</span>);
arangosh&gt; stmt.parse();
{ 
  <span class="hljs-string">"bindVars"</span> : [ 
    <span class="hljs-string">"@collection"</span>, 
    <span class="hljs-string">"bar"</span> 
  ], 
  <span class="hljs-string">"collections"</span> : [ ], 
  <span class="hljs-string">"ast"</span> : [ 
    { 
      <span class="hljs-string">"type"</span> : <span class="hljs-string">"root"</span>, 
      <span class="hljs-string">"subNodes"</span> : [ 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"for"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"variable"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"doc"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            }, 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"parameter"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"@collection"</span> 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"filter"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"compare =="</span>, 
              <span class="hljs-string">"subNodes"</span> : [ 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"attribute access"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"foo"</span>, 
                  <span class="hljs-string">"subNodes"</span> : [ 
                    { 
                      <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
                      <span class="hljs-string">"name"</span> : <span class="hljs-string">"doc"</span>, 
                      <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
                    } 
                  ] 
                }, 
                { 
                  <span class="hljs-string">"type"</span> : <span class="hljs-string">"parameter"</span>, 
                  <span class="hljs-string">"name"</span> : <span class="hljs-string">"bar"</span> 
                } 
              ] 
            } 
          ] 
        }, 
        { 
          <span class="hljs-string">"type"</span> : <span class="hljs-string">"return"</span>, 
          <span class="hljs-string">"subNodes"</span> : [ 
            { 
              <span class="hljs-string">"type"</span> : <span class="hljs-string">"reference"</span>, 
              <span class="hljs-string">"name"</span> : <span class="hljs-string">"doc"</span>, 
              <span class="hljs-string">"id"</span> : <span class="hljs-number">0</span> 
            } 
          ] 
        } 
      ] 
    } 
  ] 
}
</pre>
</div>
<div id="11_workWithAQL_parseQueries_short" onclick="$('#11_workWithAQL_parseQueries_short').hide(); $('#11_workWithAQL_parseQueries_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> stmt = db._createStatement(
........&gt; <span class="hljs-string">"FOR doc IN @@collection FILTER doc.foo == @bar RETURN doc"</span>);
arangosh&gt; stmt.parse();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock 11_workWithAQL_parseQueries


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_01_create_graph


<div id="GRAPHTRAV_01_create_graph_container">
<div id="GRAPHTRAV_01_create_graph_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"traversalGraph"</span>);
arangosh&gt; db.circles.toArray();
[ 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"5"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/E"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"526665857"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"E"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"6"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/F"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"526862465"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"F"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"3"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/C"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"526272641"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"C"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"11"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/K"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"527845505"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"K"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"4"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/D"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"526469249"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"D"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"9"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/I"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"527452289"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"I"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"1"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/A"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"525879425"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"A"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"2"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/B"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"526076033"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"B"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"10"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/J"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"527648897"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"J"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"7"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/G"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"527059073"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"G"</span> 
  }, 
  { 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"8"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"circles/H"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"527255681"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"H"</span> 
  } 
]
arangosh&gt; db.edges.toArray();
[ 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_zip"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/529877121"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"529877121"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"529877121"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/G"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/J"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_zup"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/530073729"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"530073729"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"530073729"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/J"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/K"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_blarg"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/528500865"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"528500865"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"528500865"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/B"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/C"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_schubi"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/529090689"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"529090689"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"529090689"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/E"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/F"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_bar"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/528304257"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"528304257"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"528304257"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/A"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/B"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_blub"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/529680513"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"529680513"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"529680513"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/H"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/I"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_blub"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/528894081"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"528894081"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"528894081"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/B"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/E"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"left_blorg"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/528697473"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"528697473"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"528697473"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/C"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/D"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_blob"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/529483905"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"529483905"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"529483905"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/G"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/H"</span> 
  }, 
  { 
    <span class="hljs-string">"theFalse"</span> : <span class="hljs-literal">false</span>, 
    <span class="hljs-string">"theTruth"</span> : <span class="hljs-literal">true</span>, 
    <span class="hljs-string">"label"</span> : <span class="hljs-string">"right_foo"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"edges/529287297"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"529287297"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"529287297"</span>, 
    <span class="hljs-string">"_from"</span> : <span class="hljs-string">"circles/A"</span>, 
    <span class="hljs-string">"_to"</span> : <span class="hljs-string">"circles/G"</span> 
  } 
]
</pre>
</div>
<div id="GRAPHTRAV_01_create_graph_short" onclick="$('#GRAPHTRAV_01_create_graph_short').hide(); $('#GRAPHTRAV_01_create_graph_long').show();">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> graph = examples.loadGraph(<span class="hljs-string">"traversalGraph"</span>);
arangosh&gt; db.circles.toArray();
arangosh&gt; db.edges.toArray();
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock GRAPHTRAV_01_create_graph


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_02_traverse_all


<div id="GRAPHTRAV_02_traverse_all_container">
<div id="GRAPHTRAV_02_traverse_all_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' RETURN v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"D"</span>, 
  <span class="hljs-string">"E"</span>, 
  <span class="hljs-string">"F"</span>, 
  <span class="hljs-string">"G"</span>, 
  <span class="hljs-string">"H"</span>, 
  <span class="hljs-string">"I"</span>, 
  <span class="hljs-string">"J"</span>, 
  <span class="hljs-string">"K"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">10</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 OUTBOUND 'circles/A' edges RETURN v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"D"</span>, 
  <span class="hljs-string">"E"</span>, 
  <span class="hljs-string">"F"</span>, 
  <span class="hljs-string">"G"</span>, 
  <span class="hljs-string">"H"</span>, 
  <span class="hljs-string">"I"</span>, 
  <span class="hljs-string">"J"</span>, 
  <span class="hljs-string">"K"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">10</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="GRAPHTRAV_02_traverse_all_short" onclick="$('#GRAPHTRAV_02_traverse_all_short').hide(); $('#GRAPHTRAV_02_traverse_all_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' RETURN v._key"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 OUTBOUND 'circles/A' edges RETURN v._key"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock GRAPHTRAV_02_traverse_all


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_03_traverse_3


<div id="GRAPHTRAV_03_traverse_3_container">
<div id="GRAPHTRAV_03_traverse_3_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 2..2 OUTBOUND 'circles/A' GRAPH 'traversalGraph' return v._key"</span>);
[ 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"E"</span>, 
  <span class="hljs-string">"H"</span>, 
  <span class="hljs-string">"J"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">4</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 2 OUTBOUND 'circles/A' GRAPH 'traversalGraph' return v._key"</span>);
[ 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"E"</span>, 
  <span class="hljs-string">"H"</span>, 
  <span class="hljs-string">"J"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">4</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="GRAPHTRAV_03_traverse_3_short" onclick="$('#GRAPHTRAV_03_traverse_3_short').hide(); $('#GRAPHTRAV_03_traverse_3_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 2..2 OUTBOUND 'circles/A' GRAPH 'traversalGraph' return v._key"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 2 OUTBOUND 'circles/A' GRAPH 'traversalGraph' return v._key"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock GRAPHTRAV_03_traverse_3


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_04_traverse_4


<div id="GRAPHTRAV_04_traverse_4_container">
<div id="GRAPHTRAV_04_traverse_4_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v, e, p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.vertices[1]._key != 'G' RETURN v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"D"</span>, 
  <span class="hljs-string">"E"</span>, 
  <span class="hljs-string">"F"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">5</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; db._query(<span class="hljs-string">"FOR v, e, p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.edges[0].label != 'right_foo' RETURN v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"D"</span>, 
  <span class="hljs-string">"E"</span>, 
  <span class="hljs-string">"F"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">5</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="GRAPHTRAV_04_traverse_4_short" onclick="$('#GRAPHTRAV_04_traverse_4_short').hide(); $('#GRAPHTRAV_04_traverse_4_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v, e, p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.vertices[1]._key != 'G' RETURN v._key"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR v, e, p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.edges[0].label != 'right_foo' RETURN v._key"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock GRAPHTRAV_04_traverse_4


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_05_traverse_5


<div id="GRAPHTRAV_05_traverse_5_container">
<div id="GRAPHTRAV_05_traverse_5_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.vertices[1]._key != 'G' FILTER p.edges[1].label != 'left_blub' return v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"D"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">3</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; db._query(<span class="hljs-string">"FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.vertices[1]._key != 'G' AND    p.edges[1].label != 'left_blub' return v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"D"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">3</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="GRAPHTRAV_05_traverse_5_short" onclick="$('#GRAPHTRAV_05_traverse_5_short').hide(); $('#GRAPHTRAV_05_traverse_5_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.vertices[1]._key != 'G' FILTER p.edges[1].label != 'left_blub' return v._key"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.vertices[1]._key != 'G' AND    p.edges[1].label != 'left_blub' return v._key"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock GRAPHTRAV_05_traverse_5


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_06_traverse_reverse_6


<div id="GRAPHTRAV_06_traverse_reverse_6_container">
<div id="GRAPHTRAV_06_traverse_reverse_6_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 OUTBOUND 'circles/E' GRAPH 'traversalGraph' return v._key"</span>);
[ 
  <span class="hljs-string">"F"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">1</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 INBOUND 'circles/E' GRAPH 'traversalGraph' return v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"A"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">2</span>, hasMore: <span class="hljs-literal">false</span>]
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 ANY 'circles/E' GRAPH 'traversalGraph' return v._key"</span>);
[ 
  <span class="hljs-string">"B"</span>, 
  <span class="hljs-string">"A"</span>, 
  <span class="hljs-string">"G"</span>, 
  <span class="hljs-string">"C"</span>, 
  <span class="hljs-string">"D"</span>, 
  <span class="hljs-string">"F"</span> 
]
[object ArangoQueryCursor, count: <span class="hljs-number">6</span>, hasMore: <span class="hljs-literal">false</span>]
</pre>
</div>
<div id="GRAPHTRAV_06_traverse_reverse_6_short" onclick="$('#GRAPHTRAV_06_traverse_reverse_6_short').hide(); $('#GRAPHTRAV_06_traverse_reverse_6_long').show();">
<pre>
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 OUTBOUND 'circles/E' GRAPH 'traversalGraph' return v._key"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 INBOUND 'circles/E' GRAPH 'traversalGraph' return v._key"</span>);
arangosh&gt; db._query(<span class="hljs-string">"FOR v IN 1..3 ANY 'circles/E' GRAPH 'traversalGraph' return v._key"</span>);
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock GRAPHTRAV_06_traverse_reverse_6


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_07_traverse_7


<div id="GRAPHTRAV_07_traverse_7_container">
<div id="GRAPHTRAV_07_traverse_7_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._explain("FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' LET localScopeVar = RAND() &gt; 0.5 FILTER p.edges[0].theTruth != localScopeVar RETURN v._key", {}, {colors: false});
Query string:
 FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' LET localScopeVar = RAND() &gt; 0.5 
 FILTER p.edges[0].theTruth != localScopeVar RETURN v._key

Execution plan:
 Id   NodeType          Est.   Comment
  1   SingletonNode        1   * ROOT
  2   TraversalNode        1     - FOR v  /* vertex */  , e  /* edge */  , p  /* paths */  IN 1..3  /* min..maxPathDepth */  OUTBOUND 'circles/A' /* startnode */  GRAPH 'traversalGraph'
  3   CalculationNode      1     - LET localScopeVar = (RAND() &gt; 0.5)   /* simple expression */
  4   CalculationNode      1     - LET #4 = (p.`edges`[0].`theTruth` != localScopeVar)   /* simple expression */
  5   FilterNode           1     - FILTER #4
  6   CalculationNode      1     - LET #6 = v.`_key`   /* attribute expression */
  7   ReturnNode           1     - RETURN #6

Indexes used:
 none

Traversals on graphs:
 Id   Depth   Vertex collections   Edge collections   Filter conditions
  2   1..3    circles              edges              

Optimization rules applied:
 Id   RuleName
  1   move-calculations-up
  2   move-calculations-down


arangosh&gt; db._explain("FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.edges[0].label == 'right_foo' RETURN v._key", {}, {colors: false});
Query string:
 FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.edges[0].label == 'right_foo' 
 RETURN v._key

Execution plan:
 Id   NodeType          Est.   Comment
  1   SingletonNode        1   * ROOT
  2   TraversalNode        1     - FOR v  /* vertex */  , e  /* edge */  , p  /* paths */  IN 1..3  /* min..maxPathDepth */  OUTBOUND 'circles/A' /* startnode */  GRAPH 'traversalGraph'
  3   CalculationNode      1     - LET #3 = (p.`edges`[0].`label` == "right_foo")   /* simple expression */
  4   FilterNode           1     - FILTER #3
  5   CalculationNode      1     - LET #5 = v.`_key`   /* attribute expression */
  6   ReturnNode           1     - RETURN #5

Indexes used:
 none

Traversals on graphs:
 Id   Depth   Vertex collections   Edge collections   Filter conditions
  2   1..3    circles              edges              `Path`.`edges`[0] -&gt; e.`label` == "right_foo"

Optimization rules applied:
 Id   RuleName
  1   move-calculations-up
  2   move-filters-up
  3   move-calculations-up-2
  4   move-filters-up-2
  5   merge-traversal-filter


</pre>
</div>
<div id="GRAPHTRAV_07_traverse_7_short" onclick="$('#GRAPHTRAV_07_traverse_7_short').hide(); $('#GRAPHTRAV_07_traverse_7_long').show();">
<pre>
arangosh&gt; db._explain("FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' LET localScopeVar = RAND() &gt; 0.5 FILTER p.edges[0].theTruth != localScopeVar RETURN v._key", {}, {colors: false});
arangosh&gt; db._explain("FOR v,e,p IN 1..3 OUTBOUND 'circles/A' GRAPH 'traversalGraph' FILTER p.edges[0].label == 'right_foo' RETURN v._key", {}, {colors: false});
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock GRAPHTRAV_07_traverse_7


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/GraphTraversals.md -->
    @startDocuBlockInline GRAPHTRAV_99_drop_graph


<div id="GRAPHTRAV_99_drop_graph_container">
<div id="GRAPHTRAV_99_drop_graph_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> examples = <span class="hljs-built_in">require</span>(<span class="hljs-string">"org/arangodb/graph-examples/example-graph.js"</span>);
arangosh&gt; examples.dropGraph(<span class="hljs-string">"traversalGraph"</span>);
<span class="hljs-literal">true</span>
</pre>
</div>
</div>

    @endDocuBlock GRAPHTRAV_99_drop_graph


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/Aql/DateFunctions.md -->
    @startDocuBlockInline working_with_date_time


<div id="working_with_date_time_container">
<div id="working_with_date_time_long" onclick="" style="Display: none;">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"exampleTime"</span>);
[ArangoCollection <span class="hljs-number">2428782721</span>, <span class="hljs-string">"exampleTime"</span> (type <span class="hljs-built_in">document</span>, status loaded)]
arangosh&gt; <span class="hljs-keyword">var</span> timestamps = [<span class="hljs-string">"2014-05-07T14:19:09.522"</span>,<span class="hljs-string">"2014-05-07T21:19:09.522"</span>,<span class="hljs-string">"2014-05-08T04:19:09.522"</span>,<span class="hljs-string">"2014-05-08T11:19:09.522"</span>,<span class="hljs-string">"2014-05-08T18:19:09.522"</span>];
arangosh&gt; <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) db.exampleTime.save({value:i, ts: timestamps[i]})
arangosh&gt; db._query(<span class="hljs-string">"FOR d IN exampleTime FILTER d.ts &gt; '2014-05-07T14:19:09.522' and d.ts &lt; '2014-05-08T18:19:09.522' RETURN d"</span>).toArray()
[ 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">3</span>, 
    <span class="hljs-string">"ts"</span> : <span class="hljs-string">"2014-05-08T11:19:09.522"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"exampleTime/2429765761"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2429765761"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2429765761"</span> 
  }, 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">1</span>, 
    <span class="hljs-string">"ts"</span> : <span class="hljs-string">"2014-05-07T21:19:09.522"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"exampleTime/2429372545"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2429372545"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2429372545"</span> 
  }, 
  { 
    <span class="hljs-string">"value"</span> : <span class="hljs-number">2</span>, 
    <span class="hljs-string">"ts"</span> : <span class="hljs-string">"2014-05-08T04:19:09.522"</span>, 
    <span class="hljs-string">"_id"</span> : <span class="hljs-string">"exampleTime/2429569153"</span>, 
    <span class="hljs-string">"_rev"</span> : <span class="hljs-string">"2429569153"</span>, 
    <span class="hljs-string">"_key"</span> : <span class="hljs-string">"2429569153"</span> 
  } 
]
</pre>
</div>
<div id="working_with_date_time_short" onclick="$('#working_with_date_time_short').hide(); $('#working_with_date_time_long').show();">
<pre>
arangosh&gt; db._create(<span class="hljs-string">"exampleTime"</span>);
arangosh&gt; <span class="hljs-keyword">var</span> timestamps = [<span class="hljs-string">"2014-05-07T14:19:09.522"</span>,<span class="hljs-string">"2014-05-07T21:19:09.522"</span>,<span class="hljs-string">"2014-05-08T04:19:09.522"</span>,<span class="hljs-string">"2014-05-08T11:19:09.522"</span>,<span class="hljs-string">"2014-05-08T18:19:09.522"</span>];
arangosh&gt; <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) db.exampleTime.save({value:i, ts: timestamps[i]})
arangosh&gt; db._query(<span class="hljs-string">"FOR d IN exampleTime FILTER d.ts &gt; '2014-05-07T14:19:09.522' and d.ts &lt; '2014-05-08T18:19:09.522' RETURN d"</span>).toArray()
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

    @endDocuBlock working_with_date_time


<!-- filename: /home/mop/projects/arangodb/arangodb-2.8/Documentation/Books/Users/ModuleJavaScript/README.md -->
    @startDocuBlockInline MODJS_fsDir


<div id="MODJS_fsDir_container">
<div id="MODJS_fsDir_long">
<pre>
arangosh&gt; <span class="hljs-keyword">var</span> files = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>);
arangosh&gt; relativeFile = files.join(__dirname, <span class="hljs-string">"scripts"</span>, <span class="hljs-string">"test.js"</span>);
<span class="hljs-regexp">/tmp/</span>scripts/test.js
</pre>
</div>
</div>

    @endDocuBlock MODJS_fsDir

